How To Compile & run Capstone for Windows
                        *-*-*-*-*-*

Capstone requires no prerequisite packages, so it is easy to compile & install.
Open the Visual Studio solution msvc/capstone.sln and see the instructions below.


(0) Tailor Capstone to your need.

  Out of 7 archtitectures supported by Capstone (Arm, Arm64, Mips, PPC, Sparc,
  SystemZ & X86), if you just need several selected archs, choose which ones you
  want to compile in by directly editing the project "capstone-lib" from the
  Visual Studio solution "capstone-msvc.sln" before going to next steps.

  In VisualStudio interface, modify the preprocessor definitions via
  "Project Properties" -> "Configuration Propertis" -> "C/C++" -> "Preprocessor"
  to customize Capstone library, as followings.

  - CAPSTONE_HAS_ARM: support ARM. Delete this to remove ARM support.
  - CAPSTONE_HAS_ARM64: support ARM64. Delete this to remove ARM support.
  - CAPSTONE_HAS_MIPS: support Mips. Delete this to remove ARM support.
  - CAPSTONE_HAS_PPC: support PPC. Delete this to remove ARM support.
  - CAPSTONE_HAS_SPARC: support Sparc. Delete this to remove Sparc support.
  - CAPSTONE_HAS_SYSZ: support SystemZ. Delete this to remove SystemZ support.
  - CAPSTONE_HAS_X86: support X86. Delete this to remove X86 support.

  By default, all 7 architectures are compiled in.


  Besides, Capstone also allows some more customization via following macros.

  - CAPSTONE_USE_SYS_DYN_MEM: delete this to use your own dynamic memory management.
  - CAPSTONE_DIET_NO: rename this to CAPSTONE_DIET to make the binaries more compact.
  - CAPSTONE_X86_REDUCE_NO: rename this to CAPSTONE_X86_REDUCE to make X86 binary smaller.

  By default, both DIET & X86_REDUCE modes are disable.


  For each option, refer to docs/README for more details.



(1) Compile from source on Windows with Visual Studio

  - Choose the configuration and the platform you want: Release/Debug & Win32/Win64.
  - Build only the libraries, or the libraries along with all the tests.



(2) You can make sure the prior steps successfully worked by launching one of the
  testing binary (test*.exe).
