/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013> */

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
static void printInstruction(MCInst *MI, SStream *O, MCRegisterInfo *MRI)
{
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3313U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3306U,	// BUNDLE
    3369U,	// LIFETIME_START
    3293U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    3384U,	// AAA
    8365U,	// AAD8i8
    8840U,	// AAM8i8
    3895U,	// AAS
    3048U,	// ACQUIRE_MOV16rm
    3048U,	// ACQUIRE_MOV32rm
    3048U,	// ACQUIRE_MOV64rm
    3048U,	// ACQUIRE_MOV8rm
    9577U,	// ADC16i16
    278659U,	// ADC16mi
    278659U,	// ADC16mi8
    278659U,	// ADC16mr
    548995U,	// ADC16ri
    548995U,	// ADC16ri8
    811139U,	// ADC16rm
    548995U,	// ADC16rr
    4464771U,	// ADC16rr_REV
    9713U,	// ADC32i32
    295043U,	// ADC32mi
    295043U,	// ADC32mi8
    295043U,	// ADC32mr
    548995U,	// ADC32ri
    548995U,	// ADC32ri8
    1073283U,	// ADC32rm
    548995U,	// ADC32rr
    4464771U,	// ADC32rr_REV
    9861U,	// ADC64i32
    303235U,	// ADC64mi32
    303235U,	// ADC64mi8
    303235U,	// ADC64mr
    548995U,	// ADC64ri32
    548995U,	// ADC64ri8
    1335427U,	// ADC64rm
    548995U,	// ADC64rr
    4464771U,	// ADC64rr_REV
    9475U,	// ADC8i8
    311427U,	// ADC8mi
    311427U,	// ADC8mr
    548995U,	// ADC8ri
    1597571U,	// ADC8rm
    548995U,	// ADC8rr
    4464771U,	// ADC8rr_REV
    8660111U,	// ADCX32rm
    12854415U,	// ADCX32rr
    17048719U,	// ADCX64rm
    12854415U,	// ADCX64rr
    9586U,	// ADD16i16
    278715U,	// ADD16mi
    278715U,	// ADD16mi8
    278715U,	// ADD16mr
    549051U,	// ADD16ri
    549051U,	// ADD16ri8
    0U,	// ADD16ri8_DB
    0U,	// ADD16ri_DB
    811195U,	// ADD16rm
    549051U,	// ADD16rr
    0U,	// ADD16rr_DB
    4464827U,	// ADD16rr_REV
    9723U,	// ADD32i32
    295099U,	// ADD32mi
    295099U,	// ADD32mi8
    295099U,	// ADD32mr
    549051U,	// ADD32ri
    549051U,	// ADD32ri8
    0U,	// ADD32ri8_DB
    0U,	// ADD32ri_DB
    1073339U,	// ADD32rm
    549051U,	// ADD32rr
    0U,	// ADD32rr_DB
    4464827U,	// ADD32rr_REV
    9871U,	// ADD64i32
    303291U,	// ADD64mi32
    303291U,	// ADD64mi8
    303291U,	// ADD64mr
    549051U,	// ADD64ri32
    0U,	// ADD64ri32_DB
    549051U,	// ADD64ri8
    0U,	// ADD64ri8_DB
    1335483U,	// ADD64rm
    549051U,	// ADD64rr
    0U,	// ADD64rr_DB
    4464827U,	// ADD64rr_REV
    9484U,	// ADD8i8
    311483U,	// ADD8mi
    311483U,	// ADD8mr
    549051U,	// ADD8ri
    1597627U,	// ADD8rm
    549051U,	// ADD8rr
    4464827U,	// ADD8rr_REV
    3323U,	// ADJCALLSTACKDOWN32
    3323U,	// ADJCALLSTACKDOWN64
    3341U,	// ADJCALLSTACKUP32
    3341U,	// ADJCALLSTACKUP64
    8660129U,	// ADOX32rm
    12854433U,	// ADOX32rr
    17048737U,	// ADOX64rm
    12854433U,	// ADOX64rr
    9595U,	// AND16i16
    278764U,	// AND16mi
    278764U,	// AND16mi8
    278764U,	// AND16mr
    549100U,	// AND16ri
    549100U,	// AND16ri8
    811244U,	// AND16rm
    549100U,	// AND16rr
    4464876U,	// AND16rr_REV
    9733U,	// AND32i32
    295148U,	// AND32mi
    295148U,	// AND32mi8
    295148U,	// AND32mr
    549100U,	// AND32ri
    549100U,	// AND32ri8
    1073388U,	// AND32rm
    549100U,	// AND32rr
    4464876U,	// AND32rr_REV
    9881U,	// AND64i32
    303340U,	// AND64mi32
    303340U,	// AND64mi8
    303340U,	// AND64mr
    549100U,	// AND64ri32
    549100U,	// AND64ri8
    1335532U,	// AND64rm
    549100U,	// AND64rr
    4464876U,	// AND64rr_REV
    9493U,	// AND8i8
    311532U,	// AND8mi
    311532U,	// AND8mr
    549100U,	// AND8ri
    1597676U,	// AND8rm
    549100U,	// AND8rr
    4464876U,	// AND8rr_REV
    79962765U,	// ANDN32rm
    348398221U,	// ANDN32rr
    616833677U,	// ANDN64rm
    348398221U,	// ANDN64rr
    279146U,	// ARPL16mr
    12853866U,	// ARPL16rr
    1950U,	// ATOMADD6432
    2730U,	// ATOMAND16
    2163U,	// ATOMAND32
    2417U,	// ATOMAND64
    1971U,	// ATOMAND6432
    2884U,	// ATOMAND8
    2845U,	// ATOMMAX16
    2378U,	// ATOMMAX32
    2691U,	// ATOMMAX64
    2120U,	// ATOMMAX6432
    3011U,	// ATOMMAX8
    2769U,	// ATOMMIN16
    2263U,	// ATOMMIN32
    2576U,	// ATOMMIN64
    2014U,	// ATOMMIN6432
    2921U,	// ATOMMIN8
    2749U,	// ATOMNAND16
    2182U,	// ATOMNAND32
    2436U,	// ATOMNAND64
    1992U,	// ATOMNAND6432
    2902U,	// ATOMNAND8
    2808U,	// ATOMOR16
    2341U,	// ATOMOR32
    2654U,	// ATOMOR64
    2079U,	// ATOMOR6432
    2976U,	// ATOMOR8
    1929U,	// ATOMSUB6432
    2057U,	// ATOMSWAP6432
    2864U,	// ATOMUMAX16
    2397U,	// ATOMUMAX32
    2710U,	// ATOMUMAX64
    2141U,	// ATOMUMAX6432
    3029U,	// ATOMUMAX8
    2788U,	// ATOMUMIN16
    2282U,	// ATOMUMIN32
    2595U,	// ATOMUMIN64
    2035U,	// ATOMUMIN6432
    2939U,	// ATOMUMIN8
    2826U,	// ATOMXOR16
    2359U,	// ATOMXOR32
    2672U,	// ATOMXOR64
    2099U,	// ATOMXOR6432
    2993U,	// ATOMXOR8
    881075086U,	// BEXTR32rm
    348398478U,	// BEXTR32rr
    889463694U,	// BEXTR64rm
    348398478U,	// BEXTR64rr
    881075086U,	// BEXTRI32mi
    348398478U,	// BEXTRI32ri
    889463694U,	// BEXTRI64mi
    348398478U,	// BEXTRI64ri
    8659539U,	// BLCFILL32rm
    12853843U,	// BLCFILL32rr
    17048147U,	// BLCFILL64rm
    12853843U,	// BLCFILL64rr
    8659477U,	// BLCI32rm
    12853781U,	// BLCI32rr
    17048085U,	// BLCI64rm
    12853781U,	// BLCI64rr
    8659085U,	// BLCIC32rm
    12853389U,	// BLCIC32rr
    17047693U,	// BLCIC64rm
    12853389U,	// BLCIC64rr
    8659495U,	// BLCMSK32rm
    12853799U,	// BLCMSK32rr
    17048103U,	// BLCMSK64rm
    12853799U,	// BLCMSK64rr
    8659869U,	// BLCS32rm
    12854173U,	// BLCS32rr
    17048477U,	// BLCS64rm
    12854173U,	// BLCS64rr
    8659548U,	// BLSFILL32rm
    12853852U,	// BLSFILL32rr
    17048156U,	// BLSFILL64rm
    12853852U,	// BLSFILL64rr
    8659489U,	// BLSI32rm
    12853793U,	// BLSI32rr
    17048097U,	// BLSI64rm
    12853793U,	// BLSI64rr
    8659092U,	// BLSIC32rm
    12853396U,	// BLSIC32rr
    17047700U,	// BLSIC64rm
    12853396U,	// BLSIC64rr
    8659503U,	// BLSMSK32rm
    12853807U,	// BLSMSK32rr
    17048111U,	// BLSMSK64rm
    12853807U,	// BLSMSK64rr
    8659833U,	// BLSR32rm
    12854137U,	// BLSR32rr
    17048441U,	// BLSR64rm
    12854137U,	// BLSR64rr
    21242097U,	// BOUNDS16rm
    8659185U,	// BOUNDS32rm
    21242333U,	// BSF16rm
    12853725U,	// BSF16rr
    8659421U,	// BSF32rm
    12853725U,	// BSF32rr
    17048029U,	// BSF64rm
    12853725U,	// BSF64rr
    21242740U,	// BSR16rm
    12854132U,	// BSR16rr
    8659828U,	// BSR32rm
    12854132U,	// BSR32rr
    17048436U,	// BSR64rm
    12854132U,	// BSR64rr
    8895U,	// BSWAP32r
    8895U,	// BSWAP64r
    279526U,	// BT16mi8
    279526U,	// BT16mr
    12854246U,	// BT16ri8
    12854246U,	// BT16rr
    295910U,	// BT32mi8
    295910U,	// BT32mr
    12854246U,	// BT32ri8
    12854246U,	// BT32rr
    304102U,	// BT64mi8
    304102U,	// BT64mr
    12854246U,	// BT64ri8
    12854246U,	// BT64rr
    278696U,	// BTC16mi8
    278696U,	// BTC16mr
    12853416U,	// BTC16ri8
    12853416U,	// BTC16rr
    295080U,	// BTC32mi8
    295080U,	// BTC32mr
    12853416U,	// BTC32ri8
    12853416U,	// BTC32rr
    303272U,	// BTC64mi8
    303272U,	// BTC64mr
    12853416U,	// BTC64ri8
    12853416U,	// BTC64rr
    279423U,	// BTR16mi8
    279423U,	// BTR16mr
    12854143U,	// BTR16ri8
    12854143U,	// BTR16rr
    295807U,	// BTR32mi8
    295807U,	// BTR32mr
    12854143U,	// BTR32ri8
    12854143U,	// BTR32rr
    303999U,	// BTR64mi8
    303999U,	// BTR64mr
    12854143U,	// BTR64ri8
    12854143U,	// BTR64rr
    279508U,	// BTS16mi8
    279508U,	// BTS16mr
    12854228U,	// BTS16ri8
    12854228U,	// BTS16rr
    295892U,	// BTS32mi8
    295892U,	// BTS32mr
    12854228U,	// BTS32ri8
    12854228U,	// BTS32rr
    304084U,	// BTS64mi8
    304084U,	// BTS64mr
    12854228U,	// BTS64ri8
    12854228U,	// BTS64rr
    881074715U,	// BZHI32rm
    348398107U,	// BZHI32rr
    889463323U,	// BZHI64rm
    348398107U,	// BZHI64rr
    16973U,	// CALL16m
    8781U,	// CALL16r
    33357U,	// CALL32m
    8781U,	// CALL32r
    41549U,	// CALL64m
    57933U,	// CALL64pcrel32
    8781U,	// CALL64r
    57933U,	// CALLpcrel16
    57933U,	// CALLpcrel32
    4094U,	// CBW
    3815U,	// CDQ
    3600U,	// CDQE
    3453U,	// CLAC
    3485U,	// CLC
    3535U,	// CLD
    3660U,	// CLGI
    3670U,	// CLI
    4038U,	// CLTS
    3489U,	// CMC
    25436207U,	// CMOVA16rm
    4464687U,	// CMOVA16rr
    29630511U,	// CMOVA32rm
    4464687U,	// CMOVA32rr
    33824815U,	// CMOVA64rm
    4464687U,	// CMOVA64rr
    25436461U,	// CMOVAE16rm
    4464941U,	// CMOVAE16rr
    29630765U,	// CMOVAE32rm
    4464941U,	// CMOVAE32rr
    33825069U,	// CMOVAE64rm
    4464941U,	// CMOVAE64rr
    25436284U,	// CMOVB16rm
    4464764U,	// CMOVB16rr
    29630588U,	// CMOVB32rm
    4464764U,	// CMOVB32rr
    33824892U,	// CMOVB64rm
    4464764U,	// CMOVB64rr
    25436481U,	// CMOVBE16rm
    4464961U,	// CMOVBE16rr
    29630785U,	// CMOVBE32rm
    4464961U,	// CMOVBE32rr
    33825089U,	// CMOVBE64rm
    4464961U,	// CMOVBE64rr
    25436630U,	// CMOVE16rm
    4465110U,	// CMOVE16rr
    29630934U,	// CMOVE32rm
    4465110U,	// CMOVE32rr
    33825238U,	// CMOVE64rm
    4465110U,	// CMOVE64rr
    25436680U,	// CMOVG16rm
    4465160U,	// CMOVG16rr
    29630984U,	// CMOVG32rm
    4465160U,	// CMOVG32rr
    33825288U,	// CMOVG64rm
    4465160U,	// CMOVG64rr
    25436501U,	// CMOVGE16rm
    4464981U,	// CMOVGE16rr
    29630805U,	// CMOVGE32rm
    4464981U,	// CMOVGE32rr
    33825109U,	// CMOVGE64rm
    4464981U,	// CMOVGE64rr
    25436801U,	// CMOVL16rm
    4465281U,	// CMOVL16rr
    29631105U,	// CMOVL32rm
    4465281U,	// CMOVL32rr
    33825409U,	// CMOVL64rm
    4465281U,	// CMOVL64rr
    25436525U,	// CMOVLE16rm
    4465005U,	// CMOVLE16rr
    29630829U,	// CMOVLE32rm
    4465005U,	// CMOVLE32rr
    33825133U,	// CMOVLE64rm
    4465005U,	// CMOVLE64rr
    25436553U,	// CMOVNE16rm
    4465033U,	// CMOVNE16rr
    29630857U,	// CMOVNE32rm
    4465033U,	// CMOVNE32rr
    33825161U,	// CMOVNE64rm
    4465033U,	// CMOVNE64rr
    25436842U,	// CMOVNO16rm
    4465322U,	// CMOVNO16rr
    29631146U,	// CMOVNO32rm
    4465322U,	// CMOVNO32rr
    33825450U,	// CMOVNO64rm
    4465322U,	// CMOVNO64rr
    25436903U,	// CMOVNP16rm
    4465383U,	// CMOVNP16rr
    29631207U,	// CMOVNP32rm
    4465383U,	// CMOVNP32rr
    33825511U,	// CMOVNP64rm
    4465383U,	// CMOVNP64rr
    25437127U,	// CMOVNS16rm
    4465607U,	// CMOVNS16rr
    29631431U,	// CMOVNS32rm
    4465607U,	// CMOVNS32rr
    33825735U,	// CMOVNS64rm
    4465607U,	// CMOVNS64rr
    25436856U,	// CMOVO16rm
    4465336U,	// CMOVO16rr
    29631160U,	// CMOVO32rm
    4465336U,	// CMOVO32rr
    33825464U,	// CMOVO64rm
    4465336U,	// CMOVO64rr
    25436949U,	// CMOVP16rm
    4465429U,	// CMOVP16rr
    29631253U,	// CMOVP32rm
    4465429U,	// CMOVP32rr
    33825557U,	// CMOVP64rm
    4465429U,	// CMOVP64rr
    25437151U,	// CMOVS16rm
    4465631U,	// CMOVS16rr
    29631455U,	// CMOVS32rm
    4465631U,	// CMOVS32rr
    33825759U,	// CMOVS64rm
    4465631U,	// CMOVS64rr
    2322U,	// CMOV_FR32
    2635U,	// CMOV_FR64
    1889U,	// CMOV_GR16
    1869U,	// CMOV_GR32
    2958U,	// CMOV_GR8
    2302U,	// CMOV_RFP32
    2615U,	// CMOV_RFP64
    1909U,	// CMOV_RFP80
    2222U,	// CMOV_V16F32
    2456U,	// CMOV_V2F64
    2516U,	// CMOV_V2I64
    2202U,	// CMOV_V4F32
    2476U,	// CMOV_V4F64
    2536U,	// CMOV_V4I64
    2243U,	// CMOV_V8F32
    2496U,	// CMOV_V8F64
    2556U,	// CMOV_V8I64
    9622U,	// CMP16i16
    279248U,	// CMP16mi
    279248U,	// CMP16mi8
    279248U,	// CMP16mr
    12853968U,	// CMP16ri
    12853968U,	// CMP16ri8
    21242576U,	// CMP16rm
    12853968U,	// CMP16rr
    12853968U,	// CMP16rr_REV
    9787U,	// CMP32i32
    295632U,	// CMP32mi
    295632U,	// CMP32mi8
    295632U,	// CMP32mr
    12853968U,	// CMP32ri
    12853968U,	// CMP32ri8
    8659664U,	// CMP32rm
    12853968U,	// CMP32rr
    12853968U,	// CMP32rr_REV
    9902U,	// CMP64i32
    303824U,	// CMP64mi32
    303824U,	// CMP64mi8
    303824U,	// CMP64mr
    12853968U,	// CMP64ri32
    12853968U,	// CMP64ri8
    17048272U,	// CMP64rm
    12853968U,	// CMP64rr
    12853968U,	// CMP64rr_REV
    9510U,	// CMP8i8
    312016U,	// CMP8mi
    312016U,	// CMP8mr
    12853968U,	// CMP8ri
    38019792U,	// CMP8rm
    12853968U,	// CMP8rr
    12853968U,	// CMP8rr_REV
    66689U,	// CMPS16
    73995U,	// CMPS32
    82730U,	// CMPS64
    90211U,	// CMPS8
    98358U,	// CMPXCHG16B
    279021U,	// CMPXCHG16rm
    12853741U,	// CMPXCHG16rr
    295405U,	// CMPXCHG32rm
    12853741U,	// CMPXCHG32rr
    303597U,	// CMPXCHG64rm
    12853741U,	// CMPXCHG64rr
    41026U,	// CMPXCHG8B
    311789U,	// CMPXCHG8rm
    12853741U,	// CMPXCHG8rr
    3529U,	// CPUID32
    3529U,	// CPUID64
    3791U,	// CQO
    3908U,	// CS_PREFIX
    3576U,	// CWD
    3580U,	// CWDE
    3388U,	// DAA
    3899U,	// DAS
    3278U,	// DATA16_PREFIX
    16520U,	// DEC16m
    8328U,	// DEC16r
    8328U,	// DEC32_16r
    8328U,	// DEC32_32r
    32904U,	// DEC32m
    8328U,	// DEC32r
    16520U,	// DEC64_16m
    8328U,	// DEC64_16r
    32904U,	// DEC64_32m
    8328U,	// DEC64_32r
    41096U,	// DEC64m
    8328U,	// DEC64r
    49288U,	// DEC8m
    8328U,	// DEC8r
    17496U,	// DIV16m
    9304U,	// DIV16r
    33880U,	// DIV32m
    9304U,	// DIV32r
    42072U,	// DIV64m
    9304U,	// DIV64r
    50264U,	// DIV8m
    9304U,	// DIV8r
    3916U,	// DS_PREFIX
    10014U,	// EH_RETURN
    10014U,	// EH_RETURN64
    3101U,	// EH_SjLj_LongJmp32
    3191U,	// EH_SjLj_LongJmp64
    3120U,	// EH_SjLj_SetJmp32
    3210U,	// EH_SjLj_SetJmp64
    58117U,	// EH_SjLj_Setup
    12854096U,	// ENTER
    3931U,	// ES_PREFIX
    12853836U,	// FARCALL16i
    107084U,	// FARCALL16m
    12853836U,	// FARCALL32i
    107084U,	// FARCALL32m
    107084U,	// FARCALL64
    12853973U,	// FARJMP16i
    107221U,	// FARJMP16m
    12853973U,	// FARJMP32i
    107221U,	// FARJMP32m
    107221U,	// FARJMP64
    3753U,	// FSETPM
    3946U,	// FS_PREFIX
    3473U,	// GETSEC
    3961U,	// GS_PREFIX
    4063U,	// HLT
    17495U,	// IDIV16m
    9303U,	// IDIV16r
    33879U,	// IDIV32m
    9303U,	// IDIV32r
    42071U,	// IDIV64m
    9303U,	// IDIV64r
    50263U,	// IDIV8m
    9303U,	// IDIV8r
    17019U,	// IMUL16m
    8827U,	// IMUL16r
    25436795U,	// IMUL16rm
    893657723U,	// IMUL16rmi
    893657723U,	// IMUL16rmi8
    4465275U,	// IMUL16rr
    348398203U,	// IMUL16rri
    348398203U,	// IMUL16rri8
    33403U,	// IMUL32m
    8827U,	// IMUL32r
    29631099U,	// IMUL32rm
    881074811U,	// IMUL32rmi
    881074811U,	// IMUL32rmi8
    4465275U,	// IMUL32rr
    348398203U,	// IMUL32rri
    348398203U,	// IMUL32rri8
    41595U,	// IMUL64m
    8827U,	// IMUL64r
    33825403U,	// IMUL64rm
    889463419U,	// IMUL64rmi32
    889463419U,	// IMUL64rmi8
    4465275U,	// IMUL64rr
    348398203U,	// IMUL64rri32
    348398203U,	// IMUL64rri8
    49787U,	// IMUL8m
    8827U,	// IMUL8r
    1950836U,	// IN16
    9614U,	// IN16ri
    4260U,	// IN16rr
    1958142U,	// IN32
    9778U,	// IN32ri
    4270U,	// IN32rr
    1966166U,	// IN8
    9502U,	// IN8ri
    4250U,	// IN8rr
    16547U,	// INC16m
    8355U,	// INC16r
    8355U,	// INC32_16r
    8355U,	// INC32_32r
    32931U,	// INC32m
    8355U,	// INC32r
    16547U,	// INC64_16m
    8355U,	// INC64_16r
    32931U,	// INC64_32m
    8355U,	// INC64_32r
    41123U,	// INC64m
    8355U,	// INC64r
    49315U,	// INC8m
    8355U,	// INC8r
    9249U,	// INT
    3096U,	// INT1
    3186U,	// INT3
    3795U,	// INTO
    3571U,	// INVD
    42214443U,	// INVEPT32
    42214443U,	// INVEPT64
    49658U,	// INVLPG
    4216U,	// INVLPGA32
    4233U,	// INVLPGA64
    42213576U,	// INVPCID32
    42213576U,	// INVPCID64
    42213585U,	// INVVPID32
    42213585U,	// INVVPID64
    4043U,	// IRET16
    3559U,	// IRET32
    3858U,	// IRET64
    3357U,	// Int_MemBarrier
    57633U,	// JAE_1
    57633U,	// JAE_2
    57633U,	// JAE_4
    57381U,	// JA_1
    57381U,	// JA_2
    57381U,	// JA_4
    57653U,	// JBE_1
    57653U,	// JBE_2
    57653U,	// JBE_4
    57426U,	// JB_1
    57426U,	// JB_2
    57426U,	// JB_4
    58574U,	// JCXZ
    58567U,	// JECXZ_32
    58567U,	// JECXZ_64
    57693U,	// JE_1
    57693U,	// JE_2
    57693U,	// JE_4
    57673U,	// JGE_1
    57673U,	// JGE_2
    57673U,	// JGE_4
    57846U,	// JG_1
    57846U,	// JG_2
    57846U,	// JG_4
    57697U,	// JLE_1
    57697U,	// JLE_2
    57697U,	// JLE_4
    57928U,	// JL_1
    57928U,	// JL_2
    57928U,	// JL_4
    17110U,	// JMP16m
    8918U,	// JMP16r
    33494U,	// JMP32m
    8918U,	// JMP32r
    41686U,	// JMP64m
    8918U,	// JMP64r
    58070U,	// JMP_1
    58070U,	// JMP_2
    58070U,	// JMP_4
    57717U,	// JNE_1
    57717U,	// JNE_2
    57717U,	// JNE_4
    58014U,	// JNO_1
    58014U,	// JNO_2
    58014U,	// JNO_4
    58075U,	// JNP_1
    58075U,	// JNP_2
    58075U,	// JNP_4
    58299U,	// JNS_1
    58299U,	// JNS_2
    58299U,	// JNS_4
    58010U,	// JO_1
    58010U,	// JO_2
    58010U,	// JO_4
    58060U,	// JP_1
    58060U,	// JP_2
    58060U,	// JP_4
    58580U,	// JRCXZ
    58295U,	// JS_1
    58295U,	// JS_2
    58295U,	// JS_4
    3625U,	// LAHF
    21242689U,	// LAR16rm
    12854081U,	// LAR16rr
    21242689U,	// LAR32rm
    12854081U,	// LAR32rr
    21242689U,	// LAR64rm
    12854081U,	// LAR64rr
    279021U,	// LCMPXCHG16
    98358U,	// LCMPXCHG16B
    295405U,	// LCMPXCHG32
    303597U,	// LCMPXCHG64
    311789U,	// LCMPXCHG8
    41026U,	// LCMPXCHG8B
    46408611U,	// LDS16rm
    46408611U,	// LDS32rm
    8658976U,	// LEA16r
    8658976U,	// LEA32r
    8658976U,	// LEA64_32r
    17047584U,	// LEA64r
    3612U,	// LEAVE
    3612U,	// LEAVE64
    46408616U,	// LES16rm
    46408616U,	// LES32rm
    46408621U,	// LFS16rm
    46408621U,	// LFS32rm
    46408621U,	// LFS64rm
    107498U,	// LGDT16m
    107498U,	// LGDT32m
    107498U,	// LGDT64m
    46408626U,	// LGS16rm
    46408626U,	// LGS32rm
    46408626U,	// LGS64rm
    107510U,	// LIDT16m
    107510U,	// LIDT32m
    107510U,	// LIDT64m
    17410U,	// LLDT16m
    9218U,	// LLDT16r
    17512U,	// LMSW16m
    9320U,	// LMSW16r
    278715U,	// LOCK_ADD16mi
    278715U,	// LOCK_ADD16mi8
    278715U,	// LOCK_ADD16mr
    295099U,	// LOCK_ADD32mi
    295099U,	// LOCK_ADD32mi8
    295099U,	// LOCK_ADD32mr
    303291U,	// LOCK_ADD64mi32
    303291U,	// LOCK_ADD64mi8
    303291U,	// LOCK_ADD64mr
    311483U,	// LOCK_ADD8mi
    311483U,	// LOCK_ADD8mr
    278764U,	// LOCK_AND16mi
    278764U,	// LOCK_AND16mi8
    278764U,	// LOCK_AND16mr
    295148U,	// LOCK_AND32mi
    295148U,	// LOCK_AND32mi8
    295148U,	// LOCK_AND32mr
    303340U,	// LOCK_AND64mi32
    303340U,	// LOCK_AND64mi8
    303340U,	// LOCK_AND64mr
    311532U,	// LOCK_AND8mi
    311532U,	// LOCK_AND8mr
    16520U,	// LOCK_DEC16m
    32904U,	// LOCK_DEC32m
    41096U,	// LOCK_DEC64m
    49288U,	// LOCK_DEC8m
    16547U,	// LOCK_INC16m
    32931U,	// LOCK_INC32m
    41123U,	// LOCK_INC64m
    49315U,	// LOCK_INC8m
    279389U,	// LOCK_OR16mi
    279389U,	// LOCK_OR16mi8
    279389U,	// LOCK_OR16mr
    295773U,	// LOCK_OR32mi
    295773U,	// LOCK_OR32mi8
    295773U,	// LOCK_OR32mr
    303965U,	// LOCK_OR64mi32
    303965U,	// LOCK_OR64mi8
    303965U,	// LOCK_OR64mr
    312157U,	// LOCK_OR8mi
    312157U,	// LOCK_OR8mr
    3693U,	// LOCK_PREFIX
    278647U,	// LOCK_SUB16mi
    278647U,	// LOCK_SUB16mi8
    278647U,	// LOCK_SUB16mr
    295031U,	// LOCK_SUB32mi
    295031U,	// LOCK_SUB32mi8
    295031U,	// LOCK_SUB32mr
    303223U,	// LOCK_SUB64mi32
    303223U,	// LOCK_SUB64mi8
    303223U,	// LOCK_SUB64mr
    311415U,	// LOCK_SUB8mi
    311415U,	// LOCK_SUB8mr
    279401U,	// LOCK_XOR16mi
    279401U,	// LOCK_XOR16mi8
    279401U,	// LOCK_XOR16mr
    295785U,	// LOCK_XOR32mi
    295785U,	// LOCK_XOR32mi8
    295785U,	// LOCK_XOR32mr
    303977U,	// LOCK_XOR64mi32
    303977U,	// LOCK_XOR64mi8
    303977U,	// LOCK_XOR64mr
    312169U,	// LOCK_XOR8mi
    312169U,	// LOCK_XOR8mr
    140527U,	// LODSB
    149019U,	// LODSL
    157380U,	// LODSQ
    165330U,	// LODSW
    58100U,	// LOOP
    57745U,	// LOOPE
    57722U,	// LOOPNE
    8674U,	// LRETIL
    8988U,	// LRETIQ
    8674U,	// LRETIW
    3646U,	// LRETL
    3832U,	// LRETQ
    3646U,	// LRETW
    21242480U,	// LSL16rm
    12853872U,	// LSL16rr
    8659568U,	// LSL32rm
    12853872U,	// LSL32rr
    17048176U,	// LSL64rm
    12853872U,	// LSL64rr
    46408655U,	// LSS16rm
    46408655U,	// LSS32rm
    46408655U,	// LSS64rm
    17284U,	// LTRm
    9092U,	// LTRr
    172218U,	// LXADD16
    180410U,	// LXADD32
    188602U,	// LXADD64
    196794U,	// LXADD8
    21242899U,	// LZCNT16rm
    12854291U,	// LZCNT16rr
    8659987U,	// LZCNT32rm
    12854291U,	// LZCNT32rr
    17048595U,	// LZCNT64rm
    12854291U,	// LZCNT64rr
    3745U,	// MONTMUL
    0U,	// MORESTACK_RET
    0U,	// MORESTACK_RET_RESTORE_R10
    2303069U,	// MOV16ao16
    2303069U,	// MOV16ao16_16
    279645U,	// MOV16mi
    279645U,	// MOV16mr
    279645U,	// MOV16ms
    206270U,	// MOV16o16a
    206270U,	// MOV16o16a_16
    12854365U,	// MOV16ri
    12854365U,	// MOV16ri_alt
    21242973U,	// MOV16rm
    12854365U,	// MOV16rr
    12854365U,	// MOV16rr_REV
    12854365U,	// MOV16rs
    21242973U,	// MOV16sm
    12854365U,	// MOV16sr
    2573405U,	// MOV32ao32
    2573405U,	// MOV32ao32_16
    12854365U,	// MOV32cr
    12854365U,	// MOV32dr
    296029U,	// MOV32mi
    296029U,	// MOV32mr
    296029U,	// MOV32ms
    214631U,	// MOV32o32a
    214631U,	// MOV32o32a_16
    0U,	// MOV32r0
    12854365U,	// MOV32rc
    12854365U,	// MOV32rd
    12854365U,	// MOV32ri
    0U,	// MOV32ri64
    12854365U,	// MOV32ri_alt
    8660061U,	// MOV32rm
    12854365U,	// MOV32rr
    12854365U,	// MOV32rr_REV
    12854365U,	// MOV32rs
    8660061U,	// MOV32sm
    12854365U,	// MOV32sr
    2302869U,	// MOV64ao16
    2573205U,	// MOV64ao32
    2843541U,	// MOV64ao64
    3113877U,	// MOV64ao8
    12854365U,	// MOV64cr
    12854365U,	// MOV64dr
    304221U,	// MOV64mi32
    304221U,	// MOV64mr
    304221U,	// MOV64ms
    206248U,	// MOV64o16a
    214607U,	// MOV64o32a
    222938U,	// MOV64o64a
    230712U,	// MOV64o8a
    12854365U,	// MOV64rc
    12854365U,	// MOV64rd
    12854165U,	// MOV64ri
    12854365U,	// MOV64ri32
    17048669U,	// MOV64rm
    12854365U,	// MOV64rr
    12854365U,	// MOV64rr_REV
    12854365U,	// MOV64rs
    17048669U,	// MOV64sm
    12854365U,	// MOV64sr
    3114077U,	// MOV8ao8
    3114077U,	// MOV8ao8_16
    312413U,	// MOV8mi
    312413U,	// MOV8mr
    134530141U,	// MOV8mr_NOREX
    230734U,	// MOV8o8a
    230734U,	// MOV8o8a_16
    12854365U,	// MOV8ri
    12854365U,	// MOV8ri_alt
    38020189U,	// MOV8rm
    172237917U,	// MOV8rm_NOREX
    12854365U,	// MOV8rr
    147072093U,	// MOV8rr_NOREX
    12854365U,	// MOV8rr_REV
    278850U,	// MOVBE16mr
    21242178U,	// MOVBE16rm
    295234U,	// MOVBE32mr
    8659266U,	// MOVBE32rm
    303426U,	// MOVBE64mr
    17047874U,	// MOVBE64rm
    0U,	// MOVPC32r
    50724970U,	// MOVSB
    54911250U,	// MOVSL
    59220785U,	// MOVSQ
    63292552U,	// MOVSW
    38020281U,	// MOVSX16rm8
    12854457U,	// MOVSX16rr8
    21243065U,	// MOVSX32rm16
    38020281U,	// MOVSX32rm8
    12854457U,	// MOVSX32rr16
    12854457U,	// MOVSX32rr8
    21243065U,	// MOVSX64rm16
    8659225U,	// MOVSX64rm32
    38020281U,	// MOVSX64rm8
    12854457U,	// MOVSX64rr16
    12853529U,	// MOVSX64rr32
    12854457U,	// MOVSX64rr8
    38020288U,	// MOVZX16rm8
    12854464U,	// MOVZX16rr8
    38020288U,	// MOVZX32_NOREXrm8
    12854464U,	// MOVZX32_NOREXrr8
    21243072U,	// MOVZX32rm16
    38020288U,	// MOVZX32rm8
    12854464U,	// MOVZX32rr16
    12854464U,	// MOVZX32rr8
    21243072U,	// MOVZX64rm16_Q
    38020288U,	// MOVZX64rm8_Q
    12854464U,	// MOVZX64rr16_Q
    12854464U,	// MOVZX64rr8_Q
    17020U,	// MUL16m
    8828U,	// MUL16r
    33404U,	// MUL32m
    8828U,	// MUL32r
    41596U,	// MUL64m
    8828U,	// MUL64r
    49788U,	// MUL8m
    8828U,	// MUL8r
    79963291U,	// MULX32rm
    348398747U,	// MULX32rr
    616834203U,	// MULX64rm
    348398747U,	// MULX64rr
    16872U,	// NEG16m
    8680U,	// NEG16r
    33256U,	// NEG32m
    8680U,	// NEG32r
    41448U,	// NEG64m
    8680U,	// NEG64r
    49640U,	// NEG8m
    8680U,	// NEG8r
    3811U,	// NOOP
    33519U,	// NOOPL
    17135U,	// NOOPW
    17446U,	// NOT16m
    9254U,	// NOT16r
    33830U,	// NOT32m
    9254U,	// NOT32r
    42022U,	// NOT64m
    9254U,	// NOT64r
    50214U,	// NOT8m
    9254U,	// NOT8r
    9632U,	// OR16i16
    279389U,	// OR16mi
    279389U,	// OR16mi8
    279389U,	// OR16mr
    549725U,	// OR16ri
    549725U,	// OR16ri8
    811869U,	// OR16rm
    549725U,	// OR16rr
    4465501U,	// OR16rr_REV
    9798U,	// OR32i32
    295773U,	// OR32mi
    295773U,	// OR32mi8
    295773U,	// OR32mr
    295773U,	// OR32mrLocked
    549725U,	// OR32ri
    549725U,	// OR32ri8
    1074013U,	// OR32rm
    549725U,	// OR32rr
    4465501U,	// OR32rr_REV
    9937U,	// OR64i32
    303965U,	// OR64mi32
    303965U,	// OR64mi8
    303965U,	// OR64mr
    549725U,	// OR64ri32
    549725U,	// OR64ri8
    1336157U,	// OR64rm
    549725U,	// OR64rr
    4465501U,	// OR64rr_REV
    9520U,	// OR8i8
    312157U,	// OR8mi
    312157U,	// OR8mr
    549725U,	// OR8ri
    1598301U,	// OR8rm
    549725U,	// OR8rr
    4465501U,	// OR8rr_REV
    2106444U,	// OUT16ir
    4118U,	// OUT16rr
    2368588U,	// OUT32ir
    4172U,	// OUT32rr
    2892876U,	// OUT8ir
    3698U,	// OUT8rr
    141042U,	// OUTSB
    149245U,	// OUTSL
    165640U,	// OUTSW
    79962822U,	// PDEP32rm
    348398278U,	// PDEP32rr
    616833734U,	// PDEP64rm
    348398278U,	// PDEP64rr
    79963217U,	// PEXT32rm
    348398673U,	// PEXT32rr
    616834129U,	// PEXT64rm
    348398673U,	// PEXT64rr
    8954U,	// POP16r
    17146U,	// POP16rmm
    8954U,	// POP16rmr
    8954U,	// POP32r
    33530U,	// POP32rmm
    8954U,	// POP32rmr
    8954U,	// POP64r
    41722U,	// POP64rmm
    8954U,	// POP64rmr
    4088U,	// POPA16
    3716U,	// POPA32
    3919U,	// POPDS16
    3919U,	// POPDS32
    3934U,	// POPES16
    3934U,	// POPES32
    3641U,	// POPF16
    3523U,	// POPF32
    3826U,	// POPF64
    3949U,	// POPFS16
    3949U,	// POPFS32
    3949U,	// POPFS64
    3964U,	// POPGS16
    3964U,	// POPGS32
    3964U,	// POPGS64
    4031U,	// POPSS16
    4031U,	// POPSS32
    8719U,	// PUSH16i8
    8719U,	// PUSH16r
    16911U,	// PUSH16rmm
    8719U,	// PUSH16rmr
    8719U,	// PUSH32i8
    8719U,	// PUSH32r
    33295U,	// PUSH32rmm
    8719U,	// PUSH32rmr
    8719U,	// PUSH64i16
    8719U,	// PUSH64i32
    8719U,	// PUSH64i8
    8719U,	// PUSH64r
    41487U,	// PUSH64rmm
    8719U,	// PUSH64rmr
    4081U,	// PUSHA16
    3709U,	// PUSHA32
    3903U,	// PUSHCS16
    3903U,	// PUSHCS32
    3911U,	// PUSHDS16
    3911U,	// PUSHDS32
    3926U,	// PUSHES16
    3926U,	// PUSHES32
    3635U,	// PUSHF16
    3516U,	// PUSHF32
    3819U,	// PUSHF64
    3941U,	// PUSHFS16
    3941U,	// PUSHFS32
    3941U,	// PUSHFS64
    3956U,	// PUSHGS16
    3956U,	// PUSHGS32
    3956U,	// PUSHGS64
    4023U,	// PUSHSS16
    4023U,	// PUSHSS32
    8719U,	// PUSHi16
    8719U,	// PUSHi32
    16958U,	// RCL16m1
    3162686U,	// RCL16mCL
    279102U,	// RCL16mi
    8766U,	// RCL16r1
    3154494U,	// RCL16rCL
    4465214U,	// RCL16ri
    33342U,	// RCL32m1
    3179070U,	// RCL32mCL
    295486U,	// RCL32mi
    8766U,	// RCL32r1
    3154494U,	// RCL32rCL
    4465214U,	// RCL32ri
    41534U,	// RCL64m1
    3187262U,	// RCL64mCL
    303678U,	// RCL64mi
    8766U,	// RCL64r1
    3154494U,	// RCL64rCL
    4465214U,	// RCL64ri
    49726U,	// RCL8m1
    3195454U,	// RCL8mCL
    311870U,	// RCL8mi
    8766U,	// RCL8r1
    3154494U,	// RCL8rCL
    4465214U,	// RCL8ri
    17227U,	// RCR16m1
    3162955U,	// RCR16mCL
    279371U,	// RCR16mi
    9035U,	// RCR16r1
    3154763U,	// RCR16rCL
    4465483U,	// RCR16ri
    33611U,	// RCR32m1
    3179339U,	// RCR32mCL
    295755U,	// RCR32mi
    9035U,	// RCR32r1
    3154763U,	// RCR32rCL
    4465483U,	// RCR32ri
    41803U,	// RCR64m1
    3187531U,	// RCR64mCL
    303947U,	// RCR64mi
    9035U,	// RCR64r1
    3154763U,	// RCR64rCL
    4465483U,	// RCR64ri
    49995U,	// RCR8m1
    3195723U,	// RCR8mCL
    312139U,	// RCR8mi
    9035U,	// RCR8r1
    3154763U,	// RCR8rCL
    4465483U,	// RCR8ri
    8600U,	// RDFSBASE
    8600U,	// RDFSBASE64
    8620U,	// RDGSBASE
    8620U,	// RDGSBASE64
    3873U,	// RDMSR
    3493U,	// RDPMC
    8425U,	// RDRAND16r
    8425U,	// RDRAND32r
    8425U,	// RDRAND64r
    8384U,	// RDSEED16r
    8384U,	// RDSEED32r
    8384U,	// RDSEED64r
    3506U,	// RDTSC
    3800U,	// RDTSCP
    3069U,	// RELEASE_MOV16mr
    3069U,	// RELEASE_MOV32mr
    3069U,	// RELEASE_MOV64mr
    3069U,	// RELEASE_MOV8mr
    3594U,	// REPNE_PREFIX
    3437U,	// REP_MOVSB_32
    3437U,	// REP_MOVSB_64
    3549U,	// REP_MOVSD_32
    3549U,	// REP_MOVSD_64
    3848U,	// REP_MOVSQ_64
    4108U,	// REP_MOVSW_32
    4108U,	// REP_MOVSW_64
    3807U,	// REP_PREFIX
    3427U,	// REP_STOSB_32
    3427U,	// REP_STOSB_64
    3539U,	// REP_STOSD_32
    3539U,	// REP_STOSD_64
    3838U,	// REP_STOSQ_64
    4098U,	// REP_STOSW_32
    4098U,	// REP_STOSW_64
    9230U,	// RETIL
    9230U,	// RETIQ
    9230U,	// RETIW
    4044U,	// RETL
    4044U,	// RETQ
    4044U,	// RETW
    3272U,	// REX64_PREFIX
    3424869U,	// ROL16m1
    3162725U,	// ROL16mCL
    279141U,	// ROL16mi
    3416677U,	// ROL16r1
    3154533U,	// ROL16rCL
    4465253U,	// ROL16ri
    3441253U,	// ROL32m1
    3179109U,	// ROL32mCL
    295525U,	// ROL32mi
    3416677U,	// ROL32r1
    3154533U,	// ROL32rCL
    4465253U,	// ROL32ri
    3449445U,	// ROL64m1
    3187301U,	// ROL64mCL
    303717U,	// ROL64mi
    3416677U,	// ROL64r1
    3154533U,	// ROL64rCL
    4465253U,	// ROL64ri
    3457637U,	// ROL8m1
    3195493U,	// ROL8mCL
    311909U,	// ROL8mi
    3416677U,	// ROL8r1
    3154533U,	// ROL8rCL
    4465253U,	// ROL8ri
    3425116U,	// ROR16m1
    3162972U,	// ROR16mCL
    279388U,	// ROR16mi
    3416924U,	// ROR16r1
    3154780U,	// ROR16rCL
    4465500U,	// ROR16ri
    3441500U,	// ROR32m1
    3179356U,	// ROR32mCL
    295772U,	// ROR32mi
    3416924U,	// ROR32r1
    3154780U,	// ROR32rCL
    4465500U,	// ROR32ri
    3449692U,	// ROR64m1
    3187548U,	// ROR64mCL
    303964U,	// ROR64mi
    3416924U,	// ROR64r1
    3154780U,	// ROR64rCL
    4465500U,	// ROR64ri
    3457884U,	// ROR8m1
    3195740U,	// ROR8mCL
    312156U,	// ROR8mi
    3416924U,	// ROR8r1
    3154780U,	// ROR8rCL
    4465500U,	// ROR8ri
    881075379U,	// RORX32mi
    348398771U,	// RORX32ri
    889463987U,	// RORX64mi
    348398771U,	// RORX64ri
    3760U,	// RSM
    3630U,	// SAHF
    3480U,	// SALC
    3425094U,	// SAR16m1
    3162950U,	// SAR16mCL
    279366U,	// SAR16mi
    3416902U,	// SAR16r1
    3154758U,	// SAR16rCL
    4465478U,	// SAR16ri
    3441478U,	// SAR32m1
    3179334U,	// SAR32mCL
    295750U,	// SAR32mi
    3416902U,	// SAR32r1
    3154758U,	// SAR32rCL
    4465478U,	// SAR32ri
    3449670U,	// SAR64m1
    3187526U,	// SAR64mCL
    303942U,	// SAR64mi
    3416902U,	// SAR64r1
    3154758U,	// SAR64rCL
    4465478U,	// SAR64ri
    3457862U,	// SAR8m1
    3195718U,	// SAR8mCL
    312134U,	// SAR8mi
    3416902U,	// SAR8r1
    3154758U,	// SAR8rCL
    4465478U,	// SAR8ri
    881075367U,	// SARX32rm
    348398759U,	// SARX32rr
    889463975U,	// SARX64rm
    348398759U,	// SARX64rr
    9559U,	// SBB16i16
    278605U,	// SBB16mi
    278605U,	// SBB16mi8
    278605U,	// SBB16mr
    548941U,	// SBB16ri
    548941U,	// SBB16ri8
    811085U,	// SBB16rm
    548941U,	// SBB16rr
    4464717U,	// SBB16rr_REV
    9693U,	// SBB32i32
    294989U,	// SBB32mi
    294989U,	// SBB32mi8
    294989U,	// SBB32mr
    548941U,	// SBB32ri
    548941U,	// SBB32ri8
    1073229U,	// SBB32rm
    548941U,	// SBB32rr
    4464717U,	// SBB32rr_REV
    9841U,	// SBB64i32
    303181U,	// SBB64mi32
    303181U,	// SBB64mi8
    303181U,	// SBB64mr
    548941U,	// SBB64ri32
    548941U,	// SBB64ri8
    1335373U,	// SBB64rm
    548941U,	// SBB64rr
    4464717U,	// SBB64rr_REV
    9435U,	// SBB8i8
    311373U,	// SBB8mi
    311373U,	// SBB8mr
    548941U,	// SBB8ri
    1597517U,	// SBB8rm
    548941U,	// SBB8rr
    4464717U,	// SBB8rr_REV
    116167U,	// SCAS16
    124431U,	// SCAS32
    239288U,	// SCAS64
    132324U,	// SCAS8
    3978U,	// SEG_ALLOCA_32
    3978U,	// SEG_ALLOCA_64
    49446U,	// SETAEm
    8486U,	// SETAEr
    49193U,	// SETAm
    8233U,	// SETAr
    49466U,	// SETBEm
    8506U,	// SETBEr
    0U,	// SETB_C16r
    0U,	// SETB_C32r
    0U,	// SETB_C64r
    0U,	// SETB_C8r
    49265U,	// SETBm
    8305U,	// SETBr
    49600U,	// SETEm
    8640U,	// SETEr
    49486U,	// SETGEm
    8526U,	// SETGEr
    49666U,	// SETGm
    8706U,	// SETGr
    49510U,	// SETLEm
    8550U,	// SETLEr
    49781U,	// SETLm
    8821U,	// SETLr
    49538U,	// SETNEm
    8578U,	// SETNEr
    49827U,	// SETNOm
    8867U,	// SETNOr
    49888U,	// SETNPm
    8928U,	// SETNPr
    50112U,	// SETNSm
    9152U,	// SETNSr
    49842U,	// SETOm
    8882U,	// SETOr
    49919U,	// SETPm
    8959U,	// SETPr
    50137U,	// SETSm
    9177U,	// SETSr
    107504U,	// SGDT16m
    107504U,	// SGDT32m
    107504U,	// SGDT64m
    3424835U,	// SHL16m1
    3162691U,	// SHL16mCL
    279107U,	// SHL16mi
    3416643U,	// SHL16r1
    3154499U,	// SHL16rCL
    4465219U,	// SHL16ri
    3441219U,	// SHL32m1
    3179075U,	// SHL32mCL
    295491U,	// SHL32mi
    3416643U,	// SHL32r1
    3154499U,	// SHL32rCL
    4465219U,	// SHL32ri
    3449411U,	// SHL64m1
    3187267U,	// SHL64mCL
    303683U,	// SHL64mi
    3416643U,	// SHL64r1
    3154499U,	// SHL64rCL
    4465219U,	// SHL64ri
    3457603U,	// SHL8m1
    3195459U,	// SHL8mCL
    311875U,	// SHL8mi
    3416643U,	// SHL8r1
    3154499U,	// SHL8rCL
    4465219U,	// SHL8ri
    201605338U,	// SHLD16mrCL
    872693978U,	// SHLD16mri8
    205791450U,	// SHLD16rrCL
    1145315546U,	// SHLD16rri8
    201621722U,	// SHLD32mrCL
    872710362U,	// SHLD32mri8
    205791450U,	// SHLD32rrCL
    1145315546U,	// SHLD32rri8
    201629914U,	// SHLD64mrCL
    872718554U,	// SHLD64mri8
    205791450U,	// SHLD64rrCL
    1145315546U,	// SHLD64rri8
    881075349U,	// SHLX32rm
    348398741U,	// SHLX32rr
    889463957U,	// SHLX64rm
    348398741U,	// SHLX64rr
    3425111U,	// SHR16m1
    3162967U,	// SHR16mCL
    279383U,	// SHR16mi
    3416919U,	// SHR16r1
    3154775U,	// SHR16rCL
    4465495U,	// SHR16ri
    3441495U,	// SHR32m1
    3179351U,	// SHR32mCL
    295767U,	// SHR32mi
    3416919U,	// SHR32r1
    3154775U,	// SHR32rCL
    4465495U,	// SHR32ri
    3449687U,	// SHR64m1
    3187543U,	// SHR64mCL
    303959U,	// SHR64mi
    3416919U,	// SHR64r1
    3154775U,	// SHR64rCL
    4465495U,	// SHR64ri
    3457879U,	// SHR8m1
    3195735U,	// SHR8mCL
    312151U,	// SHR8mi
    3416919U,	// SHR8r1
    3154775U,	// SHR8rCL
    4465495U,	// SHR8ri
    201605368U,	// SHRD16mrCL
    872694008U,	// SHRD16mri8
    205791480U,	// SHRD16rrCL
    1145315576U,	// SHRD16rri8
    201621752U,	// SHRD32mrCL
    872710392U,	// SHRD32mri8
    205791480U,	// SHRD32rrCL
    1145315576U,	// SHRD32rri8
    201629944U,	// SHRD64mrCL
    872718584U,	// SHRD64mri8
    205791480U,	// SHRD64rrCL
    1145315576U,	// SHRD64rri8
    881075373U,	// SHRX32rm
    348398765U,	// SHRX32rr
    889463981U,	// SHRX64rm
    348398765U,	// SHRX64rr
    107516U,	// SIDT16m
    107516U,	// SIDT32m
    107516U,	// SIDT64m
    4161U,	// SKINIT
    17416U,	// SLDT16m
    9224U,	// SLDT16r
    9224U,	// SLDT32r
    17416U,	// SLDT64m
    9224U,	// SLDT64r
    17518U,	// SMSW16m
    9326U,	// SMSW16r
    9326U,	// SMSW32r
    9326U,	// SMSW64r
    4028U,	// SS_PREFIX
    3458U,	// STAC
    3512U,	// STC
    3565U,	// STD
    3665U,	// STGI
    3674U,	// STI
    3014748U,	// STOSB
    2482436U,	// STOSL
    2859811U,	// STOSQ
    2212986U,	// STOSW
    9097U,	// STR16r
    9097U,	// STR32r
    9097U,	// STR64r
    17289U,	// STRm
    9568U,	// SUB16i16
    278647U,	// SUB16mi
    278647U,	// SUB16mi8
    278647U,	// SUB16mr
    548983U,	// SUB16ri
    548983U,	// SUB16ri8
    811127U,	// SUB16rm
    548983U,	// SUB16rr
    4464759U,	// SUB16rr_REV
    9703U,	// SUB32i32
    295031U,	// SUB32mi
    295031U,	// SUB32mi8
    295031U,	// SUB32mr
    548983U,	// SUB32ri
    548983U,	// SUB32ri8
    1073271U,	// SUB32rm
    548983U,	// SUB32rr
    4464759U,	// SUB32rr_REV
    9851U,	// SUB64i32
    303223U,	// SUB64mi32
    303223U,	// SUB64mi8
    303223U,	// SUB64mr
    548983U,	// SUB64ri32
    548983U,	// SUB64ri8
    1335415U,	// SUB64rm
    548983U,	// SUB64rr
    4464759U,	// SUB64rr_REV
    9466U,	// SUB8i8
    311415U,	// SUB8mi
    311415U,	// SUB8mr
    548983U,	// SUB8ri
    1597559U,	// SUB8rm
    548983U,	// SUB8rr
    4464759U,	// SUB8rr_REV
    3971U,	// SWAPGS
    3737U,	// SYSCALL
    3864U,	// SYSENTER
    4055U,	// SYSEXIT
    4055U,	// SYSEXIT64
    4048U,	// SYSRET
    4048U,	// SYSRET64
    8659099U,	// T1MSKC32rm
    12853403U,	// T1MSKC32rr
    17047707U,	// T1MSKC64rm
    12853403U,	// T1MSKC64rr
    3728086U,	// TAILJMPd
    3728086U,	// TAILJMPd64
    3703510U,	// TAILJMPm
    3711702U,	// TAILJMPm64
    0U,	// TAILJMPr
    3678934U,	// TAILJMPr64
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi64
    0U,	// TCRETURNmi
    0U,	// TCRETURNmi64
    0U,	// TCRETURNri
    0U,	// TCRETURNri64
    9652U,	// TEST16i16
    279613U,	// TEST16mi
    12854333U,	// TEST16ri
    21242941U,	// TEST16rm
    12854333U,	// TEST16rr
    9820U,	// TEST32i32
    295997U,	// TEST32mi
    12854333U,	// TEST32ri
    8660029U,	// TEST32rm
    12854333U,	// TEST32rr
    9959U,	// TEST64i32
    304189U,	// TEST64mi32
    12854333U,	// TEST64ri32
    17048637U,	// TEST64rm
    12854333U,	// TEST64rr
    9540U,	// TEST8i8
    312381U,	// TEST8mi
    12854333U,	// TEST8ri
    0U,	// TEST8ri_NOREX
    38020157U,	// TEST8rm
    12854333U,	// TEST8rr
    3138U,	// TLSCall_32
    3228U,	// TLSCall_64
    3151U,	// TLS_addr32
    3241U,	// TLS_addr64
    3164U,	// TLS_base_addr32
    3254U,	// TLS_base_addr64
    3182U,	// TRAP
    21242906U,	// TZCNT16rm
    12854298U,	// TZCNT16rr
    8659994U,	// TZCNT32rm
    12854298U,	// TZCNT32rr
    17048602U,	// TZCNT64rm
    12854298U,	// TZCNT64rr
    8659511U,	// TZMSK32rm
    12853815U,	// TZMSK32rr
    17048119U,	// TZMSK64rm
    12853815U,	// TZMSK64rr
    3392U,	// UD2B
    3057919763U,	// VAARG_64
    348399413U,	// VASTART_SAVE_XMM_REGS
    17262U,	// VERRm
    9070U,	// VERRr
    17506U,	// VERWm
    9314U,	// VERWr
    3730U,	// VMCALL
    41784U,	// VMCLEARm
    3499U,	// VMFUNC
    3651U,	// VMLAUNCH
    4129U,	// VMLOAD32
    4184U,	// VMLOAD64
    3722U,	// VMMCALL
    41184U,	// VMPTRLDm
    42051U,	// VMPTRSTm
    295090U,	// VMREAD32rm
    12853426U,	// VMREAD32rr
    303282U,	// VMREAD64rm
    12853426U,	// VMREAD64rr
    3585U,	// VMRESUME
    4151U,	// VMRUN32
    4206U,	// VMRUN64
    4140U,	// VMSAVE32
    4195U,	// VMSAVE64
    8659398U,	// VMWRITE32rm
    12853702U,	// VMWRITE32rr
    17048006U,	// VMWRITE64rm
    12853702U,	// VMWRITE64rr
    3618U,	// VMXOFF
    41619U,	// VMXON
    57933U,	// W64ALLOCA
    3569U,	// WBINVD
    3764U,	// WIN_ALLOCA
    3678U,	// WIN_FTOL_32
    3678U,	// WIN_FTOL_64
    8610U,	// WRFSBASE
    8610U,	// WRFSBASE64
    8630U,	// WRGSBASE
    8630U,	// WRGSBASE64
    3879U,	// WRMSR
    278714U,	// XADD16rm
    12853434U,	// XADD16rr
    295098U,	// XADD32rm
    12853434U,	// XADD32rr
    303290U,	// XADD64rm
    12853434U,	// XADD64rr
    311482U,	// XADD8rm
    12853434U,	// XADD8rr
    9604U,	// XCHG16ar
    172528U,	// XCHG16rm
    246256U,	// XCHG16rr
    9767U,	// XCHG32ar
    9767U,	// XCHG32ar64
    180720U,	// XCHG32rm
    246256U,	// XCHG32rr
    9891U,	// XCHG64ar
    188912U,	// XCHG64rm
    246256U,	// XCHG64rr
    197104U,	// XCHG8rm
    246256U,	// XCHG8rr
    3463U,	// XCRYPTCBC
    3407U,	// XCRYPTCFB
    3885U,	// XCRYPTCTR
    3397U,	// XCRYPTECB
    3417U,	// XCRYPTOFB
    4067U,	// XGETBV
    3447U,	// XLAT
    9631U,	// XOR16i16
    279401U,	// XOR16mi
    279401U,	// XOR16mi8
    279401U,	// XOR16mr
    549737U,	// XOR16ri
    549737U,	// XOR16ri8
    811881U,	// XOR16rm
    549737U,	// XOR16rr
    4465513U,	// XOR16rr_REV
    9797U,	// XOR32i32
    295785U,	// XOR32mi
    295785U,	// XOR32mi8
    295785U,	// XOR32mr
    549737U,	// XOR32ri
    549737U,	// XOR32ri8
    1074025U,	// XOR32rm
    549737U,	// XOR32rr
    4465513U,	// XOR32rr_REV
    9936U,	// XOR64i32
    303977U,	// XOR64mi32
    303977U,	// XOR64mi8
    303977U,	// XOR64mr
    549737U,	// XOR64ri32
    549737U,	// XOR64ri8
    1336169U,	// XOR64rm
    549737U,	// XOR64rr
    4465513U,	// XOR64rr_REV
    9519U,	// XOR8i8
    312169U,	// XOR8mi
    312169U,	// XOR8mr
    549737U,	// XOR8ri
    1598313U,	// XOR8rm
    549737U,	// XOR8rr
    4465513U,	// XOR8rr_REV
    107361U,	// XRSTOR
    106506U,	// XRSTOR64
    106959U,	// XSAVE
    106497U,	// XSAVE64
    107571U,	// XSAVEOPT
    106516U,	// XSAVEOPT64
    4074U,	// XSETBV
    3090U,	// XSHA1
    3285U,	// XSHA256
    3605U,	// XSTORE
    0U
  };

#ifndef CAPSTONE_DIET
  static char AsmStrs[] = {
  /* 0 */ 'x', 's', 'a', 'v', 'e', '6', '4', 9, 0,
  /* 9 */ 'x', 'r', 's', 't', 'o', 'r', '6', '4', 9, 0,
  /* 19 */ 'x', 's', 'a', 'v', 'e', 'o', 'p', 't', '6', '4', 9, 0,
  /* 31 */ 'l', 'e', 'a', 9, 0,
  /* 36 */ 'j', 'a', 9, 0,
  /* 40 */ 's', 'e', 't', 'a', 9, 0,
  /* 46 */ 'c', 'm', 'o', 'v', 'a', 9, 0,
  /* 53 */ 'c', 'm', 'p', 'x', 'c', 'h', 'g', '1', '6', 'b', 9, 0,
  /* 65 */ 'c', 'm', 'p', 'x', 'c', 'h', 'g', '8', 'b', 9, 0,
  /* 76 */ 's', 'b', 'b', 9, 0,
  /* 81 */ 'j', 'b', 9, 0,
  /* 85 */ 'i', 'n', 's', 'b', 9, 0,
  /* 91 */ 's', 't', 'o', 's', 'b', 9, 0,
  /* 98 */ 'c', 'm', 'p', 's', 'b', 9, 0,
  /* 105 */ 'm', 'o', 'v', 's', 'b', 9, 0,
  /* 112 */ 's', 'e', 't', 'b', 9, 0,
  /* 118 */ 's', 'u', 'b', 9, 0,
  /* 123 */ 'c', 'm', 'o', 'v', 'b', 9, 0,
  /* 130 */ 'a', 'd', 'c', 9, 0,
  /* 135 */ 'd', 'e', 'c', 9, 0,
  /* 140 */ 'b', 'l', 'c', 'i', 'c', 9, 0,
  /* 147 */ 'b', 'l', 's', 'i', 'c', 9, 0,
  /* 154 */ 't', '1', 'm', 's', 'k', 'c', 9, 0,
  /* 162 */ 'i', 'n', 'c', 9, 0,
  /* 167 */ 'b', 't', 'c', 9, 0,
  /* 172 */ 'a', 'a', 'd', 9, 0,
  /* 177 */ 'v', 'm', 'r', 'e', 'a', 'd', 9, 0,
  /* 185 */ 'x', 'a', 'd', 'd', 9, 0,
  /* 191 */ 'r', 'd', 's', 'e', 'e', 'd', 9, 0,
  /* 199 */ 'i', 'n', 'v', 'p', 'c', 'i', 'd', 9, 0,
  /* 208 */ 'i', 'n', 'v', 'v', 'p', 'i', 'd', 9, 0,
  /* 217 */ 's', 'h', 'l', 'd', 9, 0,
  /* 223 */ 'v', 'm', 'p', 't', 'r', 'l', 'd', 9, 0,
  /* 232 */ 'r', 'd', 'r', 'a', 'n', 'd', 9, 0,
  /* 240 */ 'b', 'o', 'u', 'n', 'd', 9, 0,
  /* 247 */ 's', 'h', 'r', 'd', 9, 0,
  /* 253 */ 'i', 'n', 's', 'd', 9, 0,
  /* 259 */ 's', 't', 'o', 's', 'd', 9, 0,
  /* 266 */ 'c', 'm', 'p', 's', 'd', 9, 0,
  /* 273 */ 'm', 'o', 'v', 's', 'd', 9, 0,
  /* 280 */ 'm', 'o', 'v', 's', 'x', 'd', 9, 0,
  /* 288 */ 'j', 'a', 'e', 9, 0,
  /* 293 */ 's', 'e', 't', 'a', 'e', 9, 0,
  /* 300 */ 'c', 'm', 'o', 'v', 'a', 'e', 9, 0,
  /* 308 */ 'j', 'b', 'e', 9, 0,
  /* 313 */ 's', 'e', 't', 'b', 'e', 9, 0,
  /* 320 */ 'c', 'm', 'o', 'v', 'b', 'e', 9, 0,
  /* 328 */ 'j', 'g', 'e', 9, 0,
  /* 333 */ 's', 'e', 't', 'g', 'e', 9, 0,
  /* 340 */ 'c', 'm', 'o', 'v', 'g', 'e', 9, 0,
  /* 348 */ 'j', 'e', 9, 0,
  /* 352 */ 'j', 'l', 'e', 9, 0,
  /* 357 */ 's', 'e', 't', 'l', 'e', 9, 0,
  /* 364 */ 'c', 'm', 'o', 'v', 'l', 'e', 9, 0,
  /* 372 */ 'j', 'n', 'e', 9, 0,
  /* 377 */ 'l', 'o', 'o', 'p', 'n', 'e', 9, 0,
  /* 385 */ 's', 'e', 't', 'n', 'e', 9, 0,
  /* 392 */ 'c', 'm', 'o', 'v', 'n', 'e', 9, 0,
  /* 400 */ 'l', 'o', 'o', 'p', 'e', 9, 0,
  /* 407 */ 'r', 'd', 'f', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 417 */ 'w', 'r', 'f', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 427 */ 'r', 'd', 'g', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 437 */ 'w', 'r', 'g', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 447 */ 's', 'e', 't', 'e', 9, 0,
  /* 453 */ 'v', 'm', 'w', 'r', 'i', 't', 'e', 9, 0,
  /* 462 */ 'x', 's', 'a', 'v', 'e', 9, 0,
  /* 469 */ 'c', 'm', 'o', 'v', 'e', 9, 0,
  /* 476 */ 'b', 's', 'f', 9, 0,
  /* 481 */ 'r', 'e', 't', 'f', 9, 0,
  /* 487 */ 'n', 'e', 'g', 9, 0,
  /* 492 */ 'c', 'm', 'p', 'x', 'c', 'h', 'g', 9, 0,
  /* 501 */ 'j', 'g', 9, 0,
  /* 505 */ 'i', 'n', 'v', 'l', 'p', 'g', 9, 0,
  /* 513 */ 's', 'e', 't', 'g', 9, 0,
  /* 519 */ 'c', 'm', 'o', 'v', 'g', 9, 0,
  /* 526 */ 'p', 'u', 's', 'h', 9, 0,
  /* 532 */ 'b', 'l', 'c', 'i', 9, 0,
  /* 538 */ 'b', 'z', 'h', 'i', 9, 0,
  /* 544 */ 'b', 'l', 's', 'i', 9, 0,
  /* 550 */ 'b', 'l', 'c', 'm', 's', 'k', 9, 0,
  /* 558 */ 'b', 'l', 's', 'm', 's', 'k', 9, 0,
  /* 566 */ 't', 'z', 'm', 's', 'k', 9, 0,
  /* 573 */ 'r', 'c', 'l', 9, 0,
  /* 578 */ 's', 'h', 'l', 9, 0,
  /* 583 */ 'j', 'l', 9, 0,
  /* 587 */ 'l', 'c', 'a', 'l', 'l', 9, 0,
  /* 594 */ 'b', 'l', 'c', 'f', 'i', 'l', 'l', 9, 0,
  /* 603 */ 'b', 'l', 's', 'f', 'i', 'l', 'l', 9, 0,
  /* 612 */ 'r', 'o', 'l', 9, 0,
  /* 617 */ 'a', 'r', 'p', 'l', 9, 0,
  /* 623 */ 'l', 's', 'l', 9, 0,
  /* 628 */ 's', 'e', 't', 'l', 9, 0,
  /* 634 */ 'i', 'm', 'u', 'l', 9, 0,
  /* 640 */ 'c', 'm', 'o', 'v', 'l', 9, 0,
  /* 647 */ 'a', 'a', 'm', 9, 0,
  /* 652 */ 'a', 'n', 'd', 'n', 9, 0,
  /* 658 */ 'v', 'm', 'x', 'o', 'n', 9, 0,
  /* 665 */ 'j', 'o', 9, 0,
  /* 669 */ 'j', 'n', 'o', 9, 0,
  /* 674 */ 's', 'e', 't', 'n', 'o', 9, 0,
  /* 681 */ 'c', 'm', 'o', 'v', 'n', 'o', 9, 0,
  /* 689 */ 's', 'e', 't', 'o', 9, 0,
  /* 695 */ 'c', 'm', 'o', 'v', 'o', 9, 0,
  /* 702 */ 'b', 's', 'w', 'a', 'p', 9, 0,
  /* 709 */ 'p', 'd', 'e', 'p', 9, 0,
  /* 715 */ 'j', 'p', 9, 0,
  /* 719 */ 'c', 'm', 'p', 9, 0,
  /* 724 */ 'l', 'j', 'm', 'p', 9, 0,
  /* 730 */ 'j', 'n', 'p', 9, 0,
  /* 735 */ 's', 'e', 't', 'n', 'p', 9, 0,
  /* 742 */ 'c', 'm', 'o', 'v', 'n', 'p', 9, 0,
  /* 750 */ 'n', 'o', 'p', 9, 0,
  /* 755 */ 'l', 'o', 'o', 'p', 9, 0,
  /* 761 */ 'p', 'o', 'p', 9, 0,
  /* 766 */ 's', 'e', 't', 'p', 9, 0,
  /* 772 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 788 */ 'c', 'm', 'o', 'v', 'p', 9, 0,
  /* 795 */ 'r', 'e', 't', 'f', 'q', 9, 0,
  /* 802 */ 's', 't', 'o', 's', 'q', 9, 0,
  /* 809 */ 'c', 'm', 'p', 's', 'q', 9, 0,
  /* 816 */ 'm', 'o', 'v', 's', 'q', 9, 0,
  /* 823 */ 'v', 'm', 'c', 'l', 'e', 'a', 'r', 9, 0,
  /* 832 */ 'l', 'a', 'r', 9, 0,
  /* 837 */ 's', 'a', 'r', 9, 0,
  /* 842 */ 'r', 'c', 'r', 9, 0,
  /* 847 */ 'e', 'n', 't', 'e', 'r', 9, 0,
  /* 854 */ 's', 'h', 'r', 9, 0,
  /* 859 */ 'r', 'o', 'r', 9, 0,
  /* 864 */ 'x', 'r', 's', 't', 'o', 'r', 9, 0,
  /* 872 */ 'x', 'o', 'r', 9, 0,
  /* 877 */ 'v', 'e', 'r', 'r', 9, 0,
  /* 883 */ 'b', 's', 'r', 9, 0,
  /* 888 */ 'b', 'l', 's', 'r', 9, 0,
  /* 894 */ 'b', 't', 'r', 9, 0,
  /* 899 */ 'l', 't', 'r', 9, 0,
  /* 904 */ 's', 't', 'r', 9, 0,
  /* 909 */ 'b', 'e', 'x', 't', 'r', 9, 0,
  /* 916 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 0,
  /* 924 */ 'b', 'l', 'c', 's', 9, 0,
  /* 930 */ 'l', 'd', 's', 9, 0,
  /* 935 */ 'l', 'e', 's', 9, 0,
  /* 940 */ 'l', 'f', 's', 9, 0,
  /* 945 */ 'l', 'g', 's', 9, 0,
  /* 950 */ 'j', 's', 9, 0,
  /* 954 */ 'j', 'n', 's', 9, 0,
  /* 959 */ 's', 'e', 't', 'n', 's', 9, 0,
  /* 966 */ 'c', 'm', 'o', 'v', 'n', 's', 9, 0,
  /* 974 */ 'l', 's', 's', 9, 0,
  /* 979 */ 'b', 't', 's', 9, 0,
  /* 984 */ 's', 'e', 't', 's', 9, 0,
  /* 990 */ 'c', 'm', 'o', 'v', 's', 9, 0,
  /* 997 */ 'b', 't', 9, 0,
  /* 1001 */ 'l', 'g', 'd', 't', 9, 0,
  /* 1007 */ 's', 'g', 'd', 't', 9, 0,
  /* 1013 */ 'l', 'i', 'd', 't', 9, 0,
  /* 1019 */ 's', 'i', 'd', 't', 9, 0,
  /* 1025 */ 'l', 'l', 'd', 't', 9, 0,
  /* 1031 */ 's', 'l', 'd', 't', 9, 0,
  /* 1037 */ 'r', 'e', 't', 9, 0,
  /* 1042 */ 'l', 'z', 'c', 'n', 't', 9, 0,
  /* 1049 */ 't', 'z', 'c', 'n', 't', 9, 0,
  /* 1056 */ 'i', 'n', 't', 9, 0,
  /* 1061 */ 'n', 'o', 't', 9, 0,
  /* 1066 */ 'i', 'n', 'v', 'e', 'p', 't', 9, 0,
  /* 1074 */ 'x', 's', 'a', 'v', 'e', 'o', 'p', 't', 9, 0,
  /* 1084 */ 't', 'e', 's', 't', 9, 0,
  /* 1090 */ 'v', 'm', 'p', 't', 'r', 's', 't', 9, 0,
  /* 1099 */ 'o', 'u', 't', 9, 0,
  /* 1104 */ 'p', 'e', 'x', 't', 9, 0,
  /* 1110 */ 'i', 'd', 'i', 'v', 9, 0,
  /* 1116 */ 'm', 'o', 'v', 9, 0,
  /* 1121 */ 'v', 'e', 'r', 'w', 9, 0,
  /* 1127 */ 'l', 'm', 's', 'w', 9, 0,
  /* 1133 */ 's', 'm', 's', 'w', 9, 0,
  /* 1139 */ 'i', 'n', 's', 'w', 9, 0,
  /* 1145 */ 's', 't', 'o', 's', 'w', 9, 0,
  /* 1152 */ 'c', 'm', 'p', 's', 'w', 9, 0,
  /* 1159 */ 'm', 'o', 'v', 's', 'w', 9, 0,
  /* 1166 */ 'a', 'd', 'c', 'x', 9, 0,
  /* 1172 */ 's', 'h', 'l', 'x', 9, 0,
  /* 1178 */ 'm', 'u', 'l', 'x', 9, 0,
  /* 1184 */ 'a', 'd', 'o', 'x', 9, 0,
  /* 1190 */ 's', 'a', 'r', 'x', 9, 0,
  /* 1196 */ 's', 'h', 'r', 'x', 9, 0,
  /* 1202 */ 'r', 'o', 'r', 'x', 9, 0,
  /* 1208 */ 'm', 'o', 'v', 's', 'x', 9, 0,
  /* 1215 */ 'm', 'o', 'v', 'z', 'x', 9, 0,
  /* 1222 */ 'j', 'e', 'c', 'x', 'z', 9, 0,
  /* 1229 */ 'j', 'c', 'x', 'z', 9, 0,
  /* 1235 */ 'j', 'r', 'c', 'x', 'z', 9, 0,
  /* 1242 */ 's', 'b', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1251 */ 's', 'c', 'a', 's', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1262 */ 'l', 'o', 'd', 's', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1273 */ 's', 'u', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1282 */ 'a', 'd', 'c', 9, 'a', 'l', ',', 32, 0,
  /* 1291 */ 'a', 'd', 'd', 9, 'a', 'l', ',', 32, 0,
  /* 1300 */ 'a', 'n', 'd', 9, 'a', 'l', ',', 32, 0,
  /* 1309 */ 'i', 'n', 9, 'a', 'l', ',', 32, 0,
  /* 1317 */ 'c', 'm', 'p', 9, 'a', 'l', ',', 32, 0,
  /* 1326 */ 'x', 'o', 'r', 9, 'a', 'l', ',', 32, 0,
  /* 1335 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'a', 'l', ',', 32, 0,
  /* 1347 */ 't', 'e', 's', 't', 9, 'a', 'l', ',', 32, 0,
  /* 1357 */ 'm', 'o', 'v', 9, 'a', 'l', ',', 32, 0,
  /* 1366 */ 's', 'b', 'b', 9, 'a', 'x', ',', 32, 0,
  /* 1375 */ 's', 'u', 'b', 9, 'a', 'x', ',', 32, 0,
  /* 1384 */ 'a', 'd', 'c', 9, 'a', 'x', ',', 32, 0,
  /* 1393 */ 'a', 'd', 'd', 9, 'a', 'x', ',', 32, 0,
  /* 1402 */ 'a', 'n', 'd', 9, 'a', 'x', ',', 32, 0,
  /* 1411 */ 'x', 'c', 'h', 'g', 9, 'a', 'x', ',', 32, 0,
  /* 1421 */ 'i', 'n', 9, 'a', 'x', ',', 32, 0,
  /* 1429 */ 'c', 'm', 'p', 9, 'a', 'x', ',', 32, 0,
  /* 1438 */ 'x', 'o', 'r', 9, 'a', 'x', ',', 32, 0,
  /* 1447 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'a', 'x', ',', 32, 0,
  /* 1459 */ 't', 'e', 's', 't', 9, 'a', 'x', ',', 32, 0,
  /* 1469 */ 'm', 'o', 'v', 9, 'a', 'x', ',', 32, 0,
  /* 1478 */ 's', 'c', 'a', 's', 'w', 9, 'a', 'x', ',', 32, 0,
  /* 1489 */ 'l', 'o', 'd', 's', 'w', 9, 'a', 'x', ',', 32, 0,
  /* 1500 */ 's', 'b', 'b', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1510 */ 's', 'u', 'b', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1520 */ 'a', 'd', 'c', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1530 */ 'a', 'd', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1540 */ 'a', 'n', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1550 */ 's', 'c', 'a', 's', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1562 */ 'l', 'o', 'd', 's', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1574 */ 'x', 'c', 'h', 'g', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1585 */ 'i', 'n', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1594 */ 'c', 'm', 'p', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1604 */ 'x', 'o', 'r', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1614 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1627 */ 't', 'e', 's', 't', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1638 */ 'm', 'o', 'v', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1648 */ 's', 'b', 'b', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1658 */ 's', 'u', 'b', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1668 */ 'a', 'd', 'c', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1678 */ 'a', 'd', 'd', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1688 */ 'a', 'n', 'd', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1698 */ 'x', 'c', 'h', 'g', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1709 */ 'c', 'm', 'p', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1719 */ 's', 'c', 'a', 's', 'q', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1731 */ 'l', 'o', 'd', 's', 'q', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1743 */ 'x', 'o', 'r', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1753 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1766 */ 't', 'e', 's', 't', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1777 */ 'o', 'u', 't', 's', 'b', 9, 'd', 'x', ',', 32, 0,
  /* 1788 */ 'o', 'u', 't', 's', 'd', 9, 'd', 'x', ',', 32, 0,
  /* 1799 */ 'o', 'u', 't', 's', 'w', 9, 'd', 'x', ',', 32, 0,
  /* 1810 */ '#', 'V', 'A', 'A', 'R', 'G', '_', '6', '4', 32, 0,
  /* 1821 */ 'r', 'e', 't', 9, '#', 'e', 'h', '_', 'r', 'e', 't', 'u', 'r', 'n', ',', 32, 'a', 'd', 'd', 'r', ':', 32, 0,
  /* 1844 */ '#', 'V', 'A', 'S', 'T', 'A', 'R', 'T', '_', 'S', 'A', 'V', 'E', '_', 'X', 'M', 'M', '_', 'R', 'E', 'G', 'S', 32, 0,
  /* 1868 */ '#', 'C', 'M', 'O', 'V', '_', 'G', 'R', '3', '2', '*', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1888 */ '#', 'C', 'M', 'O', 'V', '_', 'G', 'R', '1', '6', '*', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1908 */ '#', 'C', 'M', 'O', 'V', '_', 'R', 'F', 'P', '8', '0', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1928 */ '#', 'A', 'T', 'O', 'M', 'S', 'U', 'B', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1949 */ '#', 'A', 'T', 'O', 'M', 'A', 'D', 'D', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1970 */ '#', 'A', 'T', 'O', 'M', 'A', 'N', 'D', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1991 */ '#', 'A', 'T', 'O', 'M', 'N', 'A', 'N', 'D', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2013 */ '#', 'A', 'T', 'O', 'M', 'M', 'I', 'N', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2034 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'I', 'N', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2056 */ '#', 'A', 'T', 'O', 'M', 'S', 'W', 'A', 'P', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2078 */ '#', 'A', 'T', 'O', 'M', 'O', 'R', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2098 */ '#', 'A', 'T', 'O', 'M', 'X', 'O', 'R', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2119 */ '#', 'A', 'T', 'O', 'M', 'M', 'A', 'X', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2140 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'A', 'X', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2162 */ '#', 'A', 'T', 'O', 'M', 'A', 'N', 'D', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2181 */ '#', 'A', 'T', 'O', 'M', 'N', 'A', 'N', 'D', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2201 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '4', 'F', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2221 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '1', '6', 'F', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2242 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '8', 'F', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2262 */ '#', 'A', 'T', 'O', 'M', 'M', 'I', 'N', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2281 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'I', 'N', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2301 */ '#', 'C', 'M', 'O', 'V', '_', 'R', 'F', 'P', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2321 */ '#', 'C', 'M', 'O', 'V', '_', 'F', 'R', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2340 */ '#', 'A', 'T', 'O', 'M', 'O', 'R', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2358 */ '#', 'A', 'T', 'O', 'M', 'X', 'O', 'R', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2377 */ '#', 'A', 'T', 'O', 'M', 'M', 'A', 'X', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2396 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'A', 'X', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2416 */ '#', 'A', 'T', 'O', 'M', 'A', 'N', 'D', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2435 */ '#', 'A', 'T', 'O', 'M', 'N', 'A', 'N', 'D', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2455 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '2', 'F', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2475 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '4', 'F', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2495 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '8', 'F', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2515 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '2', 'I', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2535 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '4', 'I', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2555 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '8', 'I', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2575 */ '#', 'A', 'T', 'O', 'M', 'M', 'I', 'N', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2594 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'I', 'N', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2614 */ '#', 'C', 'M', 'O', 'V', '_', 'R', 'F', 'P', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2634 */ '#', 'C', 'M', 'O', 'V', '_', 'F', 'R', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2653 */ '#', 'A', 'T', 'O', 'M', 'O', 'R', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2671 */ '#', 'A', 'T', 'O', 'M', 'X', 'O', 'R', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2690 */ '#', 'A', 'T', 'O', 'M', 'M', 'A', 'X', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2709 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'A', 'X', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2729 */ '#', 'A', 'T', 'O', 'M', 'A', 'N', 'D', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2748 */ '#', 'A', 'T', 'O', 'M', 'N', 'A', 'N', 'D', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2768 */ '#', 'A', 'T', 'O', 'M', 'M', 'I', 'N', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2787 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'I', 'N', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2807 */ '#', 'A', 'T', 'O', 'M', 'O', 'R', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2825 */ '#', 'A', 'T', 'O', 'M', 'X', 'O', 'R', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2844 */ '#', 'A', 'T', 'O', 'M', 'M', 'A', 'X', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2863 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'A', 'X', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2883 */ '#', 'A', 'T', 'O', 'M', 'A', 'N', 'D', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2901 */ '#', 'A', 'T', 'O', 'M', 'N', 'A', 'N', 'D', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2920 */ '#', 'A', 'T', 'O', 'M', 'M', 'I', 'N', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2938 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'I', 'N', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2957 */ '#', 'C', 'M', 'O', 'V', '_', 'G', 'R', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2975 */ '#', 'A', 'T', 'O', 'M', 'O', 'R', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2992 */ '#', 'A', 'T', 'O', 'M', 'X', 'O', 'R', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 3010 */ '#', 'A', 'T', 'O', 'M', 'M', 'A', 'X', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 3028 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'A', 'X', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 3047 */ '#', 'A', 'C', 'Q', 'U', 'I', 'R', 'E', '_', 'M', 'O', 'V', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 3068 */ '#', 'R', 'E', 'L', 'E', 'A', 'S', 'E', '_', 'M', 'O', 'V', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 3089 */ 'x', 's', 'h', 'a', '1', 0,
  /* 3095 */ 'i', 'n', 't', '1', 0,
  /* 3100 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 3119 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 3137 */ '#', 32, 'T', 'L', 'S', 'C', 'a', 'l', 'l', '_', '3', '2', 0,
  /* 3150 */ '#', 32, 'T', 'L', 'S', '_', 'a', 'd', 'd', 'r', '3', '2', 0,
  /* 3163 */ '#', 32, 'T', 'L', 'S', '_', 'b', 'a', 's', 'e', '_', 'a', 'd', 'd', 'r', '3', '2', 0,
  /* 3181 */ 'u', 'd', '2', 0,
  /* 3185 */ 'i', 'n', 't', '3', 0,
  /* 3190 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 3209 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 3227 */ '#', 32, 'T', 'L', 'S', 'C', 'a', 'l', 'l', '_', '6', '4', 0,
  /* 3240 */ '#', 32, 'T', 'L', 'S', '_', 'a', 'd', 'd', 'r', '6', '4', 0,
  /* 3253 */ '#', 32, 'T', 'L', 'S', '_', 'b', 'a', 's', 'e', '_', 'a', 'd', 'd', 'r', '6', '4', 0,
  /* 3271 */ 'r', 'e', 'x', '6', '4', 0,
  /* 3277 */ 'd', 'a', 't', 'a', '1', '6', 0,
  /* 3284 */ 'x', 's', 'h', 'a', '2', '5', '6', 0,
  /* 3292 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3305 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3312 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3322 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 3340 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 3356 */ '#', 'M', 'E', 'M', 'B', 'A', 'R', 'R', 'I', 'E', 'R', 0,
  /* 3368 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3383 */ 'a', 'a', 'a', 0,
  /* 3387 */ 'd', 'a', 'a', 0,
  /* 3391 */ 'u', 'd', '2', 'b', 0,
  /* 3396 */ 'x', 'c', 'r', 'y', 'p', 't', 'e', 'c', 'b', 0,
  /* 3406 */ 'x', 'c', 'r', 'y', 'p', 't', 'c', 'f', 'b', 0,
  /* 3416 */ 'x', 'c', 'r', 'y', 'p', 't', 'o', 'f', 'b', 0,
  /* 3426 */ 'r', 'e', 'p', 32, 's', 't', 'o', 's', 'b', 0,
  /* 3436 */ 'r', 'e', 'p', 32, 'm', 'o', 'v', 's', 'b', 0,
  /* 3446 */ 'x', 'l', 'a', 't', 'b', 0,
  /* 3452 */ 'c', 'l', 'a', 'c', 0,
  /* 3457 */ 's', 't', 'a', 'c', 0,
  /* 3462 */ 'x', 'c', 'r', 'y', 'p', 't', 'c', 'b', 'c', 0,
  /* 3472 */ 'g', 'e', 't', 's', 'e', 'c', 0,
  /* 3479 */ 's', 'a', 'l', 'c', 0,
  /* 3484 */ 'c', 'l', 'c', 0,
  /* 3488 */ 'c', 'm', 'c', 0,
  /* 3492 */ 'r', 'd', 'p', 'm', 'c', 0,
  /* 3498 */ 'v', 'm', 'f', 'u', 'n', 'c', 0,
  /* 3505 */ 'r', 'd', 't', 's', 'c', 0,
  /* 3511 */ 's', 't', 'c', 0,
  /* 3515 */ 'p', 'u', 's', 'h', 'f', 'd', 0,
  /* 3522 */ 'p', 'o', 'p', 'f', 'd', 0,
  /* 3528 */ 'c', 'p', 'u', 'i', 'd', 0,
  /* 3534 */ 'c', 'l', 'd', 0,
  /* 3538 */ 'r', 'e', 'p', 32, 's', 't', 'o', 's', 'd', 0,
  /* 3548 */ 'r', 'e', 'p', 32, 'm', 'o', 'v', 's', 'd', 0,
  /* 3558 */ 'i', 'r', 'e', 't', 'd', 0,
  /* 3564 */ 's', 't', 'd', 0,
  /* 3568 */ 'w', 'b', 'i', 'n', 'v', 'd', 0,
  /* 3575 */ 'c', 'w', 'd', 0,
  /* 3579 */ 'c', 'w', 'd', 'e', 0,
  /* 3584 */ 'v', 'm', 'r', 'e', 's', 'u', 'm', 'e', 0,
  /* 3593 */ 'r', 'e', 'p', 'n', 'e', 0,
  /* 3599 */ 'c', 'd', 'q', 'e', 0,
  /* 3604 */ 'x', 's', 't', 'o', 'r', 'e', 0,
  /* 3611 */ 'l', 'e', 'a', 'v', 'e', 0,
  /* 3617 */ 'v', 'm', 'x', 'o', 'f', 'f', 0,
  /* 3624 */ 'l', 'a', 'h', 'f', 0,
  /* 3629 */ 's', 'a', 'h', 'f', 0,
  /* 3634 */ 'p', 'u', 's', 'h', 'f', 0,
  /* 3640 */ 'p', 'o', 'p', 'f', 0,
  /* 3645 */ 'r', 'e', 't', 'f', 0,
  /* 3650 */ 'v', 'm', 'l', 'a', 'u', 'n', 'c', 'h', 0,
  /* 3659 */ 'c', 'l', 'g', 'i', 0,
  /* 3664 */ 's', 't', 'g', 'i', 0,
  /* 3669 */ 'c', 'l', 'i', 0,
  /* 3673 */ 's', 't', 'i', 0,
  /* 3677 */ '#', 32, 'w', 'i', 'n', '3', '2', 32, 'f', 'p', 't', 'o', 'u', 'i', 0,
  /* 3692 */ 'l', 'o', 'c', 'k', 0,
  /* 3697 */ 'o', 'u', 't', 9, 'd', 'x', ',', 32, 'a', 'l', 0,
  /* 3708 */ 'p', 'u', 's', 'h', 'a', 'l', 0,
  /* 3715 */ 'p', 'o', 'p', 'a', 'l', 0,
  /* 3721 */ 'v', 'm', 'm', 'c', 'a', 'l', 'l', 0,
  /* 3729 */ 'v', 'm', 'c', 'a', 'l', 'l', 0,
  /* 3736 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 0,
  /* 3744 */ 'm', 'o', 'n', 't', 'm', 'u', 'l', 0,
  /* 3752 */ 'f', 's', 'e', 't', 'p', 'm', 0,
  /* 3759 */ 'r', 's', 'm', 0,
  /* 3763 */ '#', 32, 'd', 'y', 'n', 'a', 'm', 'i', 'c', 32, 's', 't', 'a', 'c', 'k', 32, 'a', 'l', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
  /* 3790 */ 'c', 'q', 'o', 0,
  /* 3794 */ 'i', 'n', 't', 'o', 0,
  /* 3799 */ 'r', 'd', 't', 's', 'c', 'p', 0,
  /* 3806 */ 'r', 'e', 'p', 0,
  /* 3810 */ 'n', 'o', 'p', 0,
  /* 3814 */ 'c', 'd', 'q', 0,
  /* 3818 */ 'p', 'u', 's', 'h', 'f', 'q', 0,
  /* 3825 */ 'p', 'o', 'p', 'f', 'q', 0,
  /* 3831 */ 'r', 'e', 't', 'f', 'q', 0,
  /* 3837 */ 'r', 'e', 'p', 32, 's', 't', 'o', 's', 'q', 0,
  /* 3847 */ 'r', 'e', 'p', 32, 'm', 'o', 'v', 's', 'q', 0,
  /* 3857 */ 'i', 'r', 'e', 't', 'q', 0,
  /* 3863 */ 's', 'y', 's', 'e', 'n', 't', 'e', 'r', 0,
  /* 3872 */ 'r', 'd', 'm', 's', 'r', 0,
  /* 3878 */ 'w', 'r', 'm', 's', 'r', 0,
  /* 3884 */ 'x', 'c', 'r', 'y', 'p', 't', 'c', 't', 'r', 0,
  /* 3894 */ 'a', 'a', 's', 0,
  /* 3898 */ 'd', 'a', 's', 0,
  /* 3902 */ 'p', 'u', 's', 'h', 9, 'c', 's', 0,
  /* 3910 */ 'p', 'u', 's', 'h', 9, 'd', 's', 0,
  /* 3918 */ 'p', 'o', 'p', 9, 'd', 's', 0,
  /* 3925 */ 'p', 'u', 's', 'h', 9, 'e', 's', 0,
  /* 3933 */ 'p', 'o', 'p', 9, 'e', 's', 0,
  /* 3940 */ 'p', 'u', 's', 'h', 9, 'f', 's', 0,
  /* 3948 */ 'p', 'o', 'p', 9, 'f', 's', 0,
  /* 3955 */ 'p', 'u', 's', 'h', 9, 'g', 's', 0,
  /* 3963 */ 'p', 'o', 'p', 9, 'g', 's', 0,
  /* 3970 */ 's', 'w', 'a', 'p', 'g', 's', 0,
  /* 3977 */ '#', 32, 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', 32, 's', 'i', 'z', 'e', 'd', 32, 'a', 'l', 'l', 'o', 'c', 'a', 32, 'f', 'o', 'r', 32, 's', 'e', 'g', 'm', 'e', 'n', 't', 'e', 'd', 32, 's', 't', 'a', 'c', 'k', 's', 0,
  /* 4022 */ 'p', 'u', 's', 'h', 9, 's', 's', 0,
  /* 4030 */ 'p', 'o', 'p', 9, 's', 's', 0,
  /* 4037 */ 'c', 'l', 't', 's', 0,
  /* 4042 */ 'i', 'r', 'e', 't', 0,
  /* 4047 */ 's', 'y', 's', 'r', 'e', 't', 0,
  /* 4054 */ 's', 'y', 's', 'e', 'x', 'i', 't', 0,
  /* 4062 */ 'h', 'l', 't', 0,
  /* 4066 */ 'x', 'g', 'e', 't', 'b', 'v', 0,
  /* 4073 */ 'x', 's', 'e', 't', 'b', 'v', 0,
  /* 4080 */ 'p', 'u', 's', 'h', 'a', 'w', 0,
  /* 4087 */ 'p', 'o', 'p', 'a', 'w', 0,
  /* 4093 */ 'c', 'b', 'w', 0,
  /* 4097 */ 'r', 'e', 'p', 32, 's', 't', 'o', 's', 'w', 0,
  /* 4107 */ 'r', 'e', 'p', 32, 'm', 'o', 'v', 's', 'w', 0,
  /* 4117 */ 'o', 'u', 't', 9, 'd', 'x', ',', 32, 'a', 'x', 0,
  /* 4128 */ 'v', 'm', 'l', 'o', 'a', 'd', 9, 'e', 'a', 'x', 0,
  /* 4139 */ 'v', 'm', 's', 'a', 'v', 'e', 9, 'e', 'a', 'x', 0,
  /* 4150 */ 'v', 'm', 'r', 'u', 'n', 9, 'e', 'a', 'x', 0,
  /* 4160 */ 's', 'k', 'i', 'n', 'i', 't', 9, 'e', 'a', 'x', 0,
  /* 4171 */ 'o', 'u', 't', 9, 'd', 'x', ',', 32, 'e', 'a', 'x', 0,
  /* 4183 */ 'v', 'm', 'l', 'o', 'a', 'd', 9, 'r', 'a', 'x', 0,
  /* 4194 */ 'v', 'm', 's', 'a', 'v', 'e', 9, 'r', 'a', 'x', 0,
  /* 4205 */ 'v', 'm', 'r', 'u', 'n', 9, 'r', 'a', 'x', 0,
  /* 4215 */ 'i', 'n', 'v', 'l', 'p', 'g', 'a', 9, 'e', 'a', 'x', ',', 32, 'e', 'c', 'x', 0,
  /* 4232 */ 'i', 'n', 'v', 'l', 'p', 'g', 'a', 9, 'r', 'a', 'x', ',', 32, 'e', 'c', 'x', 0,
  /* 4249 */ 'i', 'n', 9, 'a', 'l', ',', 32, 'd', 'x', 0,
  /* 4259 */ 'i', 'n', 9, 'a', 'x', ',', 32, 'd', 'x', 0,
  /* 4269 */ 'i', 'n', 9, 'e', 'a', 'x', ',', 32, 'd', 'x', 0,
  };
#endif

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MCInst_getOpcode(MI)];
  // assert(Bits != 0 && "Cannot print this instruction.");
#ifndef CAPSTONE_DIET
  SStream_concat(O, "%s", AsmStrs+(Bits & 8191)-1);
#endif


  // Fragment 0 encoded into 5 bits for 31 unique commands.
  //printf("Frag-0: %"PRIu64"\n", (Bits >> 13) & 31);
  switch ((Bits >> 13) & 31) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, AAA, AAS, ACQUIRE_MOV...
    return;
    break;
  case 1:
    // AAD8i8, AAM8i8, ADC16i16, ADC16rr_REV, ADC32i32, ADC32rr_REV, ADC64i32...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADC16mi, ADC16mi8, ADC16mr, ADD16mi, ADD16mi8, ADD16mr, AND16mi, AND16...
    printi16mem(MI, 0, O); 
    break;
  case 3:
    // ADC16ri, ADC16ri8, ADC16rm, ADC16rr, ADC32ri, ADC32ri8, ADC32rm, ADC32...
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 4:
    // ADC32mi, ADC32mi8, ADC32mr, ADD32mi, ADD32mi8, ADD32mr, AND32mi, AND32...
    printi32mem(MI, 0, O); 
    break;
  case 5:
    // ADC64mi32, ADC64mi8, ADC64mr, ADD64mi32, ADD64mi8, ADD64mr, AND64mi32,...
    printi64mem(MI, 0, O); 
    break;
  case 6:
    // ADC8mi, ADC8mr, ADD8mi, ADD8mr, AND8mi, AND8mr, CMP8mi, CMP8mr, CMPXCH...
    printi8mem(MI, 0, O); 
    break;
  case 7:
    // CALL64pcrel32, CALLpcrel16, CALLpcrel32, EH_SjLj_Setup, JAE_1, JAE_2, ...
    printPCRelImm(MI, 0, O); 
    break;
  case 8:
    // CMPS16
    printSrcIdx16(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printDstIdx16(MI, 0, O); 
    return;
    break;
  case 9:
    // CMPS32
    printSrcIdx32(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printDstIdx32(MI, 0, O); 
    return;
    break;
  case 10:
    // CMPS64
    printSrcIdx64(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printDstIdx64(MI, 0, O); 
    return;
    break;
  case 11:
    // CMPS8
    printSrcIdx8(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printDstIdx8(MI, 0, O); 
    return;
    break;
  case 12:
    // CMPXCHG16B, LCMPXCHG16B
    printi128mem(MI, 0, O); 
    return;
    break;
  case 13:
    // FARCALL16m, FARCALL32m, FARCALL64, FARJMP16m, FARJMP32m, FARJMP64, LGD...
    printopaquemem(MI, 0, O); 
    return;
    break;
  case 14:
    // IN16, MOVSW, SCAS16, STOSW
    printDstIdx16(MI, 0, O); 
    break;
  case 15:
    // IN32, MOVSL, SCAS32, STOSL
    printDstIdx32(MI, 0, O); 
    break;
  case 16:
    // IN8, MOVSB, SCAS8, STOSB
    printDstIdx8(MI, 0, O); 
    break;
  case 17:
    // LODSB, OUTSB
    printSrcIdx8(MI, 0, O); 
    return;
    break;
  case 18:
    // LODSL, OUTSL
    printSrcIdx32(MI, 0, O); 
    return;
    break;
  case 19:
    // LODSQ
    printSrcIdx64(MI, 0, O); 
    return;
    break;
  case 20:
    // LODSW, OUTSW
    printSrcIdx16(MI, 0, O); 
    return;
    break;
  case 21:
    // LXADD16, XCHG16rm
    printi16mem(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 22:
    // LXADD32, XCHG32rm
    printi32mem(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 23:
    // LXADD64, XCHG64rm
    printi64mem(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 24:
    // LXADD8, XCHG8rm
    printi8mem(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 25:
    // MOV16ao16, MOV16ao16_16, MOV16o16a, MOV16o16a_16, MOV64ao16, MOV64o16a
    printMemOffs16(MI, 0, O); 
    break;
  case 26:
    // MOV32ao32, MOV32ao32_16, MOV32o32a, MOV32o32a_16, MOV64ao32, MOV64o32a
    printMemOffs32(MI, 0, O); 
    break;
  case 27:
    // MOV64ao64, MOV64o64a
    printMemOffs64(MI, 0, O); 
    break;
  case 28:
    // MOV64ao8, MOV64o8a, MOV8ao8, MOV8ao8_16, MOV8o8a, MOV8o8a_16
    printMemOffs8(MI, 0, O); 
    break;
  case 29:
    // MOVSQ, SCAS64, STOSQ
    printDstIdx64(MI, 0, O); 
    break;
  case 30:
    // XCHG16rr, XCHG32rr, XCHG64rr, XCHG8rr
    printOperand(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 15 unique commands.
  //printf("Frag-1: %"PRIu64"\n", (Bits >> 18) & 15);
  switch ((Bits >> 18) & 15) {
  default:   // unreachable.
  case 0:
    // AAD8i8, AAM8i8, ADC16i16, ADC32i32, ADC64i32, ADC8i8, ADD16i16, ADD32i...
    return;
    break;
  case 1:
    // ADC16mi, ADC16mi8, ADC16mr, ADC16rr_REV, ADC32mi, ADC32mi8, ADC32mr, A...
    SStream_concat(O, "%s", ", "); 
    break;
  case 2:
    // ADC16ri, ADC16ri8, ADC16rr, ADC32ri, ADC32ri8, ADC32rr, ADC64ri32, ADC...
    printOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // ADC16rm, ADD16rm, AND16rm, OR16rm, SBB16rm, SUB16rm, XOR16rm
    printi16mem(MI, 2, O); 
    return;
    break;
  case 4:
    // ADC32rm, ADD32rm, AND32rm, OR32rm, SBB32rm, SUB32rm, XOR32rm
    printi32mem(MI, 2, O); 
    return;
    break;
  case 5:
    // ADC64rm, ADD64rm, AND64rm, OR64rm, SBB64rm, SUB64rm, XOR64rm
    printi64mem(MI, 2, O); 
    return;
    break;
  case 6:
    // ADC8rm, ADD8rm, AND8rm, OR8rm, SBB8rm, SUB8rm, XOR8rm
    printi8mem(MI, 2, O); 
    return;
    break;
  case 7:
    // IN16, IN32, IN8
    SStream_concat(O, "%s", ", dx"); 
    return;
    break;
  case 8:
    // MOV16ao16, MOV16ao16_16, MOV64ao16, OUT16ir, STOSW
    SStream_concat(O, "%s", ", ax"); 
    return;
    break;
  case 9:
    // MOV32ao32, MOV32ao32_16, MOV64ao32, OUT32ir, STOSL
    SStream_concat(O, "%s", ", eax"); 
    return;
    break;
  case 10:
    // MOV64ao64, STOSQ
    SStream_concat(O, "%s", ", rax"); 
    return;
    break;
  case 11:
    // MOV64ao8, MOV8ao8, MOV8ao8_16, OUT8ir, STOSB
    SStream_concat(O, "%s", ", al"); 
    return;
    break;
  case 12:
    // RCL16mCL, RCL16rCL, RCL32mCL, RCL32rCL, RCL64mCL, RCL64rCL, RCL8mCL, R...
    SStream_concat(O, "%s", ", cl"); 
    return;
    break;
  case 13:
    // ROL16m1, ROL16r1, ROL32m1, ROL32r1, ROL64m1, ROL64r1, ROL8m1, ROL8r1, ...
    SStream_concat(O, "%s", ", 1"); 
    return;
    break;
  case 14:
    // TAILJMPd, TAILJMPd64, TAILJMPm, TAILJMPm64, TAILJMPr64
    SStream_concat(O, "%s", "  # TAILCALL"); 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 16 unique commands.
  //printf("Frag-2: %"PRIu64"\n", (Bits >> 22) & 15);
  switch ((Bits >> 22) & 15) {
  default:   // unreachable.
  case 0:
    // ADC16mi, ADC16mi8, ADC16mr, ADC32mi, ADC32mi8, ADC32mr, ADC64mi32, ADC...
    printOperand(MI, 5, O); 
    break;
  case 1:
    // ADC16rr_REV, ADC32rr_REV, ADC64rr_REV, ADC8rr_REV, ADD16rr_REV, ADD32r...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADCX32rm, ADOX32rm, BEXTR32rm, BEXTRI32mi, BLCFILL32rm, BLCI32rm, BLCI...
    printi32mem(MI, 1, O); 
    break;
  case 3:
    // ADCX32rr, ADCX64rr, ADOX32rr, ADOX64rr, ANDN32rm, ANDN32rr, ANDN64rm, ...
    printOperand(MI, 1, O); 
    break;
  case 4:
    // ADCX64rm, ADOX64rm, BEXTR64rm, BEXTRI64mi, BLCFILL64rm, BLCI64rm, BLCI...
    printi64mem(MI, 1, O); 
    break;
  case 5:
    // BOUNDS16rm, BSF16rm, BSR16rm, CMP16rm, IMUL16rmi, IMUL16rmi8, LAR16rm,...
    printi16mem(MI, 1, O); 
    break;
  case 6:
    // CMOVA16rm, CMOVAE16rm, CMOVB16rm, CMOVBE16rm, CMOVE16rm, CMOVG16rm, CM...
    printi16mem(MI, 2, O); 
    return;
    break;
  case 7:
    // CMOVA32rm, CMOVAE32rm, CMOVB32rm, CMOVBE32rm, CMOVE32rm, CMOVG32rm, CM...
    printi32mem(MI, 2, O); 
    return;
    break;
  case 8:
    // CMOVA64rm, CMOVAE64rm, CMOVB64rm, CMOVBE64rm, CMOVE64rm, CMOVG64rm, CM...
    printi64mem(MI, 2, O); 
    return;
    break;
  case 9:
    // CMP8rm, MOV8rm, MOV8rm_NOREX, MOVSX16rm8, MOVSX32rm8, MOVSX64rm8, MOVZ...
    printi8mem(MI, 1, O); 
    break;
  case 10:
    // INVEPT32, INVEPT64, INVPCID32, INVPCID64, INVVPID32, INVVPID64
    printi128mem(MI, 1, O); 
    return;
    break;
  case 11:
    // LDS16rm, LDS32rm, LES16rm, LES32rm, LFS16rm, LFS32rm, LFS64rm, LGS16rm...
    printopaquemem(MI, 1, O); 
    return;
    break;
  case 12:
    // MOVSB
    printSrcIdx8(MI, 1, O); 
    return;
    break;
  case 13:
    // MOVSL
    printSrcIdx32(MI, 1, O); 
    return;
    break;
  case 14:
    // MOVSQ
    printSrcIdx64(MI, 1, O); 
    return;
    break;
  case 15:
    // MOVSW
    printSrcIdx16(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 4 unique commands.
  //printf("Frag-3: %"PRIu64"\n", (Bits >> 26) & 3);
  switch ((Bits >> 26) & 3) {
  default:   // unreachable.
  case 0:
    // ADC16mi, ADC16mi8, ADC16mr, ADC16rr_REV, ADC32mi, ADC32mi8, ADC32mr, A...
    return;
    break;
  case 1:
    // ANDN32rm, ANDN32rr, ANDN64rm, ANDN64rr, BEXTR32rm, BEXTR32rr, BEXTR64r...
    SStream_concat(O, "%s", ", "); 
    break;
  case 2:
    // MOV8mr_NOREX, MOV8rm_NOREX, MOV8rr_NOREX
    SStream_concat(O, "%s", "  # NOREX"); 
    return;
    break;
  case 3:
    // SHLD16mrCL, SHLD16rrCL, SHLD32mrCL, SHLD32rrCL, SHLD64mrCL, SHLD64rrCL...
    SStream_concat(O, "%s", ", cl"); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 5 unique commands.
  //printf("Frag-4: %"PRIu64"\n", (Bits >> 28) & 7);
  switch ((Bits >> 28) & 7) {
  default:   // unreachable.
  case 0:
    // ANDN32rm, MULX32rm, PDEP32rm, PEXT32rm
    printi32mem(MI, 2, O); 
    return;
    break;
  case 1:
    // ANDN32rr, ANDN64rr, BEXTR32rr, BEXTR64rr, BEXTRI32ri, BEXTRI64ri, BZHI...
    printOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ANDN64rm, MULX64rm, PDEP64rm, PEXT64rm
    printi64mem(MI, 2, O); 
    return;
    break;
  case 3:
    // BEXTR32rm, BEXTR64rm, BEXTRI32mi, BEXTRI64mi, BZHI32rm, BZHI64rm, IMUL...
    printOperand(MI, 6, O); 
    break;
  case 4:
    // SHLD16rri8, SHLD32rri8, SHLD64rri8, SHRD16rri8, SHRD32rri8, SHRD64rri8
    printOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  //printf("Frag-5: %"PRIu64"\n", (Bits >> 31) & 1);
  if ((Bits >> 31) & 1) {
    // VAARG_64
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 7, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 8, O); 
    return;
  } else {
    // BEXTR32rm, BEXTR64rm, BEXTRI32mi, BEXTRI64mi, BZHI32rm, BZHI64rm, IMUL...
    return;
  }
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
static char *getRegisterName(unsigned RegNo)
{
  // assert(RegNo && RegNo < 233 && "Invalid register number!");

#ifndef CAPSTONE_DIET
  static char AsmStrs[] = {
  /* 0 */ 's', 't', '(', '0', ')', 0,
  /* 6 */ 's', 't', '(', '1', ')', 0,
  /* 12 */ 's', 't', '(', '2', ')', 0,
  /* 18 */ 's', 't', '(', '3', ')', 0,
  /* 24 */ 's', 't', '(', '4', ')', 0,
  /* 30 */ 's', 't', '(', '5', ')', 0,
  /* 36 */ 's', 't', '(', '6', ')', 0,
  /* 42 */ 's', 't', '(', '7', ')', 0,
  /* 48 */ 'x', 'm', 'm', '1', '0', 0,
  /* 54 */ 'y', 'm', 'm', '1', '0', 0,
  /* 60 */ 'z', 'm', 'm', '1', '0', 0,
  /* 66 */ 'c', 'r', '1', '0', 0,
  /* 71 */ 'x', 'm', 'm', '2', '0', 0,
  /* 77 */ 'y', 'm', 'm', '2', '0', 0,
  /* 83 */ 'z', 'm', 'm', '2', '0', 0,
  /* 89 */ 'x', 'm', 'm', '3', '0', 0,
  /* 95 */ 'y', 'm', 'm', '3', '0', 0,
  /* 101 */ 'z', 'm', 'm', '3', '0', 0,
  /* 107 */ 'k', '0', 0,
  /* 110 */ 'x', 'm', 'm', '0', 0,
  /* 115 */ 'y', 'm', 'm', '0', 0,
  /* 120 */ 'z', 'm', 'm', '0', 0,
  /* 125 */ 'f', 'p', '0', 0,
  /* 129 */ 'c', 'r', '0', 0,
  /* 133 */ 'd', 'r', '0', 0,
  /* 137 */ 'x', 'm', 'm', '1', '1', 0,
  /* 143 */ 'y', 'm', 'm', '1', '1', 0,
  /* 149 */ 'z', 'm', 'm', '1', '1', 0,
  /* 155 */ 'c', 'r', '1', '1', 0,
  /* 160 */ 'x', 'm', 'm', '2', '1', 0,
  /* 166 */ 'y', 'm', 'm', '2', '1', 0,
  /* 172 */ 'z', 'm', 'm', '2', '1', 0,
  /* 178 */ 'x', 'm', 'm', '3', '1', 0,
  /* 184 */ 'y', 'm', 'm', '3', '1', 0,
  /* 190 */ 'z', 'm', 'm', '3', '1', 0,
  /* 196 */ 'k', '1', 0,
  /* 199 */ 'x', 'm', 'm', '1', 0,
  /* 204 */ 'y', 'm', 'm', '1', 0,
  /* 209 */ 'z', 'm', 'm', '1', 0,
  /* 214 */ 'f', 'p', '1', 0,
  /* 218 */ 'c', 'r', '1', 0,
  /* 222 */ 'd', 'r', '1', 0,
  /* 226 */ 'x', 'm', 'm', '1', '2', 0,
  /* 232 */ 'y', 'm', 'm', '1', '2', 0,
  /* 238 */ 'z', 'm', 'm', '1', '2', 0,
  /* 244 */ 'c', 'r', '1', '2', 0,
  /* 249 */ 'x', 'm', 'm', '2', '2', 0,
  /* 255 */ 'y', 'm', 'm', '2', '2', 0,
  /* 261 */ 'z', 'm', 'm', '2', '2', 0,
  /* 267 */ 'k', '2', 0,
  /* 270 */ 'x', 'm', 'm', '2', 0,
  /* 275 */ 'y', 'm', 'm', '2', 0,
  /* 280 */ 'z', 'm', 'm', '2', 0,
  /* 285 */ 'f', 'p', '2', 0,
  /* 289 */ 'c', 'r', '2', 0,
  /* 293 */ 'd', 'r', '2', 0,
  /* 297 */ 'x', 'm', 'm', '1', '3', 0,
  /* 303 */ 'y', 'm', 'm', '1', '3', 0,
  /* 309 */ 'z', 'm', 'm', '1', '3', 0,
  /* 315 */ 'c', 'r', '1', '3', 0,
  /* 320 */ 'x', 'm', 'm', '2', '3', 0,
  /* 326 */ 'y', 'm', 'm', '2', '3', 0,
  /* 332 */ 'z', 'm', 'm', '2', '3', 0,
  /* 338 */ 'k', '3', 0,
  /* 341 */ 'x', 'm', 'm', '3', 0,
  /* 346 */ 'y', 'm', 'm', '3', 0,
  /* 351 */ 'z', 'm', 'm', '3', 0,
  /* 356 */ 'f', 'p', '3', 0,
  /* 360 */ 'c', 'r', '3', 0,
  /* 364 */ 'd', 'r', '3', 0,
  /* 368 */ 'x', 'm', 'm', '1', '4', 0,
  /* 374 */ 'y', 'm', 'm', '1', '4', 0,
  /* 380 */ 'z', 'm', 'm', '1', '4', 0,
  /* 386 */ 'c', 'r', '1', '4', 0,
  /* 391 */ 'x', 'm', 'm', '2', '4', 0,
  /* 397 */ 'y', 'm', 'm', '2', '4', 0,
  /* 403 */ 'z', 'm', 'm', '2', '4', 0,
  /* 409 */ 'k', '4', 0,
  /* 412 */ 'x', 'm', 'm', '4', 0,
  /* 417 */ 'y', 'm', 'm', '4', 0,
  /* 422 */ 'z', 'm', 'm', '4', 0,
  /* 427 */ 'f', 'p', '4', 0,
  /* 431 */ 'c', 'r', '4', 0,
  /* 435 */ 'd', 'r', '4', 0,
  /* 439 */ 'x', 'm', 'm', '1', '5', 0,
  /* 445 */ 'y', 'm', 'm', '1', '5', 0,
  /* 451 */ 'z', 'm', 'm', '1', '5', 0,
  /* 457 */ 'c', 'r', '1', '5', 0,
  /* 462 */ 'x', 'm', 'm', '2', '5', 0,
  /* 468 */ 'y', 'm', 'm', '2', '5', 0,
  /* 474 */ 'z', 'm', 'm', '2', '5', 0,
  /* 480 */ 'k', '5', 0,
  /* 483 */ 'x', 'm', 'm', '5', 0,
  /* 488 */ 'y', 'm', 'm', '5', 0,
  /* 493 */ 'z', 'm', 'm', '5', 0,
  /* 498 */ 'f', 'p', '5', 0,
  /* 502 */ 'c', 'r', '5', 0,
  /* 506 */ 'd', 'r', '5', 0,
  /* 510 */ 'x', 'm', 'm', '1', '6', 0,
  /* 516 */ 'y', 'm', 'm', '1', '6', 0,
  /* 522 */ 'z', 'm', 'm', '1', '6', 0,
  /* 528 */ 'x', 'm', 'm', '2', '6', 0,
  /* 534 */ 'y', 'm', 'm', '2', '6', 0,
  /* 540 */ 'z', 'm', 'm', '2', '6', 0,
  /* 546 */ 'k', '6', 0,
  /* 549 */ 'x', 'm', 'm', '6', 0,
  /* 554 */ 'y', 'm', 'm', '6', 0,
  /* 559 */ 'z', 'm', 'm', '6', 0,
  /* 564 */ 'f', 'p', '6', 0,
  /* 568 */ 'c', 'r', '6', 0,
  /* 572 */ 'd', 'r', '6', 0,
  /* 576 */ 'x', 'm', 'm', '1', '7', 0,
  /* 582 */ 'y', 'm', 'm', '1', '7', 0,
  /* 588 */ 'z', 'm', 'm', '1', '7', 0,
  /* 594 */ 'x', 'm', 'm', '2', '7', 0,
  /* 600 */ 'y', 'm', 'm', '2', '7', 0,
  /* 606 */ 'z', 'm', 'm', '2', '7', 0,
  /* 612 */ 'k', '7', 0,
  /* 615 */ 'x', 'm', 'm', '7', 0,
  /* 620 */ 'y', 'm', 'm', '7', 0,
  /* 625 */ 'z', 'm', 'm', '7', 0,
  /* 630 */ 'c', 'r', '7', 0,
  /* 634 */ 'd', 'r', '7', 0,
  /* 638 */ 'x', 'm', 'm', '1', '8', 0,
  /* 644 */ 'y', 'm', 'm', '1', '8', 0,
  /* 650 */ 'z', 'm', 'm', '1', '8', 0,
  /* 656 */ 'x', 'm', 'm', '2', '8', 0,
  /* 662 */ 'y', 'm', 'm', '2', '8', 0,
  /* 668 */ 'z', 'm', 'm', '2', '8', 0,
  /* 674 */ 'x', 'm', 'm', '8', 0,
  /* 679 */ 'y', 'm', 'm', '8', 0,
  /* 684 */ 'z', 'm', 'm', '8', 0,
  /* 689 */ 'c', 'r', '8', 0,
  /* 693 */ 'x', 'm', 'm', '1', '9', 0,
  /* 699 */ 'y', 'm', 'm', '1', '9', 0,
  /* 705 */ 'z', 'm', 'm', '1', '9', 0,
  /* 711 */ 'x', 'm', 'm', '2', '9', 0,
  /* 717 */ 'y', 'm', 'm', '2', '9', 0,
  /* 723 */ 'z', 'm', 'm', '2', '9', 0,
  /* 729 */ 'x', 'm', 'm', '9', 0,
  /* 734 */ 'y', 'm', 'm', '9', 0,
  /* 739 */ 'z', 'm', 'm', '9', 0,
  /* 744 */ 'c', 'r', '9', 0,
  /* 748 */ 'r', '1', '0', 'b', 0,
  /* 753 */ 'r', '1', '1', 'b', 0,
  /* 758 */ 'r', '1', '2', 'b', 0,
  /* 763 */ 'r', '1', '3', 'b', 0,
  /* 768 */ 'r', '1', '4', 'b', 0,
  /* 773 */ 'r', '1', '5', 'b', 0,
  /* 778 */ 'r', '8', 'b', 0,
  /* 782 */ 'r', '9', 'b', 0,
  /* 786 */ 'r', '1', '0', 'd', 0,
  /* 791 */ 'r', '1', '1', 'd', 0,
  /* 796 */ 'r', '1', '2', 'd', 0,
  /* 801 */ 'r', '1', '3', 'd', 0,
  /* 806 */ 'r', '1', '4', 'd', 0,
  /* 811 */ 'r', '1', '5', 'd', 0,
  /* 816 */ 'r', '8', 'd', 0,
  /* 820 */ 'r', '9', 'd', 0,
  /* 824 */ 'a', 'h', 0,
  /* 827 */ 'b', 'h', 0,
  /* 830 */ 'c', 'h', 0,
  /* 833 */ 'd', 'h', 0,
  /* 836 */ 'e', 'd', 'i', 0,
  /* 840 */ 'r', 'd', 'i', 0,
  /* 844 */ 'e', 's', 'i', 0,
  /* 848 */ 'r', 's', 'i', 0,
  /* 852 */ 'a', 'l', 0,
  /* 855 */ 'b', 'l', 0,
  /* 858 */ 'c', 'l', 0,
  /* 861 */ 'd', 'l', 0,
  /* 864 */ 'd', 'i', 'l', 0,
  /* 868 */ 's', 'i', 'l', 0,
  /* 872 */ 'b', 'p', 'l', 0,
  /* 876 */ 's', 'p', 'l', 0,
  /* 880 */ 'e', 'b', 'p', 0,
  /* 884 */ 'r', 'b', 'p', 0,
  /* 888 */ 'e', 'i', 'p', 0,
  /* 892 */ 'r', 'i', 'p', 0,
  /* 896 */ 'e', 's', 'p', 0,
  /* 900 */ 'r', 's', 'p', 0,
  /* 904 */ 'c', 's', 0,
  /* 907 */ 'd', 's', 0,
  /* 910 */ 'e', 's', 0,
  /* 913 */ 'f', 's', 0,
  /* 916 */ 'f', 'l', 'a', 'g', 's', 0,
  /* 922 */ 's', 's', 0,
  /* 925 */ 'r', '1', '0', 'w', 0,
  /* 930 */ 'r', '1', '1', 'w', 0,
  /* 935 */ 'r', '1', '2', 'w', 0,
  /* 940 */ 'r', '1', '3', 'w', 0,
  /* 945 */ 'r', '1', '4', 'w', 0,
  /* 950 */ 'r', '1', '5', 'w', 0,
  /* 955 */ 'r', '8', 'w', 0,
  /* 959 */ 'r', '9', 'w', 0,
  /* 963 */ 'f', 'p', 's', 'w', 0,
  /* 968 */ 'e', 'a', 'x', 0,
  /* 972 */ 'r', 'a', 'x', 0,
  /* 976 */ 'e', 'b', 'x', 0,
  /* 980 */ 'r', 'b', 'x', 0,
  /* 984 */ 'e', 'c', 'x', 0,
  /* 988 */ 'r', 'c', 'x', 0,
  /* 992 */ 'e', 'd', 'x', 0,
  /* 996 */ 'r', 'd', 'x', 0,
  /* 1000 */ 'e', 'i', 'z', 0,
  /* 1004 */ 'r', 'i', 'z', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    824, 852, 969, 827, 855, 881, 872, 977, 830, 858, 904, 985, 833, 837, 
    864, 861, 907, 993, 968, 880, 976, 984, 836, 992, 916, 888, 1000, 910, 
    844, 896, 963, 913, 919, 889, 972, 884, 980, 988, 840, 996, 892, 1004, 
    848, 900, 845, 868, 897, 876, 922, 129, 218, 289, 360, 431, 502, 568, 
    630, 689, 744, 66, 155, 244, 315, 386, 457, 133, 222, 293, 364, 435, 
    506, 572, 634, 125, 214, 285, 356, 427, 498, 564, 107, 196, 267, 338, 
    409, 480, 546, 612, 111, 200, 271, 342, 413, 484, 550, 616, 690, 745, 
    67, 156, 245, 316, 387, 458, 0, 6, 12, 18, 24, 30, 36, 42, 
    110, 199, 270, 341, 412, 483, 549, 615, 674, 729, 48, 137, 226, 297, 
    368, 439, 510, 576, 638, 693, 71, 160, 249, 320, 391, 462, 528, 594, 
    656, 711, 89, 178, 115, 204, 275, 346, 417, 488, 554, 620, 679, 734, 
    54, 143, 232, 303, 374, 445, 516, 582, 644, 699, 77, 166, 255, 326, 
    397, 468, 534, 600, 662, 717, 95, 184, 120, 209, 280, 351, 422, 493, 
    559, 625, 684, 739, 60, 149, 238, 309, 380, 451, 522, 588, 650, 705, 
    83, 172, 261, 332, 403, 474, 540, 606, 668, 723, 101, 190, 778, 782, 
    748, 753, 758, 763, 768, 773, 816, 820, 786, 791, 796, 801, 806, 811, 
    955, 959, 925, 930, 935, 940, 945, 950, 
  };

  //int i;
  //for (i = 0; i < sizeof(RegAsmOffset)/4; i++)
  //     printf("%s = %u\n", AsmStrs+RegAsmOffset[i], i + 1);
  //printf("*************************\n");
  return AsmStrs+RegAsmOffset[RegNo-1];
#else
  return NULL;
#endif
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static char *printAliasInstr(MCInst *MI, SStream *OS, void *info)
{
  #define GETREGCLASS_CONTAIN(_class, _reg) MCRegisterClass_contains(MCRegisterInfo_getRegClass(MRI, _class), MCOperand_getReg(MCInst_getOperand(MI, _reg)))
  const char *AsmString;
  // MCRegisterInfo *MRI = (MCRegisterInfo *)info;
  switch (MCInst_getOpcode(MI)) {
  default: return 0;
  case X86_AAD8i8:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10) {
      // (AAD8i8 10)
      AsmString = "aad";
      break;
    }
    return 0;
  case X86_AAM8i8:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10) {
      // (AAM8i8 10)
      AsmString = "aam";
      break;
    }
    return 0;
  case X86_XSTORE:
    if (MCInst_getNumOperands(MI) == 0) {
      // (XSTORE)
      AsmString = "xstorerng";
      break;
    }
    return 0;
  }

  char *tmp = cs_strdup(AsmString), *AsmMnem, *AsmOps;
  AsmMnem = tmp;
  AsmOps = strchr(tmp, ' ');
  if (AsmOps) {
    *AsmOps = '\0';
    AsmOps += 1;
  }
  SStream_concat(OS, "%s", AsmMnem);
  if (AsmOps) {
    SStream_concat(OS, "\t");
    char *c;
    for (c = AsmOps; *c; c++) {
      if (*c == '$') {
        c += 1;
        printOperand(MI, *c - 1, OS);
      } else {
        SStream_concat(OS, "%c", *c);
      }
    }
  }
  return tmp;
}

#endif // PRINT_ALIAS_INSTR
