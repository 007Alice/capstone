/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013> */

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
static void printInstruction(MCInst *MI, SStream *O, MCRegisterInfo *MRI)
{
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3245U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3238U,	// BUNDLE
    3301U,	// LIFETIME_START
    3225U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    3316U,	// AAA
    4269U,	// AAD8i8
    4709U,	// AAM8i8
    3770U,	// AAS
    2980U,	// ACQUIRE_MOV16rm
    2980U,	// ACQUIRE_MOV32rm
    2980U,	// ACQUIRE_MOV64rm
    2980U,	// ACQUIRE_MOV8rm
    5413U,	// ADC16i16
    139395U,	// ADC16mi
    139395U,	// ADC16mi8
    139395U,	// ADC16mr
    274563U,	// ADC16ri
    274563U,	// ADC16ri8
    405635U,	// ADC16rm
    274563U,	// ADC16rr
    2232451U,	// ADC16rr_REV
    5549U,	// ADC32i32
    147587U,	// ADC32mi
    147587U,	// ADC32mi8
    147587U,	// ADC32mr
    274563U,	// ADC32ri
    274563U,	// ADC32ri8
    536707U,	// ADC32rm
    274563U,	// ADC32rr
    2232451U,	// ADC32rr_REV
    5697U,	// ADC64i32
    151683U,	// ADC64mi32
    151683U,	// ADC64mi8
    151683U,	// ADC64mr
    274563U,	// ADC64ri32
    274563U,	// ADC64ri8
    667779U,	// ADC64rm
    274563U,	// ADC64rr
    2232451U,	// ADC64rr_REV
    5311U,	// ADC8i8
    155779U,	// ADC8mi
    155779U,	// ADC8mr
    274563U,	// ADC8ri
    798851U,	// ADC8rm
    274563U,	// ADC8rr
    2232451U,	// ADC8rr_REV
    4330571U,	// ADCX32rm
    6427723U,	// ADCX32rr
    8524875U,	// ADCX64rm
    6427723U,	// ADCX64rr
    5422U,	// ADD16i16
    139443U,	// ADD16mi
    139443U,	// ADD16mi8
    139443U,	// ADD16mr
    274611U,	// ADD16ri
    274611U,	// ADD16ri8
    0U,	// ADD16ri8_DB
    0U,	// ADD16ri_DB
    405683U,	// ADD16rm
    274611U,	// ADD16rr
    0U,	// ADD16rr_DB
    2232499U,	// ADD16rr_REV
    5559U,	// ADD32i32
    147635U,	// ADD32mi
    147635U,	// ADD32mi8
    147635U,	// ADD32mr
    274611U,	// ADD32ri
    274611U,	// ADD32ri8
    0U,	// ADD32ri8_DB
    0U,	// ADD32ri_DB
    536755U,	// ADD32rm
    274611U,	// ADD32rr
    0U,	// ADD32rr_DB
    2232499U,	// ADD32rr_REV
    5707U,	// ADD64i32
    151731U,	// ADD64mi32
    151731U,	// ADD64mi8
    151731U,	// ADD64mr
    274611U,	// ADD64ri32
    0U,	// ADD64ri32_DB
    274611U,	// ADD64ri8
    0U,	// ADD64ri8_DB
    667827U,	// ADD64rm
    274611U,	// ADD64rr
    0U,	// ADD64rr_DB
    2232499U,	// ADD64rr_REV
    5320U,	// ADD8i8
    155827U,	// ADD8mi
    155827U,	// ADD8mr
    274611U,	// ADD8ri
    798899U,	// ADD8rm
    274611U,	// ADD8rr
    2232499U,	// ADD8rr_REV
    3255U,	// ADJCALLSTACKDOWN32
    3255U,	// ADJCALLSTACKDOWN64
    3273U,	// ADJCALLSTACKUP32
    3273U,	// ADJCALLSTACKUP64
    4330589U,	// ADOX32rm
    6427741U,	// ADOX32rr
    8524893U,	// ADOX64rm
    6427741U,	// ADOX64rr
    5431U,	// AND16i16
    139474U,	// AND16mi
    139474U,	// AND16mi8
    139474U,	// AND16mr
    274642U,	// AND16ri
    274642U,	// AND16ri8
    405714U,	// AND16rm
    274642U,	// AND16rr
    2232530U,	// AND16rr_REV
    5569U,	// AND32i32
    147666U,	// AND32mi
    147666U,	// AND32mi8
    147666U,	// AND32mr
    274642U,	// AND32ri
    274642U,	// AND32ri8
    536786U,	// AND32rm
    274642U,	// AND32rr
    2232530U,	// AND32rr_REV
    5717U,	// AND64i32
    151762U,	// AND64mi32
    151762U,	// AND64mi8
    151762U,	// AND64mr
    274642U,	// AND64ri32
    274642U,	// AND64ri8
    667858U,	// AND64rm
    274642U,	// AND64rr
    2232530U,	// AND64rr_REV
    5329U,	// AND8i8
    155858U,	// AND8mi
    155858U,	// AND8mr
    274642U,	// AND8ri
    798930U,	// AND8rm
    274642U,	// AND8rr
    2232530U,	// AND8rr_REV
    39981674U,	// ANDN32rm
    174199402U,	// ANDN32rr
    308417130U,	// ANDN64rm
    174199402U,	// ANDN64rr
    139847U,	// ARPL16mr
    6427207U,	// ARPL16rr
    1882U,	// ATOMADD6432
    2662U,	// ATOMAND16
    2095U,	// ATOMAND32
    2349U,	// ATOMAND64
    1903U,	// ATOMAND6432
    2816U,	// ATOMAND8
    2777U,	// ATOMMAX16
    2310U,	// ATOMMAX32
    2623U,	// ATOMMAX64
    2052U,	// ATOMMAX6432
    2943U,	// ATOMMAX8
    2701U,	// ATOMMIN16
    2195U,	// ATOMMIN32
    2508U,	// ATOMMIN64
    1946U,	// ATOMMIN6432
    2853U,	// ATOMMIN8
    2681U,	// ATOMNAND16
    2114U,	// ATOMNAND32
    2368U,	// ATOMNAND64
    1924U,	// ATOMNAND6432
    2834U,	// ATOMNAND8
    2740U,	// ATOMOR16
    2273U,	// ATOMOR32
    2586U,	// ATOMOR64
    2011U,	// ATOMOR6432
    2908U,	// ATOMOR8
    1861U,	// ATOMSUB6432
    1989U,	// ATOMSWAP6432
    2796U,	// ATOMUMAX16
    2329U,	// ATOMUMAX32
    2642U,	// ATOMUMAX64
    2073U,	// ATOMUMAX6432
    2961U,	// ATOMUMAX8
    2720U,	// ATOMUMIN16
    2214U,	// ATOMUMIN32
    2527U,	// ATOMUMIN64
    1967U,	// ATOMUMIN6432
    2871U,	// ATOMUMIN8
    2758U,	// ATOMXOR16
    2291U,	// ATOMXOR32
    2604U,	// ATOMXOR64
    2031U,	// ATOMXOR6432
    2925U,	// ATOMXOR8
    440537947U,	// BEXTR32rm
    174199643U,	// BEXTR32rr
    444732251U,	// BEXTR64rm
    174199643U,	// BEXTR64rr
    440537947U,	// BEXTRI32mi
    174199643U,	// BEXTRI32ri
    444732251U,	// BEXTRI64mi
    174199643U,	// BEXTRI64ri
    4330032U,	// BLCFILL32rm
    6427184U,	// BLCFILL32rr
    8524336U,	// BLCFILL64rm
    6427184U,	// BLCFILL64rr
    4329970U,	// BLCI32rm
    6427122U,	// BLCI32rr
    8524274U,	// BLCI64rm
    6427122U,	// BLCI64rr
    4329613U,	// BLCIC32rm
    6426765U,	// BLCIC32rr
    8523917U,	// BLCIC64rm
    6426765U,	// BLCIC64rr
    4329988U,	// BLCMSK32rm
    6427140U,	// BLCMSK32rr
    8524292U,	// BLCMSK64rm
    6427140U,	// BLCMSK64rr
    4330346U,	// BLCS32rm
    6427498U,	// BLCS32rr
    8524650U,	// BLCS64rm
    6427498U,	// BLCS64rr
    4330041U,	// BLSFILL32rm
    6427193U,	// BLSFILL32rr
    8524345U,	// BLSFILL64rm
    6427193U,	// BLSFILL64rr
    4329982U,	// BLSI32rm
    6427134U,	// BLSI32rr
    8524286U,	// BLSI64rm
    6427134U,	// BLSI64rr
    4329620U,	// BLSIC32rm
    6426772U,	// BLSIC32rr
    8523924U,	// BLSIC64rm
    6426772U,	// BLSIC64rr
    4329996U,	// BLSMSK32rm
    6427148U,	// BLSMSK32rr
    8524300U,	// BLSMSK64rm
    6427148U,	// BLSMSK64rr
    4330310U,	// BLSR32rm
    6427462U,	// BLSR32rr
    8524614U,	// BLSR64rm
    6427462U,	// BLSR64rr
    10621143U,	// BOUNDS16rm
    4329687U,	// BOUNDS32rm
    10621370U,	// BSF16rm
    6427066U,	// BSF16rr
    4329914U,	// BSF32rm
    6427066U,	// BSF32rr
    8524218U,	// BSF64rm
    6427066U,	// BSF64rr
    10621761U,	// BSR16rm
    6427457U,	// BSR16rr
    4330305U,	// BSR32rm
    6427457U,	// BSR32rr
    8524609U,	// BSR64rm
    6427457U,	// BSR64rr
    4757U,	// BSWAP32r
    4757U,	// BSWAP64r
    140211U,	// BT16mi8
    140211U,	// BT16mr
    6427571U,	// BT16ri8
    6427571U,	// BT16rr
    148403U,	// BT32mi8
    148403U,	// BT32mr
    6427571U,	// BT32ri8
    6427571U,	// BT32rr
    152499U,	// BT64mi8
    152499U,	// BT64mr
    6427571U,	// BT64ri8
    6427571U,	// BT64rr
    139432U,	// BTC16mi8
    139432U,	// BTC16mr
    6426792U,	// BTC16ri8
    6426792U,	// BTC16rr
    147624U,	// BTC32mi8
    147624U,	// BTC32mr
    6426792U,	// BTC32ri8
    6426792U,	// BTC32rr
    151720U,	// BTC64mi8
    151720U,	// BTC64mr
    6426792U,	// BTC64ri8
    6426792U,	// BTC64rr
    140108U,	// BTR16mi8
    140108U,	// BTR16mr
    6427468U,	// BTR16ri8
    6427468U,	// BTR16rr
    148300U,	// BTR32mi8
    148300U,	// BTR32mr
    6427468U,	// BTR32ri8
    6427468U,	// BTR32rr
    152396U,	// BTR64mi8
    152396U,	// BTR64mr
    6427468U,	// BTR64ri8
    6427468U,	// BTR64rr
    140193U,	// BTS16mi8
    140193U,	// BTS16mr
    6427553U,	// BTS16ri8
    6427553U,	// BTS16rr
    148385U,	// BTS32mi8
    148385U,	// BTS32mr
    6427553U,	// BTS32ri8
    6427553U,	// BTS32rr
    152481U,	// BTS64mi8
    152481U,	// BTS64mr
    6427553U,	// BTS64ri8
    6427553U,	// BTS64rr
    440537592U,	// BZHI32rm
    174199288U,	// BZHI32rr
    444731896U,	// BZHI64rm
    174199288U,	// BZHI64rr
    8746U,	// CALL16m
    4650U,	// CALL16r
    16938U,	// CALL32m
    4650U,	// CALL32r
    21034U,	// CALL64m
    29226U,	// CALL64pcrel32
    4650U,	// CALL64r
    29226U,	// CALLpcrel16
    29226U,	// CALLpcrel32
    3969U,	// CBW
    3690U,	// CDQ
    3516U,	// CDQE
    3385U,	// CLAC
    3417U,	// CLC
    3460U,	// CLD
    3560U,	// CLI
    3913U,	// CLTS
    3421U,	// CMC
    12718127U,	// CMOVA16rm
    2232367U,	// CMOVA16rr
    14815279U,	// CMOVA32rm
    2232367U,	// CMOVA32rr
    16912431U,	// CMOVA64rm
    2232367U,	// CMOVA64rr
    12718355U,	// CMOVAE16rm
    2232595U,	// CMOVAE16rr
    14815507U,	// CMOVAE32rm
    2232595U,	// CMOVAE32rr
    16912659U,	// CMOVAE64rm
    2232595U,	// CMOVAE64rr
    12718204U,	// CMOVB16rm
    2232444U,	// CMOVB16rr
    14815356U,	// CMOVB32rm
    2232444U,	// CMOVB32rr
    16912508U,	// CMOVB64rm
    2232444U,	// CMOVB64rr
    12718375U,	// CMOVBE16rm
    2232615U,	// CMOVBE16rr
    14815527U,	// CMOVBE32rm
    2232615U,	// CMOVBE32rr
    16912679U,	// CMOVBE64rm
    2232615U,	// CMOVBE64rr
    12718515U,	// CMOVE16rm
    2232755U,	// CMOVE16rr
    14815667U,	// CMOVE32rm
    2232755U,	// CMOVE32rr
    16912819U,	// CMOVE64rm
    2232755U,	// CMOVE64rr
    12718565U,	// CMOVG16rm
    2232805U,	// CMOVG16rr
    14815717U,	// CMOVG32rm
    2232805U,	// CMOVG32rr
    16912869U,	// CMOVG64rm
    2232805U,	// CMOVG64rr
    12718395U,	// CMOVGE16rm
    2232635U,	// CMOVGE16rr
    14815547U,	// CMOVGE32rm
    2232635U,	// CMOVGE32rr
    16912699U,	// CMOVGE64rm
    2232635U,	// CMOVGE64rr
    12718686U,	// CMOVL16rm
    2232926U,	// CMOVL16rr
    14815838U,	// CMOVL32rm
    2232926U,	// CMOVL32rr
    16912990U,	// CMOVL64rm
    2232926U,	// CMOVL64rr
    12718419U,	// CMOVLE16rm
    2232659U,	// CMOVLE16rr
    14815571U,	// CMOVLE32rm
    2232659U,	// CMOVLE32rr
    16912723U,	// CMOVLE64rm
    2232659U,	// CMOVLE64rr
    12718447U,	// CMOVNE16rm
    2232687U,	// CMOVNE16rr
    14815599U,	// CMOVNE32rm
    2232687U,	// CMOVNE32rr
    16912751U,	// CMOVNE64rm
    2232687U,	// CMOVNE64rr
    12718720U,	// CMOVNO16rm
    2232960U,	// CMOVNO16rr
    14815872U,	// CMOVNO32rm
    2232960U,	// CMOVNO32rr
    16913024U,	// CMOVNO64rm
    2232960U,	// CMOVNO64rr
    12718781U,	// CMOVNP16rm
    2233021U,	// CMOVNP16rr
    14815933U,	// CMOVNP32rm
    2233021U,	// CMOVNP32rr
    16913085U,	// CMOVNP64rm
    2233021U,	// CMOVNP64rr
    12718996U,	// CMOVNS16rm
    2233236U,	// CMOVNS16rr
    14816148U,	// CMOVNS32rm
    2233236U,	// CMOVNS32rr
    16913300U,	// CMOVNS64rm
    2233236U,	// CMOVNS64rr
    12718734U,	// CMOVO16rm
    2232974U,	// CMOVO16rr
    14815886U,	// CMOVO32rm
    2232974U,	// CMOVO32rr
    16913038U,	// CMOVO64rm
    2232974U,	// CMOVO64rr
    12718827U,	// CMOVP16rm
    2233067U,	// CMOVP16rr
    14815979U,	// CMOVP32rm
    2233067U,	// CMOVP32rr
    16913131U,	// CMOVP64rm
    2233067U,	// CMOVP64rr
    12719020U,	// CMOVS16rm
    2233260U,	// CMOVS16rr
    14816172U,	// CMOVS32rm
    2233260U,	// CMOVS32rr
    16913324U,	// CMOVS64rm
    2233260U,	// CMOVS64rr
    2254U,	// CMOV_FR32
    2567U,	// CMOV_FR64
    1821U,	// CMOV_GR16
    1801U,	// CMOV_GR32
    2890U,	// CMOV_GR8
    2234U,	// CMOV_RFP32
    2547U,	// CMOV_RFP64
    1841U,	// CMOV_RFP80
    2154U,	// CMOV_V16F32
    2388U,	// CMOV_V2F64
    2448U,	// CMOV_V2I64
    2134U,	// CMOV_V4F32
    2408U,	// CMOV_V4F64
    2468U,	// CMOV_V4I64
    2175U,	// CMOV_V8F32
    2428U,	// CMOV_V8F64
    2488U,	// CMOV_V8I64
    5458U,	// CMP16i16
    139942U,	// CMP16mi
    139942U,	// CMP16mi8
    139942U,	// CMP16mr
    6427302U,	// CMP16ri
    6427302U,	// CMP16ri8
    10621606U,	// CMP16rm
    6427302U,	// CMP16rr
    6427302U,	// CMP16rr_REV
    5623U,	// CMP32i32
    148134U,	// CMP32mi
    148134U,	// CMP32mi8
    148134U,	// CMP32mr
    6427302U,	// CMP32ri
    6427302U,	// CMP32ri8
    4330150U,	// CMP32rm
    6427302U,	// CMP32rr
    6427302U,	// CMP32rr_REV
    5738U,	// CMP64i32
    152230U,	// CMP64mi32
    152230U,	// CMP64mi8
    152230U,	// CMP64mr
    6427302U,	// CMP64ri32
    6427302U,	// CMP64ri8
    8524454U,	// CMP64rm
    6427302U,	// CMP64rr
    6427302U,	// CMP64rr_REV
    5346U,	// CMP8i8
    156326U,	// CMP8mi
    156326U,	// CMP8mr
    6427302U,	// CMP8ri
    19010214U,	// CMP8rm
    6427302U,	// CMP8rr
    6427302U,	// CMP8rr_REV
    33853U,	// CMPS16
    37105U,	// CMPS32
    41728U,	// CMPS64
    45155U,	// CMPS8
    49206U,	// CMPXCHG16B
    139722U,	// CMPXCHG16rm
    6427082U,	// CMPXCHG16rr
    147914U,	// CMPXCHG32rm
    6427082U,	// CMPXCHG32rr
    152010U,	// CMPXCHG64rm
    6427082U,	// CMPXCHG64rr
    20546U,	// CMPXCHG8B
    156106U,	// CMPXCHG8rm
    6427082U,	// CMPXCHG8rr
    3454U,	// CPUID32
    3454U,	// CPUID64
    3666U,	// CQO
    3783U,	// CS_PREFIX
    3501U,	// CWD
    3505U,	// CWDE
    3320U,	// DAA
    3774U,	// DAS
    3210U,	// DATA16_PREFIX
    8328U,	// DEC16m
    4232U,	// DEC16r
    4232U,	// DEC32_16r
    4232U,	// DEC32_32r
    16520U,	// DEC32m
    4232U,	// DEC32r
    8328U,	// DEC64_16m
    4232U,	// DEC64_16r
    16520U,	// DEC64_32m
    4232U,	// DEC64_32r
    20616U,	// DEC64m
    4232U,	// DEC64r
    24712U,	// DEC8m
    4232U,	// DEC8r
    9236U,	// DIV16m
    5140U,	// DIV16r
    17428U,	// DIV32m
    5140U,	// DIV32r
    21524U,	// DIV64m
    5140U,	// DIV64r
    25620U,	// DIV8m
    5140U,	// DIV8r
    3791U,	// DS_PREFIX
    5850U,	// EH_RETURN
    5850U,	// EH_RETURN64
    3033U,	// EH_SjLj_LongJmp32
    3123U,	// EH_SjLj_LongJmp64
    3052U,	// EH_SjLj_SetJmp32
    3142U,	// EH_SjLj_SetJmp64
    29403U,	// EH_SjLj_Setup
    6427421U,	// ENTER
    3806U,	// ES_PREFIX
    6427177U,	// FARCALL16i
    53801U,	// FARCALL16m
    6427177U,	// FARCALL32i
    53801U,	// FARCALL32m
    53801U,	// FARCALL64
    6427307U,	// FARJMP16i
    53931U,	// FARJMP16m
    6427307U,	// FARJMP32i
    53931U,	// FARJMP32m
    53931U,	// FARJMP64
    3628U,	// FSETPM
    3821U,	// FS_PREFIX
    3405U,	// GETSEC
    3836U,	// GS_PREFIX
    3938U,	// HLT
    9235U,	// IDIV16m
    5139U,	// IDIV16r
    17427U,	// IDIV32m
    5139U,	// IDIV32r
    21523U,	// IDIV64m
    5139U,	// IDIV64r
    25619U,	// IDIV8m
    5139U,	// IDIV8r
    8792U,	// IMUL16m
    4696U,	// IMUL16r
    12718680U,	// IMUL16rm
    446829144U,	// IMUL16rmi
    446829144U,	// IMUL16rmi8
    2232920U,	// IMUL16rr
    174199384U,	// IMUL16rri
    174199384U,	// IMUL16rri8
    16984U,	// IMUL32m
    4696U,	// IMUL32r
    14815832U,	// IMUL32rm
    440537688U,	// IMUL32rmi
    440537688U,	// IMUL32rmi8
    2232920U,	// IMUL32rr
    174199384U,	// IMUL32rri
    174199384U,	// IMUL32rri8
    21080U,	// IMUL64m
    4696U,	// IMUL64r
    16912984U,	// IMUL64rm
    444731992U,	// IMUL64rmi32
    444731992U,	// IMUL64rmi8
    2232920U,	// IMUL64rr
    174199384U,	// IMUL64rri32
    174199384U,	// IMUL64rri8
    25176U,	// IMUL8m
    4696U,	// IMUL8r
    975920U,	// IN16
    5450U,	// IN16ri
    4026U,	// IN16rr
    979172U,	// IN32
    5614U,	// IN32ri
    4036U,	// IN32rr
    983126U,	// IN8
    5338U,	// IN8ri
    4016U,	// IN8rr
    8355U,	// INC16m
    4259U,	// INC16r
    4259U,	// INC32_16r
    4259U,	// INC32_32r
    16547U,	// INC32m
    4259U,	// INC32r
    8355U,	// INC64_16m
    4259U,	// INC64_16r
    16547U,	// INC64_32m
    4259U,	// INC64_32r
    20643U,	// INC64m
    4259U,	// INC64r
    24739U,	// INC8m
    4259U,	// INC8r
    5102U,	// INT
    3028U,	// INT1
    3118U,	// INT3
    3670U,	// INTO
    3496U,	// INVD
    25047U,	// INVLPG
    21106880U,	// INVPCID32
    21106880U,	// INVPCID64
    3918U,	// IRET16
    3484U,	// IRET32
    3733U,	// IRET64
    3289U,	// Int_MemBarrier
    28935U,	// JAE_1
    28935U,	// JAE_2
    28935U,	// JAE_4
    28709U,	// JA_1
    28709U,	// JA_2
    28709U,	// JA_4
    28955U,	// JBE_1
    28955U,	// JBE_2
    28955U,	// JBE_4
    28754U,	// JB_1
    28754U,	// JB_2
    28754U,	// JB_4
    29834U,	// JCXZ
    29827U,	// JECXZ_32
    29827U,	// JECXZ_64
    28995U,	// JE_1
    28995U,	// JE_2
    28995U,	// JE_4
    28975U,	// JGE_1
    28975U,	// JGE_2
    28975U,	// JGE_4
    29139U,	// JG_1
    29139U,	// JG_2
    29139U,	// JG_4
    28999U,	// JLE_1
    28999U,	// JLE_2
    28999U,	// JLE_4
    29221U,	// JL_1
    29221U,	// JL_2
    29221U,	// JL_4
    8876U,	// JMP16m
    4780U,	// JMP16r
    17068U,	// JMP32m
    4780U,	// JMP32r
    21164U,	// JMP64m
    4780U,	// JMP64r
    29356U,	// JMP_1
    29356U,	// JMP_2
    29356U,	// JMP_4
    29019U,	// JNE_1
    29019U,	// JNE_2
    29019U,	// JNE_4
    29300U,	// JNO_1
    29300U,	// JNO_2
    29300U,	// JNO_4
    29361U,	// JNP_1
    29361U,	// JNP_2
    29361U,	// JNP_4
    29576U,	// JNS_1
    29576U,	// JNS_2
    29576U,	// JNS_4
    29296U,	// JO_1
    29296U,	// JO_2
    29296U,	// JO_4
    29346U,	// JP_1
    29346U,	// JP_2
    29346U,	// JP_4
    29840U,	// JRCXZ
    29572U,	// JS_1
    29572U,	// JS_2
    29572U,	// JS_4
    3534U,	// LAHF
    10621710U,	// LAR16rm
    6427406U,	// LAR16rr
    10621710U,	// LAR32rm
    6427406U,	// LAR32rr
    10621710U,	// LAR64rm
    6427406U,	// LAR64rr
    139722U,	// LCMPXCHG16
    49206U,	// LCMPXCHG16B
    147914U,	// LCMPXCHG32
    152010U,	// LCMPXCHG64
    156106U,	// LCMPXCHG8
    20546U,	// LCMPXCHG8B
    23204720U,	// LDS16rm
    23204720U,	// LDS32rm
    4329504U,	// LEA16r
    4329504U,	// LEA32r
    4329504U,	// LEA64_32r
    8523808U,	// LEA64r
    3528U,	// LEAVE
    3528U,	// LEAVE64
    23204725U,	// LES16rm
    23204725U,	// LES32rm
    23204730U,	// LFS16rm
    23204730U,	// LFS32rm
    23204730U,	// LFS64rm
    54199U,	// LGDT16m
    54199U,	// LGDT32m
    54199U,	// LGDT64m
    23204735U,	// LGS16rm
    23204735U,	// LGS32rm
    23204735U,	// LGS64rm
    54211U,	// LIDT16m
    54211U,	// LIDT32m
    54211U,	// LIDT64m
    9167U,	// LLDT16m
    5071U,	// LLDT16r
    9252U,	// LMSW16m
    5156U,	// LMSW16r
    139443U,	// LOCK_ADD16mi
    139443U,	// LOCK_ADD16mi8
    139443U,	// LOCK_ADD16mr
    147635U,	// LOCK_ADD32mi
    147635U,	// LOCK_ADD32mi8
    147635U,	// LOCK_ADD32mr
    151731U,	// LOCK_ADD64mi32
    151731U,	// LOCK_ADD64mi8
    151731U,	// LOCK_ADD64mr
    155827U,	// LOCK_ADD8mi
    155827U,	// LOCK_ADD8mr
    139474U,	// LOCK_AND16mi
    139474U,	// LOCK_AND16mi8
    139474U,	// LOCK_AND16mr
    147666U,	// LOCK_AND32mi
    147666U,	// LOCK_AND32mi8
    147666U,	// LOCK_AND32mr
    151762U,	// LOCK_AND64mi32
    151762U,	// LOCK_AND64mi8
    151762U,	// LOCK_AND64mr
    155858U,	// LOCK_AND8mi
    155858U,	// LOCK_AND8mr
    8328U,	// LOCK_DEC16m
    16520U,	// LOCK_DEC32m
    20616U,	// LOCK_DEC64m
    24712U,	// LOCK_DEC8m
    8355U,	// LOCK_INC16m
    16547U,	// LOCK_INC32m
    20643U,	// LOCK_INC64m
    24739U,	// LOCK_INC8m
    140074U,	// LOCK_OR16mi
    140074U,	// LOCK_OR16mi8
    140074U,	// LOCK_OR16mr
    148266U,	// LOCK_OR32mi
    148266U,	// LOCK_OR32mi8
    148266U,	// LOCK_OR32mr
    152362U,	// LOCK_OR64mi32
    152362U,	// LOCK_OR64mi8
    152362U,	// LOCK_OR64mr
    156458U,	// LOCK_OR8mi
    156458U,	// LOCK_OR8mr
    3583U,	// LOCK_PREFIX
    139383U,	// LOCK_SUB16mi
    139383U,	// LOCK_SUB16mi8
    139383U,	// LOCK_SUB16mr
    147575U,	// LOCK_SUB32mi
    147575U,	// LOCK_SUB32mi8
    147575U,	// LOCK_SUB32mr
    151671U,	// LOCK_SUB64mi32
    151671U,	// LOCK_SUB64mi8
    151671U,	// LOCK_SUB64mr
    155767U,	// LOCK_SUB8mi
    155767U,	// LOCK_SUB8mr
    140086U,	// LOCK_XOR16mi
    140086U,	// LOCK_XOR16mi8
    140086U,	// LOCK_XOR16mr
    148278U,	// LOCK_XOR32mi
    148278U,	// LOCK_XOR32mi8
    148278U,	// LOCK_XOR32mr
    152374U,	// LOCK_XOR64mi32
    152374U,	// LOCK_XOR64mi8
    152374U,	// LOCK_XOR64mr
    156470U,	// LOCK_XOR8mi
    156470U,	// LOCK_XOR8mr
    70827U,	// LODSB
    75223U,	// LODSL
    79488U,	// LODSQ
    83342U,	// LODSW
    29386U,	// LOOP
    29047U,	// LOOPE
    29024U,	// LOOPNE
    4543U,	// LRETIL
    4850U,	// LRETIQ
    4543U,	// LRETIW
    3555U,	// LRETL
    3707U,	// LRETQ
    3555U,	// LRETW
    10621517U,	// LSL16rm
    6427213U,	// LSL16rr
    4330061U,	// LSL32rm
    6427213U,	// LSL32rr
    8524365U,	// LSL64rm
    6427213U,	// LSL64rr
    23204764U,	// LSS16rm
    23204764U,	// LSS32rm
    23204764U,	// LSS64rm
    9041U,	// LTRm
    4945U,	// LTRr
    86194U,	// LXADD16
    90290U,	// LXADD32
    94386U,	// LXADD64
    98482U,	// LXADD8
    10621920U,	// LZCNT16rm
    6427616U,	// LZCNT16rr
    4330464U,	// LZCNT32rm
    6427616U,	// LZCNT32rr
    8524768U,	// LZCNT64rm
    6427616U,	// LZCNT64rr
    3620U,	// MONTMUL
    0U,	// MORESTACK_RET
    0U,	// MORESTACK_RET_RESTORE_R10
    1152025U,	// MOV16ao16
    1152025U,	// MOV16ao16_16
    140313U,	// MOV16mi
    140313U,	// MOV16mr
    140313U,	// MOV16ms
    103802U,	// MOV16o16a
    103802U,	// MOV16o16a_16
    6427673U,	// MOV16ri
    6427673U,	// MOV16ri_alt
    10621977U,	// MOV16rm
    6427673U,	// MOV16rr
    6427673U,	// MOV16rr_REV
    6427673U,	// MOV16rs
    10621977U,	// MOV16sm
    6427673U,	// MOV16sr
    1287193U,	// MOV32ao32
    1287193U,	// MOV32ao32_16
    6427673U,	// MOV32cr
    6427673U,	// MOV32dr
    148505U,	// MOV32mi
    148505U,	// MOV32mr
    148505U,	// MOV32ms
    108067U,	// MOV32o32a
    108067U,	// MOV32o32a_16
    0U,	// MOV32r0
    6427673U,	// MOV32rc
    6427673U,	// MOV32rd
    6427673U,	// MOV32ri
    0U,	// MOV32ri64
    6427673U,	// MOV32ri_alt
    4330521U,	// MOV32rm
    6427673U,	// MOV32rr
    6427673U,	// MOV32rr_REV
    6427673U,	// MOV32rs
    4330521U,	// MOV32sm
    6427673U,	// MOV32sr
    1151842U,	// MOV64ao16
    1287010U,	// MOV64ao32
    1422178U,	// MOV64ao64
    1557346U,	// MOV64ao8
    6427673U,	// MOV64cr
    6427673U,	// MOV64dr
    152601U,	// MOV64mi32
    152601U,	// MOV64mr
    152601U,	// MOV64ms
    103780U,	// MOV64o16a
    108043U,	// MOV64o32a
    112278U,	// MOV64o64a
    115956U,	// MOV64o8a
    6427673U,	// MOV64rc
    6427673U,	// MOV64rd
    6427490U,	// MOV64ri
    6427673U,	// MOV64ri32
    8524825U,	// MOV64rm
    6427673U,	// MOV64rr
    6427673U,	// MOV64rr_REV
    6427673U,	// MOV64rs
    8524825U,	// MOV64sm
    6427673U,	// MOV64sr
    1557529U,	// MOV8ao8
    1557529U,	// MOV8ao8_16
    156697U,	// MOV8mi
    156697U,	// MOV8mr
    67265561U,	// MOV8mr_NOREX
    115978U,	// MOV8o8a
    115978U,	// MOV8o8a_16
    6427673U,	// MOV8ri
    6427673U,	// MOV8ri_alt
    19010585U,	// MOV8rm
    86119449U,	// MOV8rm_NOREX
    6427673U,	// MOV8rr
    73536537U,	// MOV8rr_NOREX
    6427673U,	// MOV8rr_REV
    139560U,	// MOVBE16mr
    10621224U,	// MOVBE16rm
    147752U,	// MOVBE32mr
    4329768U,	// MOVBE32rm
    151848U,	// MOVBE64mr
    8524072U,	// MOVBE64rm
    0U,	// MOVPC32r
    25362538U,	// MOVSB
    27455736U,	// MOVSL
    29610759U,	// MOVSQ
    31646788U,	// MOVSW
    19010677U,	// MOVSX16rm8
    6427765U,	// MOVSX16rr8
    10622069U,	// MOVSX32rm16
    19010677U,	// MOVSX32rm8
    6427765U,	// MOVSX32rr16
    6427765U,	// MOVSX32rr8
    10622069U,	// MOVSX64rm16
    4329727U,	// MOVSX64rm32
    19010677U,	// MOVSX64rm8
    6427765U,	// MOVSX64rr16
    6426879U,	// MOVSX64rr32
    6427765U,	// MOVSX64rr8
    19010684U,	// MOVZX16rm8
    6427772U,	// MOVZX16rr8
    19010684U,	// MOVZX32_NOREXrm8
    6427772U,	// MOVZX32_NOREXrr8
    10622076U,	// MOVZX32rm16
    19010684U,	// MOVZX32rm8
    6427772U,	// MOVZX32rr16
    6427772U,	// MOVZX32rr8
    10622076U,	// MOVZX64rm16_Q
    19010684U,	// MOVZX64rm8_Q
    6427772U,	// MOVZX64rr16_Q
    6427772U,	// MOVZX64rr8_Q
    8793U,	// MUL16m
    4697U,	// MUL16r
    16985U,	// MUL32m
    4697U,	// MUL32r
    21081U,	// MUL64m
    4697U,	// MUL64r
    25177U,	// MUL8m
    4697U,	// MUL8r
    39982167U,	// MULX32rm
    174199895U,	// MULX32rr
    308417623U,	// MULX64rm
    174199895U,	// MULX64rr
    8645U,	// NEG16m
    4549U,	// NEG16r
    16837U,	// NEG32m
    4549U,	// NEG32r
    20933U,	// NEG64m
    4549U,	// NEG64r
    25029U,	// NEG8m
    4549U,	// NEG8r
    3686U,	// NOOP
    17093U,	// NOOPL
    8901U,	// NOOPW
    9203U,	// NOT16m
    5107U,	// NOT16r
    17395U,	// NOT32m
    5107U,	// NOT32r
    21491U,	// NOT64m
    5107U,	// NOT64r
    25587U,	// NOT8m
    5107U,	// NOT8r
    5468U,	// OR16i16
    140074U,	// OR16mi
    140074U,	// OR16mi8
    140074U,	// OR16mr
    275242U,	// OR16ri
    275242U,	// OR16ri8
    406314U,	// OR16rm
    275242U,	// OR16rr
    2233130U,	// OR16rr_REV
    5634U,	// OR32i32
    148266U,	// OR32mi
    148266U,	// OR32mi8
    148266U,	// OR32mr
    148266U,	// OR32mrLocked
    275242U,	// OR32ri
    275242U,	// OR32ri8
    537386U,	// OR32rm
    275242U,	// OR32rr
    2233130U,	// OR32rr_REV
    5773U,	// OR64i32
    152362U,	// OR64mi32
    152362U,	// OR64mi8
    152362U,	// OR64mr
    275242U,	// OR64ri32
    275242U,	// OR64ri8
    668458U,	// OR64rm
    275242U,	// OR64rr
    2233130U,	// OR64rr_REV
    5356U,	// OR8i8
    156458U,	// OR8mi
    156458U,	// OR8mr
    275242U,	// OR8ri
    799530U,	// OR8rm
    275242U,	// OR8rr
    2233130U,	// OR8rr_REV
    1053704U,	// OUT16ir
    3993U,	// OUT16rr
    1184776U,	// OUT32ir
    4004U,	// OUT32rr
    1446920U,	// OUT8ir
    3588U,	// OUT8rr
    71342U,	// OUTSB
    75449U,	// OUTSL
    83652U,	// OUTSW
    39981724U,	// PDEP32rm
    174199452U,	// PDEP32rr
    308417180U,	// PDEP64rm
    174199452U,	// PDEP64rr
    39982093U,	// PEXT32rm
    174199821U,	// PEXT32rr
    308417549U,	// PEXT64rm
    174199821U,	// PEXT64rr
    4816U,	// POP16r
    8912U,	// POP16rmm
    4816U,	// POP16rmr
    4816U,	// POP32r
    17104U,	// POP32rmm
    4816U,	// POP32rmr
    4816U,	// POP64r
    21200U,	// POP64rmm
    4816U,	// POP64rmr
    3963U,	// POPA16
    3606U,	// POPA32
    3794U,	// POPDS16
    3794U,	// POPDS32
    3809U,	// POPES16
    3809U,	// POPES32
    3550U,	// POPF16
    3448U,	// POPF32
    3701U,	// POPF64
    3824U,	// POPFS16
    3824U,	// POPFS32
    3824U,	// POPFS64
    3839U,	// POPGS16
    3839U,	// POPGS32
    3839U,	// POPGS64
    3906U,	// POPSS16
    3906U,	// POPSS32
    4588U,	// PUSH16i8
    4588U,	// PUSH16r
    8684U,	// PUSH16rmm
    4588U,	// PUSH16rmr
    4588U,	// PUSH32i8
    4588U,	// PUSH32r
    16876U,	// PUSH32rmm
    4588U,	// PUSH32rmr
    4588U,	// PUSH64i16
    4588U,	// PUSH64i32
    4588U,	// PUSH64i8
    4588U,	// PUSH64r
    20972U,	// PUSH64rmm
    4588U,	// PUSH64rmr
    3956U,	// PUSHA16
    3599U,	// PUSHA32
    3778U,	// PUSHCS16
    3778U,	// PUSHCS32
    3786U,	// PUSHDS16
    3786U,	// PUSHDS32
    3801U,	// PUSHES16
    3801U,	// PUSHES32
    3544U,	// PUSHF16
    3441U,	// PUSHF32
    3694U,	// PUSHF64
    3816U,	// PUSHFS16
    3816U,	// PUSHFS32
    3816U,	// PUSHFS64
    3831U,	// PUSHGS16
    3831U,	// PUSHGS32
    3831U,	// PUSHGS64
    3898U,	// PUSHSS16
    3898U,	// PUSHSS32
    4588U,	// PUSHi16
    4588U,	// PUSHi32
    8731U,	// RCL16m1
    1581595U,	// RCL16mCL
    139803U,	// RCL16mi
    4635U,	// RCL16r1
    1577499U,	// RCL16rCL
    2232859U,	// RCL16ri
    16923U,	// RCL32m1
    1589787U,	// RCL32mCL
    147995U,	// RCL32mi
    4635U,	// RCL32r1
    1577499U,	// RCL32rCL
    2232859U,	// RCL32ri
    21019U,	// RCL64m1
    1593883U,	// RCL64mCL
    152091U,	// RCL64mi
    4635U,	// RCL64r1
    1577499U,	// RCL64rCL
    2232859U,	// RCL64ri
    25115U,	// RCL8m1
    1597979U,	// RCL8mCL
    156187U,	// RCL8mi
    4635U,	// RCL8r1
    1577499U,	// RCL8rCL
    2232859U,	// RCL8ri
    8984U,	// RCR16m1
    1581848U,	// RCR16mCL
    140056U,	// RCR16mi
    4888U,	// RCR16r1
    1577752U,	// RCR16rCL
    2233112U,	// RCR16ri
    17176U,	// RCR32m1
    1590040U,	// RCR32mCL
    148248U,	// RCR32mi
    4888U,	// RCR32r1
    1577752U,	// RCR32rCL
    2233112U,	// RCR32ri
    21272U,	// RCR64m1
    1594136U,	// RCR64mCL
    152344U,	// RCR64mi
    4888U,	// RCR64r1
    1577752U,	// RCR64rCL
    2233112U,	// RCR64ri
    25368U,	// RCR8m1
    1598232U,	// RCR8mCL
    156440U,	// RCR8mi
    4888U,	// RCR8r1
    1577752U,	// RCR8rCL
    2233112U,	// RCR8ri
    4478U,	// RDFSBASE
    4478U,	// RDFSBASE64
    4498U,	// RDGSBASE
    4498U,	// RDGSBASE64
    3748U,	// RDMSR
    3425U,	// RDPMC
    4303U,	// RDRAND16r
    4303U,	// RDRAND32r
    4303U,	// RDRAND64r
    4280U,	// RDSEED16r
    4280U,	// RDSEED32r
    4280U,	// RDSEED64r
    3431U,	// RDTSC
    3675U,	// RDTSCP
    3001U,	// RELEASE_MOV16mr
    3001U,	// RELEASE_MOV32mr
    3001U,	// RELEASE_MOV64mr
    3001U,	// RELEASE_MOV8mr
    3510U,	// REPNE_PREFIX
    3369U,	// REP_MOVSB_32
    3369U,	// REP_MOVSB_64
    3474U,	// REP_MOVSD_32
    3474U,	// REP_MOVSD_64
    3723U,	// REP_MOVSQ_64
    3983U,	// REP_MOVSW_32
    3983U,	// REP_MOVSW_64
    3682U,	// REP_PREFIX
    3359U,	// REP_STOSB_32
    3359U,	// REP_STOSB_64
    3464U,	// REP_STOSD_32
    3464U,	// REP_STOSD_64
    3713U,	// REP_STOSQ_64
    3973U,	// REP_STOSW_32
    3973U,	// REP_STOSW_64
    5083U,	// RETIL
    5083U,	// RETIQ
    5083U,	// RETIW
    3919U,	// RETL
    3919U,	// RETQ
    3919U,	// RETW
    3204U,	// REX64_PREFIX
    1712706U,	// ROL16m1
    1581634U,	// ROL16mCL
    139842U,	// ROL16mi
    1708610U,	// ROL16r1
    1577538U,	// ROL16rCL
    2232898U,	// ROL16ri
    1720898U,	// ROL32m1
    1589826U,	// ROL32mCL
    148034U,	// ROL32mi
    1708610U,	// ROL32r1
    1577538U,	// ROL32rCL
    2232898U,	// ROL32ri
    1724994U,	// ROL64m1
    1593922U,	// ROL64mCL
    152130U,	// ROL64mi
    1708610U,	// ROL64r1
    1577538U,	// ROL64rCL
    2232898U,	// ROL64ri
    1729090U,	// ROL8m1
    1598018U,	// ROL8mCL
    156226U,	// ROL8mi
    1708610U,	// ROL8r1
    1577538U,	// ROL8rCL
    2232898U,	// ROL8ri
    1712937U,	// ROR16m1
    1581865U,	// ROR16mCL
    140073U,	// ROR16mi
    1708841U,	// ROR16r1
    1577769U,	// ROR16rCL
    2233129U,	// ROR16ri
    1721129U,	// ROR32m1
    1590057U,	// ROR32mCL
    148265U,	// ROR32mi
    1708841U,	// ROR32r1
    1577769U,	// ROR32rCL
    2233129U,	// ROR32ri
    1725225U,	// ROR64m1
    1594153U,	// ROR64mCL
    152361U,	// ROR64mi
    1708841U,	// ROR64r1
    1577769U,	// ROR64rCL
    2233129U,	// ROR64ri
    1729321U,	// ROR8m1
    1598249U,	// ROR8mCL
    156457U,	// ROR8mi
    1708841U,	// ROR8r1
    1577769U,	// ROR8rCL
    2233129U,	// ROR8ri
    440538223U,	// RORX32mi
    174199919U,	// RORX32ri
    444732527U,	// RORX64mi
    174199919U,	// RORX64ri
    3635U,	// RSM
    3539U,	// SAHF
    3412U,	// SALC
    1712915U,	// SAR16m1
    1581843U,	// SAR16mCL
    140051U,	// SAR16mi
    1708819U,	// SAR16r1
    1577747U,	// SAR16rCL
    2233107U,	// SAR16ri
    1721107U,	// SAR32m1
    1590035U,	// SAR32mCL
    148243U,	// SAR32mi
    1708819U,	// SAR32r1
    1577747U,	// SAR32rCL
    2233107U,	// SAR32ri
    1725203U,	// SAR64m1
    1594131U,	// SAR64mCL
    152339U,	// SAR64mi
    1708819U,	// SAR64r1
    1577747U,	// SAR64rCL
    2233107U,	// SAR64ri
    1729299U,	// SAR8m1
    1598227U,	// SAR8mCL
    156435U,	// SAR8mi
    1708819U,	// SAR8r1
    1577747U,	// SAR8rCL
    2233107U,	// SAR8ri
    440538211U,	// SARX32rm
    174199907U,	// SARX32rr
    444732515U,	// SARX64rm
    174199907U,	// SARX64rr
    5395U,	// SBB16i16
    139341U,	// SBB16mi
    139341U,	// SBB16mi8
    139341U,	// SBB16mr
    274509U,	// SBB16ri
    274509U,	// SBB16ri8
    405581U,	// SBB16rm
    274509U,	// SBB16rr
    2232397U,	// SBB16rr_REV
    5529U,	// SBB32i32
    147533U,	// SBB32mi
    147533U,	// SBB32mi8
    147533U,	// SBB32mr
    274509U,	// SBB32ri
    274509U,	// SBB32ri8
    536653U,	// SBB32rm
    274509U,	// SBB32rr
    2232397U,	// SBB32rr_REV
    5677U,	// SBB64i32
    151629U,	// SBB64mi32
    151629U,	// SBB64mi8
    151629U,	// SBB64mr
    274509U,	// SBB64ri32
    274509U,	// SBB64ri8
    667725U,	// SBB64rm
    274509U,	// SBB64rr
    2232397U,	// SBB64rr_REV
    5271U,	// SBB8i8
    155725U,	// SBB8mi
    155725U,	// SBB8mr
    274509U,	// SBB8ri
    798797U,	// SBB8rm
    274509U,	// SBB8rr
    2232397U,	// SBB8rr_REV
    58755U,	// SCAS16
    62923U,	// SCAS32
    120436U,	// SCAS64
    66720U,	// SCAS8
    3853U,	// SEG_ALLOCA_32
    3853U,	// SEG_ALLOCA_64
    24844U,	// SETAEm
    4364U,	// SETAEr
    24617U,	// SETAm
    4137U,	// SETAr
    24864U,	// SETBEm
    4384U,	// SETBEr
    0U,	// SETB_C16r
    0U,	// SETB_C32r
    0U,	// SETB_C64r
    0U,	// SETB_C8r
    24689U,	// SETBm
    4209U,	// SETBr
    24998U,	// SETEm
    4518U,	// SETEr
    24884U,	// SETGEm
    4404U,	// SETGEr
    25055U,	// SETGm
    4575U,	// SETGr
    24908U,	// SETLEm
    4428U,	// SETLEr
    25170U,	// SETLm
    4690U,	// SETLr
    24936U,	// SETNEm
    4456U,	// SETNEr
    25209U,	// SETNOm
    4729U,	// SETNOr
    25270U,	// SETNPm
    4790U,	// SETNPr
    25485U,	// SETNSm
    5005U,	// SETNSr
    25224U,	// SETOm
    4744U,	// SETOr
    25301U,	// SETPm
    4821U,	// SETPr
    25510U,	// SETSm
    5030U,	// SETSr
    54205U,	// SGDT16m
    54205U,	// SGDT32m
    54205U,	// SGDT64m
    1712672U,	// SHL16m1
    1581600U,	// SHL16mCL
    139808U,	// SHL16mi
    1708576U,	// SHL16r1
    1577504U,	// SHL16rCL
    2232864U,	// SHL16ri
    1720864U,	// SHL32m1
    1589792U,	// SHL32mCL
    148000U,	// SHL32mi
    1708576U,	// SHL32r1
    1577504U,	// SHL32rCL
    2232864U,	// SHL32ri
    1724960U,	// SHL64m1
    1593888U,	// SHL64mCL
    152096U,	// SHL64mi
    1708576U,	// SHL64r1
    1577504U,	// SHL64rCL
    2232864U,	// SHL64ri
    1729056U,	// SHL8m1
    1597984U,	// SHL8mCL
    156192U,	// SHL8mi
    1708576U,	// SHL8r1
    1577504U,	// SHL8rCL
    2232864U,	// SHL8ri
    100802761U,	// SHLD16mrCL
    436347081U,	// SHLD16mri8
    102895817U,	// SHLD16rrCL
    572657865U,	// SHLD16rri8
    100810953U,	// SHLD32mrCL
    436355273U,	// SHLD32mri8
    102895817U,	// SHLD32rrCL
    572657865U,	// SHLD32rri8
    100815049U,	// SHLD64mrCL
    436359369U,	// SHLD64mri8
    102895817U,	// SHLD64rrCL
    572657865U,	// SHLD64rri8
    440538193U,	// SHLX32rm
    174199889U,	// SHLX32rr
    444732497U,	// SHLX64rm
    174199889U,	// SHLX64rr
    1712932U,	// SHR16m1
    1581860U,	// SHR16mCL
    140068U,	// SHR16mi
    1708836U,	// SHR16r1
    1577764U,	// SHR16rCL
    2233124U,	// SHR16ri
    1721124U,	// SHR32m1
    1590052U,	// SHR32mCL
    148260U,	// SHR32mi
    1708836U,	// SHR32r1
    1577764U,	// SHR32rCL
    2233124U,	// SHR32ri
    1725220U,	// SHR64m1
    1594148U,	// SHR64mCL
    152356U,	// SHR64mi
    1708836U,	// SHR64r1
    1577764U,	// SHR64rCL
    2233124U,	// SHR64ri
    1729316U,	// SHR8m1
    1598244U,	// SHR8mCL
    156452U,	// SHR8mi
    1708836U,	// SHR8r1
    1577764U,	// SHR8rCL
    2233124U,	// SHR8ri
    100802782U,	// SHRD16mrCL
    436347102U,	// SHRD16mri8
    102895838U,	// SHRD16rrCL
    572657886U,	// SHRD16rri8
    100810974U,	// SHRD32mrCL
    436355294U,	// SHRD32mri8
    102895838U,	// SHRD32rrCL
    572657886U,	// SHRD32rri8
    100815070U,	// SHRD64mrCL
    436359390U,	// SHRD64mri8
    102895838U,	// SHRD64rrCL
    572657886U,	// SHRD64rri8
    440538217U,	// SHRX32rm
    174199913U,	// SHRX32rr
    444732521U,	// SHRX64rm
    174199913U,	// SHRX64rr
    54217U,	// SIDT16m
    54217U,	// SIDT32m
    54217U,	// SIDT64m
    9173U,	// SLDT16m
    5077U,	// SLDT16r
    5077U,	// SLDT32r
    9173U,	// SLDT64m
    5077U,	// SLDT64r
    9258U,	// SMSW16m
    5162U,	// SMSW16r
    5162U,	// SMSW32r
    5162U,	// SMSW64r
    3903U,	// SS_PREFIX
    3390U,	// STAC
    3437U,	// STC
    3490U,	// STD
    3564U,	// STI
    1507420U,	// STOSB
    1241322U,	// STOSL
    1430265U,	// STOSQ
    1106998U,	// STOSW
    4950U,	// STR16r
    4950U,	// STR32r
    4950U,	// STR64r
    9046U,	// STRm
    5404U,	// SUB16i16
    139383U,	// SUB16mi
    139383U,	// SUB16mi8
    139383U,	// SUB16mr
    274551U,	// SUB16ri
    274551U,	// SUB16ri8
    405623U,	// SUB16rm
    274551U,	// SUB16rr
    2232439U,	// SUB16rr_REV
    5539U,	// SUB32i32
    147575U,	// SUB32mi
    147575U,	// SUB32mi8
    147575U,	// SUB32mr
    274551U,	// SUB32ri
    274551U,	// SUB32ri8
    536695U,	// SUB32rm
    274551U,	// SUB32rr
    2232439U,	// SUB32rr_REV
    5687U,	// SUB64i32
    151671U,	// SUB64mi32
    151671U,	// SUB64mi8
    151671U,	// SUB64mr
    274551U,	// SUB64ri32
    274551U,	// SUB64ri8
    667767U,	// SUB64rm
    274551U,	// SUB64rr
    2232439U,	// SUB64rr_REV
    5302U,	// SUB8i8
    155767U,	// SUB8mi
    155767U,	// SUB8mr
    274551U,	// SUB8ri
    798839U,	// SUB8rm
    274551U,	// SUB8rr
    2232439U,	// SUB8rr_REV
    3846U,	// SWAPGS
    3612U,	// SYSCALL
    3739U,	// SYSENTER
    3930U,	// SYSEXIT
    3930U,	// SYSEXIT64
    3923U,	// SYSRET
    3923U,	// SYSRET64
    4329627U,	// T1MSKC32rm
    6426779U,	// T1MSKC32rr
    8523931U,	// T1MSKC64rm
    6426779U,	// T1MSKC64rr
    1864364U,	// TAILJMPd
    1864364U,	// TAILJMPd64
    1852076U,	// TAILJMPm
    1856172U,	// TAILJMPm64
    0U,	// TAILJMPr
    1839788U,	// TAILJMPr64
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi64
    0U,	// TCRETURNmi
    0U,	// TCRETURNmi64
    0U,	// TCRETURNri
    0U,	// TCRETURNri64
    5488U,	// TEST16i16
    140290U,	// TEST16mi
    6427650U,	// TEST16ri
    10621954U,	// TEST16rm
    6427650U,	// TEST16rr
    5656U,	// TEST32i32
    148482U,	// TEST32mi
    6427650U,	// TEST32ri
    4330498U,	// TEST32rm
    6427650U,	// TEST32rr
    5795U,	// TEST64i32
    152578U,	// TEST64mi32
    6427650U,	// TEST64ri32
    8524802U,	// TEST64rm
    6427650U,	// TEST64rr
    5376U,	// TEST8i8
    156674U,	// TEST8mi
    6427650U,	// TEST8ri
    0U,	// TEST8ri_NOREX
    19010562U,	// TEST8rm
    6427650U,	// TEST8rr
    3070U,	// TLSCall_32
    3160U,	// TLSCall_64
    3083U,	// TLS_addr32
    3173U,	// TLS_addr64
    3096U,	// TLS_base_addr32
    3186U,	// TLS_base_addr64
    3114U,	// TRAP
    10621927U,	// TZCNT16rm
    6427623U,	// TZCNT16rr
    4330471U,	// TZCNT32rm
    6427623U,	// TZCNT32rr
    8524775U,	// TZCNT64rm
    6427623U,	// TZCNT64rr
    4330004U,	// TZMSK32rm
    6427156U,	// TZMSK32rr
    8524308U,	// TZMSK64rm
    6427156U,	// TZMSK64rr
    3324U,	// UD2B
    1528960719U,	// VAARG_64
    174200561U,	// VASTART_SAVE_XMM_REGS
    9019U,	// VERRm
    4923U,	// VERRr
    9246U,	// VERWm
    5150U,	// VERWr
    29226U,	// W64ALLOCA
    3494U,	// WBINVD
    3639U,	// WIN_ALLOCA
    3568U,	// WIN_FTOL_32
    3568U,	// WIN_FTOL_64
    4488U,	// WRFSBASE
    4488U,	// WRFSBASE64
    4508U,	// WRGSBASE
    4508U,	// WRGSBASE64
    3754U,	// WRMSR
    139442U,	// XADD16rm
    6426802U,	// XADD16rr
    147634U,	// XADD32rm
    6426802U,	// XADD32rr
    151730U,	// XADD64rm
    6426802U,	// XADD64rr
    155826U,	// XADD8rm
    6426802U,	// XADD8rr
    5440U,	// XCHG16ar
    86477U,	// XCHG16rm
    123341U,	// XCHG16rr
    5603U,	// XCHG32ar
    5603U,	// XCHG32ar64
    90573U,	// XCHG32rm
    123341U,	// XCHG32rr
    5727U,	// XCHG64ar
    94669U,	// XCHG64rm
    123341U,	// XCHG64rr
    98765U,	// XCHG8rm
    123341U,	// XCHG8rr
    3395U,	// XCRYPTCBC
    3339U,	// XCRYPTCFB
    3760U,	// XCRYPTCTR
    3329U,	// XCRYPTECB
    3349U,	// XCRYPTOFB
    3942U,	// XGETBV
    3379U,	// XLAT
    5467U,	// XOR16i16
    140086U,	// XOR16mi
    140086U,	// XOR16mi8
    140086U,	// XOR16mr
    275254U,	// XOR16ri
    275254U,	// XOR16ri8
    406326U,	// XOR16rm
    275254U,	// XOR16rr
    2233142U,	// XOR16rr_REV
    5633U,	// XOR32i32
    148278U,	// XOR32mi
    148278U,	// XOR32mi8
    148278U,	// XOR32mr
    275254U,	// XOR32ri
    275254U,	// XOR32ri8
    537398U,	// XOR32rm
    275254U,	// XOR32rr
    2233142U,	// XOR32rr_REV
    5772U,	// XOR64i32
    152374U,	// XOR64mi32
    152374U,	// XOR64mi8
    152374U,	// XOR64mr
    275254U,	// XOR64ri32
    275254U,	// XOR64ri8
    668470U,	// XOR64rm
    275254U,	// XOR64rr
    2233142U,	// XOR64rr_REV
    5355U,	// XOR8i8
    156470U,	// XOR8mi
    156470U,	// XOR8mr
    275254U,	// XOR8ri
    799542U,	// XOR8rm
    275254U,	// XOR8rr
    2233142U,	// XOR8rr_REV
    54062U,	// XRSTOR
    53258U,	// XRSTOR64
    53676U,	// XSAVE
    53249U,	// XSAVE64
    54264U,	// XSAVEOPT
    53268U,	// XSAVEOPT64
    3949U,	// XSETBV
    3022U,	// XSHA1
    3217U,	// XSHA256
    3521U,	// XSTORE
    0U
  };


#ifndef CAPSTONE_DIET
  static char AsmStrs[] = {
  /* 0 */ 'x', 's', 'a', 'v', 'e', '6', '4', 9, 0,
  /* 9 */ 'x', 'r', 's', 't', 'o', 'r', '6', '4', 9, 0,
  /* 19 */ 'x', 's', 'a', 'v', 'e', 'o', 'p', 't', '6', '4', 9, 0,
  /* 31 */ 'l', 'e', 'a', 9, 0,
  /* 36 */ 'j', 'a', 9, 0,
  /* 40 */ 's', 'e', 't', 'a', 9, 0,
  /* 46 */ 'c', 'm', 'o', 'v', 'a', 9, 0,
  /* 53 */ 'c', 'm', 'p', 'x', 'c', 'h', 'g', '1', '6', 'b', 9, 0,
  /* 65 */ 'c', 'm', 'p', 'x', 'c', 'h', 'g', '8', 'b', 9, 0,
  /* 76 */ 's', 'b', 'b', 9, 0,
  /* 81 */ 'j', 'b', 9, 0,
  /* 85 */ 'i', 'n', 's', 'b', 9, 0,
  /* 91 */ 's', 't', 'o', 's', 'b', 9, 0,
  /* 98 */ 'c', 'm', 'p', 's', 'b', 9, 0,
  /* 105 */ 'm', 'o', 'v', 's', 'b', 9, 0,
  /* 112 */ 's', 'e', 't', 'b', 9, 0,
  /* 118 */ 's', 'u', 'b', 9, 0,
  /* 123 */ 'c', 'm', 'o', 'v', 'b', 9, 0,
  /* 130 */ 'a', 'd', 'c', 9, 0,
  /* 135 */ 'd', 'e', 'c', 9, 0,
  /* 140 */ 'b', 'l', 'c', 'i', 'c', 9, 0,
  /* 147 */ 'b', 'l', 's', 'i', 'c', 9, 0,
  /* 154 */ 't', '1', 'm', 's', 'k', 'c', 9, 0,
  /* 162 */ 'i', 'n', 'c', 9, 0,
  /* 167 */ 'b', 't', 'c', 9, 0,
  /* 172 */ 'a', 'a', 'd', 9, 0,
  /* 177 */ 'x', 'a', 'd', 'd', 9, 0,
  /* 183 */ 'r', 'd', 's', 'e', 'e', 'd', 9, 0,
  /* 191 */ 'i', 'n', 'v', 'p', 'c', 'i', 'd', 9, 0,
  /* 200 */ 's', 'h', 'l', 'd', 9, 0,
  /* 206 */ 'r', 'd', 'r', 'a', 'n', 'd', 9, 0,
  /* 214 */ 'b', 'o', 'u', 'n', 'd', 9, 0,
  /* 221 */ 's', 'h', 'r', 'd', 9, 0,
  /* 227 */ 'i', 'n', 's', 'd', 9, 0,
  /* 233 */ 's', 't', 'o', 's', 'd', 9, 0,
  /* 240 */ 'c', 'm', 'p', 's', 'd', 9, 0,
  /* 247 */ 'm', 'o', 'v', 's', 'd', 9, 0,
  /* 254 */ 'm', 'o', 'v', 's', 'x', 'd', 9, 0,
  /* 262 */ 'j', 'a', 'e', 9, 0,
  /* 267 */ 's', 'e', 't', 'a', 'e', 9, 0,
  /* 274 */ 'c', 'm', 'o', 'v', 'a', 'e', 9, 0,
  /* 282 */ 'j', 'b', 'e', 9, 0,
  /* 287 */ 's', 'e', 't', 'b', 'e', 9, 0,
  /* 294 */ 'c', 'm', 'o', 'v', 'b', 'e', 9, 0,
  /* 302 */ 'j', 'g', 'e', 9, 0,
  /* 307 */ 's', 'e', 't', 'g', 'e', 9, 0,
  /* 314 */ 'c', 'm', 'o', 'v', 'g', 'e', 9, 0,
  /* 322 */ 'j', 'e', 9, 0,
  /* 326 */ 'j', 'l', 'e', 9, 0,
  /* 331 */ 's', 'e', 't', 'l', 'e', 9, 0,
  /* 338 */ 'c', 'm', 'o', 'v', 'l', 'e', 9, 0,
  /* 346 */ 'j', 'n', 'e', 9, 0,
  /* 351 */ 'l', 'o', 'o', 'p', 'n', 'e', 9, 0,
  /* 359 */ 's', 'e', 't', 'n', 'e', 9, 0,
  /* 366 */ 'c', 'm', 'o', 'v', 'n', 'e', 9, 0,
  /* 374 */ 'l', 'o', 'o', 'p', 'e', 9, 0,
  /* 381 */ 'r', 'd', 'f', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 391 */ 'w', 'r', 'f', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 401 */ 'r', 'd', 'g', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 411 */ 'w', 'r', 'g', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 421 */ 's', 'e', 't', 'e', 9, 0,
  /* 427 */ 'x', 's', 'a', 'v', 'e', 9, 0,
  /* 434 */ 'c', 'm', 'o', 'v', 'e', 9, 0,
  /* 441 */ 'b', 's', 'f', 9, 0,
  /* 446 */ 'r', 'e', 't', 'f', 9, 0,
  /* 452 */ 'n', 'e', 'g', 9, 0,
  /* 457 */ 'c', 'm', 'p', 'x', 'c', 'h', 'g', 9, 0,
  /* 466 */ 'j', 'g', 9, 0,
  /* 470 */ 'i', 'n', 'v', 'l', 'p', 'g', 9, 0,
  /* 478 */ 's', 'e', 't', 'g', 9, 0,
  /* 484 */ 'c', 'm', 'o', 'v', 'g', 9, 0,
  /* 491 */ 'p', 'u', 's', 'h', 9, 0,
  /* 497 */ 'b', 'l', 'c', 'i', 9, 0,
  /* 503 */ 'b', 'z', 'h', 'i', 9, 0,
  /* 509 */ 'b', 'l', 's', 'i', 9, 0,
  /* 515 */ 'b', 'l', 'c', 'm', 's', 'k', 9, 0,
  /* 523 */ 'b', 'l', 's', 'm', 's', 'k', 9, 0,
  /* 531 */ 't', 'z', 'm', 's', 'k', 9, 0,
  /* 538 */ 'r', 'c', 'l', 9, 0,
  /* 543 */ 's', 'h', 'l', 9, 0,
  /* 548 */ 'j', 'l', 9, 0,
  /* 552 */ 'l', 'c', 'a', 'l', 'l', 9, 0,
  /* 559 */ 'b', 'l', 'c', 'f', 'i', 'l', 'l', 9, 0,
  /* 568 */ 'b', 'l', 's', 'f', 'i', 'l', 'l', 9, 0,
  /* 577 */ 'r', 'o', 'l', 9, 0,
  /* 582 */ 'a', 'r', 'p', 'l', 9, 0,
  /* 588 */ 'l', 's', 'l', 9, 0,
  /* 593 */ 's', 'e', 't', 'l', 9, 0,
  /* 599 */ 'i', 'm', 'u', 'l', 9, 0,
  /* 605 */ 'c', 'm', 'o', 'v', 'l', 9, 0,
  /* 612 */ 'a', 'a', 'm', 9, 0,
  /* 617 */ 'a', 'n', 'd', 'n', 9, 0,
  /* 623 */ 'j', 'o', 9, 0,
  /* 627 */ 'j', 'n', 'o', 9, 0,
  /* 632 */ 's', 'e', 't', 'n', 'o', 9, 0,
  /* 639 */ 'c', 'm', 'o', 'v', 'n', 'o', 9, 0,
  /* 647 */ 's', 'e', 't', 'o', 9, 0,
  /* 653 */ 'c', 'm', 'o', 'v', 'o', 9, 0,
  /* 660 */ 'b', 's', 'w', 'a', 'p', 9, 0,
  /* 667 */ 'p', 'd', 'e', 'p', 9, 0,
  /* 673 */ 'j', 'p', 9, 0,
  /* 677 */ 'c', 'm', 'p', 9, 0,
  /* 682 */ 'l', 'j', 'm', 'p', 9, 0,
  /* 688 */ 'j', 'n', 'p', 9, 0,
  /* 693 */ 's', 'e', 't', 'n', 'p', 9, 0,
  /* 700 */ 'c', 'm', 'o', 'v', 'n', 'p', 9, 0,
  /* 708 */ 'n', 'o', 'p', 9, 0,
  /* 713 */ 'l', 'o', 'o', 'p', 9, 0,
  /* 719 */ 'p', 'o', 'p', 9, 0,
  /* 724 */ 's', 'e', 't', 'p', 9, 0,
  /* 730 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 746 */ 'c', 'm', 'o', 'v', 'p', 9, 0,
  /* 753 */ 'r', 'e', 't', 'f', 'q', 9, 0,
  /* 760 */ 's', 't', 'o', 's', 'q', 9, 0,
  /* 767 */ 'c', 'm', 'p', 's', 'q', 9, 0,
  /* 774 */ 'm', 'o', 'v', 's', 'q', 9, 0,
  /* 781 */ 'l', 'a', 'r', 9, 0,
  /* 786 */ 's', 'a', 'r', 9, 0,
  /* 791 */ 'r', 'c', 'r', 9, 0,
  /* 796 */ 'e', 'n', 't', 'e', 'r', 9, 0,
  /* 803 */ 's', 'h', 'r', 9, 0,
  /* 808 */ 'r', 'o', 'r', 9, 0,
  /* 813 */ 'x', 'r', 's', 't', 'o', 'r', 9, 0,
  /* 821 */ 'x', 'o', 'r', 9, 0,
  /* 826 */ 'v', 'e', 'r', 'r', 9, 0,
  /* 832 */ 'b', 's', 'r', 9, 0,
  /* 837 */ 'b', 'l', 's', 'r', 9, 0,
  /* 843 */ 'b', 't', 'r', 9, 0,
  /* 848 */ 'l', 't', 'r', 9, 0,
  /* 853 */ 's', 't', 'r', 9, 0,
  /* 858 */ 'b', 'e', 'x', 't', 'r', 9, 0,
  /* 865 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 0,
  /* 873 */ 'b', 'l', 'c', 's', 9, 0,
  /* 879 */ 'l', 'd', 's', 9, 0,
  /* 884 */ 'l', 'e', 's', 9, 0,
  /* 889 */ 'l', 'f', 's', 9, 0,
  /* 894 */ 'l', 'g', 's', 9, 0,
  /* 899 */ 'j', 's', 9, 0,
  /* 903 */ 'j', 'n', 's', 9, 0,
  /* 908 */ 's', 'e', 't', 'n', 's', 9, 0,
  /* 915 */ 'c', 'm', 'o', 'v', 'n', 's', 9, 0,
  /* 923 */ 'l', 's', 's', 9, 0,
  /* 928 */ 'b', 't', 's', 9, 0,
  /* 933 */ 's', 'e', 't', 's', 9, 0,
  /* 939 */ 'c', 'm', 'o', 'v', 's', 9, 0,
  /* 946 */ 'b', 't', 9, 0,
  /* 950 */ 'l', 'g', 'd', 't', 9, 0,
  /* 956 */ 's', 'g', 'd', 't', 9, 0,
  /* 962 */ 'l', 'i', 'd', 't', 9, 0,
  /* 968 */ 's', 'i', 'd', 't', 9, 0,
  /* 974 */ 'l', 'l', 'd', 't', 9, 0,
  /* 980 */ 's', 'l', 'd', 't', 9, 0,
  /* 986 */ 'r', 'e', 't', 9, 0,
  /* 991 */ 'l', 'z', 'c', 'n', 't', 9, 0,
  /* 998 */ 't', 'z', 'c', 'n', 't', 9, 0,
  /* 1005 */ 'i', 'n', 't', 9, 0,
  /* 1010 */ 'n', 'o', 't', 9, 0,
  /* 1015 */ 'x', 's', 'a', 'v', 'e', 'o', 'p', 't', 9, 0,
  /* 1025 */ 't', 'e', 's', 't', 9, 0,
  /* 1031 */ 'o', 'u', 't', 9, 0,
  /* 1036 */ 'p', 'e', 'x', 't', 9, 0,
  /* 1042 */ 'i', 'd', 'i', 'v', 9, 0,
  /* 1048 */ 'm', 'o', 'v', 9, 0,
  /* 1053 */ 'v', 'e', 'r', 'w', 9, 0,
  /* 1059 */ 'l', 'm', 's', 'w', 9, 0,
  /* 1065 */ 's', 'm', 's', 'w', 9, 0,
  /* 1071 */ 'i', 'n', 's', 'w', 9, 0,
  /* 1077 */ 's', 't', 'o', 's', 'w', 9, 0,
  /* 1084 */ 'c', 'm', 'p', 's', 'w', 9, 0,
  /* 1091 */ 'm', 'o', 'v', 's', 'w', 9, 0,
  /* 1098 */ 'a', 'd', 'c', 'x', 9, 0,
  /* 1104 */ 's', 'h', 'l', 'x', 9, 0,
  /* 1110 */ 'm', 'u', 'l', 'x', 9, 0,
  /* 1116 */ 'a', 'd', 'o', 'x', 9, 0,
  /* 1122 */ 's', 'a', 'r', 'x', 9, 0,
  /* 1128 */ 's', 'h', 'r', 'x', 9, 0,
  /* 1134 */ 'r', 'o', 'r', 'x', 9, 0,
  /* 1140 */ 'm', 'o', 'v', 's', 'x', 9, 0,
  /* 1147 */ 'm', 'o', 'v', 'z', 'x', 9, 0,
  /* 1154 */ 'j', 'e', 'c', 'x', 'z', 9, 0,
  /* 1161 */ 'j', 'c', 'x', 'z', 9, 0,
  /* 1167 */ 'j', 'r', 'c', 'x', 'z', 9, 0,
  /* 1174 */ 's', 'b', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1183 */ 's', 'c', 'a', 's', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1194 */ 'l', 'o', 'd', 's', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1205 */ 's', 'u', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1214 */ 'a', 'd', 'c', 9, 'a', 'l', ',', 32, 0,
  /* 1223 */ 'a', 'd', 'd', 9, 'a', 'l', ',', 32, 0,
  /* 1232 */ 'a', 'n', 'd', 9, 'a', 'l', ',', 32, 0,
  /* 1241 */ 'i', 'n', 9, 'a', 'l', ',', 32, 0,
  /* 1249 */ 'c', 'm', 'p', 9, 'a', 'l', ',', 32, 0,
  /* 1258 */ 'x', 'o', 'r', 9, 'a', 'l', ',', 32, 0,
  /* 1267 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'a', 'l', ',', 32, 0,
  /* 1279 */ 't', 'e', 's', 't', 9, 'a', 'l', ',', 32, 0,
  /* 1289 */ 'm', 'o', 'v', 9, 'a', 'l', ',', 32, 0,
  /* 1298 */ 's', 'b', 'b', 9, 'a', 'x', ',', 32, 0,
  /* 1307 */ 's', 'u', 'b', 9, 'a', 'x', ',', 32, 0,
  /* 1316 */ 'a', 'd', 'c', 9, 'a', 'x', ',', 32, 0,
  /* 1325 */ 'a', 'd', 'd', 9, 'a', 'x', ',', 32, 0,
  /* 1334 */ 'a', 'n', 'd', 9, 'a', 'x', ',', 32, 0,
  /* 1343 */ 'x', 'c', 'h', 'g', 9, 'a', 'x', ',', 32, 0,
  /* 1353 */ 'i', 'n', 9, 'a', 'x', ',', 32, 0,
  /* 1361 */ 'c', 'm', 'p', 9, 'a', 'x', ',', 32, 0,
  /* 1370 */ 'x', 'o', 'r', 9, 'a', 'x', ',', 32, 0,
  /* 1379 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'a', 'x', ',', 32, 0,
  /* 1391 */ 't', 'e', 's', 't', 9, 'a', 'x', ',', 32, 0,
  /* 1401 */ 'm', 'o', 'v', 9, 'a', 'x', ',', 32, 0,
  /* 1410 */ 's', 'c', 'a', 's', 'w', 9, 'a', 'x', ',', 32, 0,
  /* 1421 */ 'l', 'o', 'd', 's', 'w', 9, 'a', 'x', ',', 32, 0,
  /* 1432 */ 's', 'b', 'b', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1442 */ 's', 'u', 'b', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1452 */ 'a', 'd', 'c', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1462 */ 'a', 'd', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1472 */ 'a', 'n', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1482 */ 's', 'c', 'a', 's', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1494 */ 'l', 'o', 'd', 's', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1506 */ 'x', 'c', 'h', 'g', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1517 */ 'i', 'n', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1526 */ 'c', 'm', 'p', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1536 */ 'x', 'o', 'r', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1546 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1559 */ 't', 'e', 's', 't', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1570 */ 'm', 'o', 'v', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1580 */ 's', 'b', 'b', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1590 */ 's', 'u', 'b', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1600 */ 'a', 'd', 'c', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1610 */ 'a', 'd', 'd', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1620 */ 'a', 'n', 'd', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1630 */ 'x', 'c', 'h', 'g', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1641 */ 'c', 'm', 'p', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1651 */ 's', 'c', 'a', 's', 'q', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1663 */ 'l', 'o', 'd', 's', 'q', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1675 */ 'x', 'o', 'r', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1685 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1698 */ 't', 'e', 's', 't', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1709 */ 'o', 'u', 't', 's', 'b', 9, 'd', 'x', ',', 32, 0,
  /* 1720 */ 'o', 'u', 't', 's', 'd', 9, 'd', 'x', ',', 32, 0,
  /* 1731 */ 'o', 'u', 't', 's', 'w', 9, 'd', 'x', ',', 32, 0,
  /* 1742 */ '#', 'V', 'A', 'A', 'R', 'G', '_', '6', '4', 32, 0,
  /* 1753 */ 'r', 'e', 't', 9, '#', 'e', 'h', '_', 'r', 'e', 't', 'u', 'r', 'n', ',', 32, 'a', 'd', 'd', 'r', ':', 32, 0,
  /* 1776 */ '#', 'V', 'A', 'S', 'T', 'A', 'R', 'T', '_', 'S', 'A', 'V', 'E', '_', 'X', 'M', 'M', '_', 'R', 'E', 'G', 'S', 32, 0,
  /* 1800 */ '#', 'C', 'M', 'O', 'V', '_', 'G', 'R', '3', '2', '*', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1820 */ '#', 'C', 'M', 'O', 'V', '_', 'G', 'R', '1', '6', '*', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1840 */ '#', 'C', 'M', 'O', 'V', '_', 'R', 'F', 'P', '8', '0', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1860 */ '#', 'A', 'T', 'O', 'M', 'S', 'U', 'B', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1881 */ '#', 'A', 'T', 'O', 'M', 'A', 'D', 'D', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1902 */ '#', 'A', 'T', 'O', 'M', 'A', 'N', 'D', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1923 */ '#', 'A', 'T', 'O', 'M', 'N', 'A', 'N', 'D', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1945 */ '#', 'A', 'T', 'O', 'M', 'M', 'I', 'N', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1966 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'I', 'N', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 1988 */ '#', 'A', 'T', 'O', 'M', 'S', 'W', 'A', 'P', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2010 */ '#', 'A', 'T', 'O', 'M', 'O', 'R', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2030 */ '#', 'A', 'T', 'O', 'M', 'X', 'O', 'R', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2051 */ '#', 'A', 'T', 'O', 'M', 'M', 'A', 'X', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2072 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'A', 'X', '6', '4', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2094 */ '#', 'A', 'T', 'O', 'M', 'A', 'N', 'D', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2113 */ '#', 'A', 'T', 'O', 'M', 'N', 'A', 'N', 'D', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2133 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '4', 'F', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2153 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '1', '6', 'F', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2174 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '8', 'F', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2194 */ '#', 'A', 'T', 'O', 'M', 'M', 'I', 'N', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2213 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'I', 'N', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2233 */ '#', 'C', 'M', 'O', 'V', '_', 'R', 'F', 'P', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2253 */ '#', 'C', 'M', 'O', 'V', '_', 'F', 'R', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2272 */ '#', 'A', 'T', 'O', 'M', 'O', 'R', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2290 */ '#', 'A', 'T', 'O', 'M', 'X', 'O', 'R', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2309 */ '#', 'A', 'T', 'O', 'M', 'M', 'A', 'X', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2328 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'A', 'X', '3', '2', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2348 */ '#', 'A', 'T', 'O', 'M', 'A', 'N', 'D', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2367 */ '#', 'A', 'T', 'O', 'M', 'N', 'A', 'N', 'D', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2387 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '2', 'F', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2407 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '4', 'F', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2427 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '8', 'F', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2447 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '2', 'I', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2467 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '4', 'I', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2487 */ '#', 'C', 'M', 'O', 'V', '_', 'V', '8', 'I', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2507 */ '#', 'A', 'T', 'O', 'M', 'M', 'I', 'N', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2526 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'I', 'N', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2546 */ '#', 'C', 'M', 'O', 'V', '_', 'R', 'F', 'P', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2566 */ '#', 'C', 'M', 'O', 'V', '_', 'F', 'R', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2585 */ '#', 'A', 'T', 'O', 'M', 'O', 'R', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2603 */ '#', 'A', 'T', 'O', 'M', 'X', 'O', 'R', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2622 */ '#', 'A', 'T', 'O', 'M', 'M', 'A', 'X', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2641 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'A', 'X', '6', '4', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2661 */ '#', 'A', 'T', 'O', 'M', 'A', 'N', 'D', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2680 */ '#', 'A', 'T', 'O', 'M', 'N', 'A', 'N', 'D', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2700 */ '#', 'A', 'T', 'O', 'M', 'M', 'I', 'N', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2719 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'I', 'N', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2739 */ '#', 'A', 'T', 'O', 'M', 'O', 'R', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2757 */ '#', 'A', 'T', 'O', 'M', 'X', 'O', 'R', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2776 */ '#', 'A', 'T', 'O', 'M', 'M', 'A', 'X', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2795 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'A', 'X', '1', '6', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2815 */ '#', 'A', 'T', 'O', 'M', 'A', 'N', 'D', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2833 */ '#', 'A', 'T', 'O', 'M', 'N', 'A', 'N', 'D', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2852 */ '#', 'A', 'T', 'O', 'M', 'M', 'I', 'N', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2870 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'I', 'N', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2889 */ '#', 'C', 'M', 'O', 'V', '_', 'G', 'R', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2907 */ '#', 'A', 'T', 'O', 'M', 'O', 'R', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2924 */ '#', 'A', 'T', 'O', 'M', 'X', 'O', 'R', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2942 */ '#', 'A', 'T', 'O', 'M', 'M', 'A', 'X', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2960 */ '#', 'A', 'T', 'O', 'M', 'U', 'M', 'A', 'X', '8', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2979 */ '#', 'A', 'C', 'Q', 'U', 'I', 'R', 'E', '_', 'M', 'O', 'V', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 3000 */ '#', 'R', 'E', 'L', 'E', 'A', 'S', 'E', '_', 'M', 'O', 'V', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 3021 */ 'x', 's', 'h', 'a', '1', 0,
  /* 3027 */ 'i', 'n', 't', '1', 0,
  /* 3032 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 3051 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 3069 */ '#', 32, 'T', 'L', 'S', 'C', 'a', 'l', 'l', '_', '3', '2', 0,
  /* 3082 */ '#', 32, 'T', 'L', 'S', '_', 'a', 'd', 'd', 'r', '3', '2', 0,
  /* 3095 */ '#', 32, 'T', 'L', 'S', '_', 'b', 'a', 's', 'e', '_', 'a', 'd', 'd', 'r', '3', '2', 0,
  /* 3113 */ 'u', 'd', '2', 0,
  /* 3117 */ 'i', 'n', 't', '3', 0,
  /* 3122 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 3141 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 3159 */ '#', 32, 'T', 'L', 'S', 'C', 'a', 'l', 'l', '_', '6', '4', 0,
  /* 3172 */ '#', 32, 'T', 'L', 'S', '_', 'a', 'd', 'd', 'r', '6', '4', 0,
  /* 3185 */ '#', 32, 'T', 'L', 'S', '_', 'b', 'a', 's', 'e', '_', 'a', 'd', 'd', 'r', '6', '4', 0,
  /* 3203 */ 'r', 'e', 'x', '6', '4', 0,
  /* 3209 */ 'd', 'a', 't', 'a', '1', '6', 0,
  /* 3216 */ 'x', 's', 'h', 'a', '2', '5', '6', 0,
  /* 3224 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3237 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3244 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3254 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 3272 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 3288 */ '#', 'M', 'E', 'M', 'B', 'A', 'R', 'R', 'I', 'E', 'R', 0,
  /* 3300 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3315 */ 'a', 'a', 'a', 0,
  /* 3319 */ 'd', 'a', 'a', 0,
  /* 3323 */ 'u', 'd', '2', 'b', 0,
  /* 3328 */ 'x', 'c', 'r', 'y', 'p', 't', 'e', 'c', 'b', 0,
  /* 3338 */ 'x', 'c', 'r', 'y', 'p', 't', 'c', 'f', 'b', 0,
  /* 3348 */ 'x', 'c', 'r', 'y', 'p', 't', 'o', 'f', 'b', 0,
  /* 3358 */ 'r', 'e', 'p', 32, 's', 't', 'o', 's', 'b', 0,
  /* 3368 */ 'r', 'e', 'p', 32, 'm', 'o', 'v', 's', 'b', 0,
  /* 3378 */ 'x', 'l', 'a', 't', 'b', 0,
  /* 3384 */ 'c', 'l', 'a', 'c', 0,
  /* 3389 */ 's', 't', 'a', 'c', 0,
  /* 3394 */ 'x', 'c', 'r', 'y', 'p', 't', 'c', 'b', 'c', 0,
  /* 3404 */ 'g', 'e', 't', 's', 'e', 'c', 0,
  /* 3411 */ 's', 'a', 'l', 'c', 0,
  /* 3416 */ 'c', 'l', 'c', 0,
  /* 3420 */ 'c', 'm', 'c', 0,
  /* 3424 */ 'r', 'd', 'p', 'm', 'c', 0,
  /* 3430 */ 'r', 'd', 't', 's', 'c', 0,
  /* 3436 */ 's', 't', 'c', 0,
  /* 3440 */ 'p', 'u', 's', 'h', 'f', 'd', 0,
  /* 3447 */ 'p', 'o', 'p', 'f', 'd', 0,
  /* 3453 */ 'c', 'p', 'u', 'i', 'd', 0,
  /* 3459 */ 'c', 'l', 'd', 0,
  /* 3463 */ 'r', 'e', 'p', 32, 's', 't', 'o', 's', 'd', 0,
  /* 3473 */ 'r', 'e', 'p', 32, 'm', 'o', 'v', 's', 'd', 0,
  /* 3483 */ 'i', 'r', 'e', 't', 'd', 0,
  /* 3489 */ 's', 't', 'd', 0,
  /* 3493 */ 'w', 'b', 'i', 'n', 'v', 'd', 0,
  /* 3500 */ 'c', 'w', 'd', 0,
  /* 3504 */ 'c', 'w', 'd', 'e', 0,
  /* 3509 */ 'r', 'e', 'p', 'n', 'e', 0,
  /* 3515 */ 'c', 'd', 'q', 'e', 0,
  /* 3520 */ 'x', 's', 't', 'o', 'r', 'e', 0,
  /* 3527 */ 'l', 'e', 'a', 'v', 'e', 0,
  /* 3533 */ 'l', 'a', 'h', 'f', 0,
  /* 3538 */ 's', 'a', 'h', 'f', 0,
  /* 3543 */ 'p', 'u', 's', 'h', 'f', 0,
  /* 3549 */ 'p', 'o', 'p', 'f', 0,
  /* 3554 */ 'r', 'e', 't', 'f', 0,
  /* 3559 */ 'c', 'l', 'i', 0,
  /* 3563 */ 's', 't', 'i', 0,
  /* 3567 */ '#', 32, 'w', 'i', 'n', '3', '2', 32, 'f', 'p', 't', 'o', 'u', 'i', 0,
  /* 3582 */ 'l', 'o', 'c', 'k', 0,
  /* 3587 */ 'o', 'u', 't', 9, 'd', 'x', ',', 32, 'a', 'l', 0,
  /* 3598 */ 'p', 'u', 's', 'h', 'a', 'l', 0,
  /* 3605 */ 'p', 'o', 'p', 'a', 'l', 0,
  /* 3611 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 0,
  /* 3619 */ 'm', 'o', 'n', 't', 'm', 'u', 'l', 0,
  /* 3627 */ 'f', 's', 'e', 't', 'p', 'm', 0,
  /* 3634 */ 'r', 's', 'm', 0,
  /* 3638 */ '#', 32, 'd', 'y', 'n', 'a', 'm', 'i', 'c', 32, 's', 't', 'a', 'c', 'k', 32, 'a', 'l', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
  /* 3665 */ 'c', 'q', 'o', 0,
  /* 3669 */ 'i', 'n', 't', 'o', 0,
  /* 3674 */ 'r', 'd', 't', 's', 'c', 'p', 0,
  /* 3681 */ 'r', 'e', 'p', 0,
  /* 3685 */ 'n', 'o', 'p', 0,
  /* 3689 */ 'c', 'd', 'q', 0,
  /* 3693 */ 'p', 'u', 's', 'h', 'f', 'q', 0,
  /* 3700 */ 'p', 'o', 'p', 'f', 'q', 0,
  /* 3706 */ 'r', 'e', 't', 'f', 'q', 0,
  /* 3712 */ 'r', 'e', 'p', 32, 's', 't', 'o', 's', 'q', 0,
  /* 3722 */ 'r', 'e', 'p', 32, 'm', 'o', 'v', 's', 'q', 0,
  /* 3732 */ 'i', 'r', 'e', 't', 'q', 0,
  /* 3738 */ 's', 'y', 's', 'e', 'n', 't', 'e', 'r', 0,
  /* 3747 */ 'r', 'd', 'm', 's', 'r', 0,
  /* 3753 */ 'w', 'r', 'm', 's', 'r', 0,
  /* 3759 */ 'x', 'c', 'r', 'y', 'p', 't', 'c', 't', 'r', 0,
  /* 3769 */ 'a', 'a', 's', 0,
  /* 3773 */ 'd', 'a', 's', 0,
  /* 3777 */ 'p', 'u', 's', 'h', 9, 'c', 's', 0,
  /* 3785 */ 'p', 'u', 's', 'h', 9, 'd', 's', 0,
  /* 3793 */ 'p', 'o', 'p', 9, 'd', 's', 0,
  /* 3800 */ 'p', 'u', 's', 'h', 9, 'e', 's', 0,
  /* 3808 */ 'p', 'o', 'p', 9, 'e', 's', 0,
  /* 3815 */ 'p', 'u', 's', 'h', 9, 'f', 's', 0,
  /* 3823 */ 'p', 'o', 'p', 9, 'f', 's', 0,
  /* 3830 */ 'p', 'u', 's', 'h', 9, 'g', 's', 0,
  /* 3838 */ 'p', 'o', 'p', 9, 'g', 's', 0,
  /* 3845 */ 's', 'w', 'a', 'p', 'g', 's', 0,
  /* 3852 */ '#', 32, 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', 32, 's', 'i', 'z', 'e', 'd', 32, 'a', 'l', 'l', 'o', 'c', 'a', 32, 'f', 'o', 'r', 32, 's', 'e', 'g', 'm', 'e', 'n', 't', 'e', 'd', 32, 's', 't', 'a', 'c', 'k', 's', 0,
  /* 3897 */ 'p', 'u', 's', 'h', 9, 's', 's', 0,
  /* 3905 */ 'p', 'o', 'p', 9, 's', 's', 0,
  /* 3912 */ 'c', 'l', 't', 's', 0,
  /* 3917 */ 'i', 'r', 'e', 't', 0,
  /* 3922 */ 's', 'y', 's', 'r', 'e', 't', 0,
  /* 3929 */ 's', 'y', 's', 'e', 'x', 'i', 't', 0,
  /* 3937 */ 'h', 'l', 't', 0,
  /* 3941 */ 'x', 'g', 'e', 't', 'b', 'v', 0,
  /* 3948 */ 'x', 's', 'e', 't', 'b', 'v', 0,
  /* 3955 */ 'p', 'u', 's', 'h', 'a', 'w', 0,
  /* 3962 */ 'p', 'o', 'p', 'a', 'w', 0,
  /* 3968 */ 'c', 'b', 'w', 0,
  /* 3972 */ 'r', 'e', 'p', 32, 's', 't', 'o', 's', 'w', 0,
  /* 3982 */ 'r', 'e', 'p', 32, 'm', 'o', 'v', 's', 'w', 0,
  /* 3992 */ 'o', 'u', 't', 9, 'd', 'x', ',', 32, 'a', 'x', 0,
  /* 4003 */ 'o', 'u', 't', 9, 'd', 'x', ',', 32, 'e', 'a', 'x', 0,
  /* 4015 */ 'i', 'n', 9, 'a', 'l', ',', 32, 'd', 'x', 0,
  /* 4025 */ 'i', 'n', 9, 'a', 'x', ',', 32, 'd', 'x', 0,
  /* 4035 */ 'i', 'n', 9, 'e', 'a', 'x', ',', 32, 'd', 'x', 0,
  };
#endif

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MCInst_getOpcode(MI)];
  // assert(Bits != 0 && "Cannot print this instruction.");
#ifndef CAPSTONE_DIET
  SStream_concat(O, "%s", AsmStrs+(Bits & 4095)-1);
#endif


  // Fragment 0 encoded into 5 bits for 31 unique commands.
  //printf("Frag-0: %"PRIu64"\n", (Bits >> 12) & 31);
  switch ((Bits >> 12) & 31) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, AAA, AAS, ACQUIRE_MOV...
    return;
    break;
  case 1:
    // AAD8i8, AAM8i8, ADC16i16, ADC16rr_REV, ADC32i32, ADC32rr_REV, ADC64i32...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADC16mi, ADC16mi8, ADC16mr, ADD16mi, ADD16mi8, ADD16mr, AND16mi, AND16...
    printi16mem(MI, 0, O); 
    break;
  case 3:
    // ADC16ri, ADC16ri8, ADC16rm, ADC16rr, ADC32ri, ADC32ri8, ADC32rm, ADC32...
    printOperand(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    break;
  case 4:
    // ADC32mi, ADC32mi8, ADC32mr, ADD32mi, ADD32mi8, ADD32mr, AND32mi, AND32...
    printi32mem(MI, 0, O); 
    break;
  case 5:
    // ADC64mi32, ADC64mi8, ADC64mr, ADD64mi32, ADD64mi8, ADD64mr, AND64mi32,...
    printi64mem(MI, 0, O); 
    break;
  case 6:
    // ADC8mi, ADC8mr, ADD8mi, ADD8mr, AND8mi, AND8mr, CMP8mi, CMP8mr, CMPXCH...
    printi8mem(MI, 0, O); 
    break;
  case 7:
    // CALL64pcrel32, CALLpcrel16, CALLpcrel32, EH_SjLj_Setup, JAE_1, JAE_2, ...
    printPCRelImm(MI, 0, O); 
    break;
  case 8:
    // CMPS16
    printSrcIdx16(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printDstIdx16(MI, 0, O); 
    return;
    break;
  case 9:
    // CMPS32
    printSrcIdx32(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printDstIdx32(MI, 0, O); 
    return;
    break;
  case 10:
    // CMPS64
    printSrcIdx64(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printDstIdx64(MI, 0, O); 
    return;
    break;
  case 11:
    // CMPS8
    printSrcIdx8(MI, 1, O); 
    SStream_concat(O, "%s", ", "); 
    printDstIdx8(MI, 0, O); 
    return;
    break;
  case 12:
    // CMPXCHG16B, LCMPXCHG16B
    printi128mem(MI, 0, O); 
    return;
    break;
  case 13:
    // FARCALL16m, FARCALL32m, FARCALL64, FARJMP16m, FARJMP32m, FARJMP64, LGD...
    printopaquemem(MI, 0, O); 
    return;
    break;
  case 14:
    // IN16, MOVSW, SCAS16, STOSW
    printDstIdx16(MI, 0, O); 
    break;
  case 15:
    // IN32, MOVSL, SCAS32, STOSL
    printDstIdx32(MI, 0, O); 
    break;
  case 16:
    // IN8, MOVSB, SCAS8, STOSB
    printDstIdx8(MI, 0, O); 
    break;
  case 17:
    // LODSB, OUTSB
    printSrcIdx8(MI, 0, O); 
    return;
    break;
  case 18:
    // LODSL, OUTSL
    printSrcIdx32(MI, 0, O); 
    return;
    break;
  case 19:
    // LODSQ
    printSrcIdx64(MI, 0, O); 
    return;
    break;
  case 20:
    // LODSW, OUTSW
    printSrcIdx16(MI, 0, O); 
    return;
    break;
  case 21:
    // LXADD16, XCHG16rm
    printi16mem(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 22:
    // LXADD32, XCHG32rm
    printi32mem(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 23:
    // LXADD64, XCHG64rm
    printi64mem(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 24:
    // LXADD8, XCHG8rm
    printi8mem(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  case 25:
    // MOV16ao16, MOV16ao16_16, MOV16o16a, MOV16o16a_16, MOV64ao16, MOV64o16a
    printMemOffs16(MI, 0, O); 
    break;
  case 26:
    // MOV32ao32, MOV32ao32_16, MOV32o32a, MOV32o32a_16, MOV64ao32, MOV64o32a
    printMemOffs32(MI, 0, O); 
    break;
  case 27:
    // MOV64ao64, MOV64o64a
    printMemOffs64(MI, 0, O); 
    break;
  case 28:
    // MOV64ao8, MOV64o8a, MOV8ao8, MOV8ao8_16, MOV8o8a, MOV8o8a_16
    printMemOffs8(MI, 0, O); 
    break;
  case 29:
    // MOVSQ, SCAS64, STOSQ
    printDstIdx64(MI, 0, O); 
    break;
  case 30:
    // XCHG16rr, XCHG32rr, XCHG64rr, XCHG8rr
    printOperand(MI, 2, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 15 unique commands.
  //printf("Frag-1: %"PRIu64"\n", (Bits >> 17) & 15);
  switch ((Bits >> 17) & 15) {
  default:   // unreachable.
  case 0:
    // AAD8i8, AAM8i8, ADC16i16, ADC32i32, ADC64i32, ADC8i8, ADD16i16, ADD32i...
    return;
    break;
  case 1:
    // ADC16mi, ADC16mi8, ADC16mr, ADC16rr_REV, ADC32mi, ADC32mi8, ADC32mr, A...
    SStream_concat(O, "%s", ", "); 
    break;
  case 2:
    // ADC16ri, ADC16ri8, ADC16rr, ADC32ri, ADC32ri8, ADC32rr, ADC64ri32, ADC...
    printOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // ADC16rm, ADD16rm, AND16rm, OR16rm, SBB16rm, SUB16rm, XOR16rm
    printi16mem(MI, 2, O); 
    return;
    break;
  case 4:
    // ADC32rm, ADD32rm, AND32rm, OR32rm, SBB32rm, SUB32rm, XOR32rm
    printi32mem(MI, 2, O); 
    return;
    break;
  case 5:
    // ADC64rm, ADD64rm, AND64rm, OR64rm, SBB64rm, SUB64rm, XOR64rm
    printi64mem(MI, 2, O); 
    return;
    break;
  case 6:
    // ADC8rm, ADD8rm, AND8rm, OR8rm, SBB8rm, SUB8rm, XOR8rm
    printi8mem(MI, 2, O); 
    return;
    break;
  case 7:
    // IN16, IN32, IN8
    SStream_concat(O, "%s", ", dx"); 
    return;
    break;
  case 8:
    // MOV16ao16, MOV16ao16_16, MOV64ao16, OUT16ir, STOSW
    SStream_concat(O, "%s", ", ax"); 
    return;
    break;
  case 9:
    // MOV32ao32, MOV32ao32_16, MOV64ao32, OUT32ir, STOSL
    SStream_concat(O, "%s", ", eax"); 
    return;
    break;
  case 10:
    // MOV64ao64, STOSQ
    SStream_concat(O, "%s", ", rax"); 
    return;
    break;
  case 11:
    // MOV64ao8, MOV8ao8, MOV8ao8_16, OUT8ir, STOSB
    SStream_concat(O, "%s", ", al"); 
    return;
    break;
  case 12:
    // RCL16mCL, RCL16rCL, RCL32mCL, RCL32rCL, RCL64mCL, RCL64rCL, RCL8mCL, R...
    SStream_concat(O, "%s", ", cl"); 
    return;
    break;
  case 13:
    // ROL16m1, ROL16r1, ROL32m1, ROL32r1, ROL64m1, ROL64r1, ROL8m1, ROL8r1, ...
    SStream_concat(O, "%s", ", 1"); 
    return;
    break;
  case 14:
    // TAILJMPd, TAILJMPd64, TAILJMPm, TAILJMPm64, TAILJMPr64
    SStream_concat(O, "%s", "  # TAILCALL"); 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 16 unique commands.
  //printf("Frag-2: %"PRIu64"\n", (Bits >> 21) & 15);
  switch ((Bits >> 21) & 15) {
  default:   // unreachable.
  case 0:
    // ADC16mi, ADC16mi8, ADC16mr, ADC32mi, ADC32mi8, ADC32mr, ADC64mi32, ADC...
    printOperand(MI, 5, O); 
    break;
  case 1:
    // ADC16rr_REV, ADC32rr_REV, ADC64rr_REV, ADC8rr_REV, ADD16rr_REV, ADD32r...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADCX32rm, ADOX32rm, BEXTR32rm, BEXTRI32mi, BLCFILL32rm, BLCI32rm, BLCI...
    printi32mem(MI, 1, O); 
    break;
  case 3:
    // ADCX32rr, ADCX64rr, ADOX32rr, ADOX64rr, ANDN32rm, ANDN32rr, ANDN64rm, ...
    printOperand(MI, 1, O); 
    break;
  case 4:
    // ADCX64rm, ADOX64rm, BEXTR64rm, BEXTRI64mi, BLCFILL64rm, BLCI64rm, BLCI...
    printi64mem(MI, 1, O); 
    break;
  case 5:
    // BOUNDS16rm, BSF16rm, BSR16rm, CMP16rm, IMUL16rmi, IMUL16rmi8, LAR16rm,...
    printi16mem(MI, 1, O); 
    break;
  case 6:
    // CMOVA16rm, CMOVAE16rm, CMOVB16rm, CMOVBE16rm, CMOVE16rm, CMOVG16rm, CM...
    printi16mem(MI, 2, O); 
    return;
    break;
  case 7:
    // CMOVA32rm, CMOVAE32rm, CMOVB32rm, CMOVBE32rm, CMOVE32rm, CMOVG32rm, CM...
    printi32mem(MI, 2, O); 
    return;
    break;
  case 8:
    // CMOVA64rm, CMOVAE64rm, CMOVB64rm, CMOVBE64rm, CMOVE64rm, CMOVG64rm, CM...
    printi64mem(MI, 2, O); 
    return;
    break;
  case 9:
    // CMP8rm, MOV8rm, MOV8rm_NOREX, MOVSX16rm8, MOVSX32rm8, MOVSX64rm8, MOVZ...
    printi8mem(MI, 1, O); 
    break;
  case 10:
    // INVPCID32, INVPCID64
    printi128mem(MI, 1, O); 
    return;
    break;
  case 11:
    // LDS16rm, LDS32rm, LES16rm, LES32rm, LFS16rm, LFS32rm, LFS64rm, LGS16rm...
    printopaquemem(MI, 1, O); 
    return;
    break;
  case 12:
    // MOVSB
    printSrcIdx8(MI, 1, O); 
    return;
    break;
  case 13:
    // MOVSL
    printSrcIdx32(MI, 1, O); 
    return;
    break;
  case 14:
    // MOVSQ
    printSrcIdx64(MI, 1, O); 
    return;
    break;
  case 15:
    // MOVSW
    printSrcIdx16(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 4 unique commands.
  //printf("Frag-3: %"PRIu64"\n", (Bits >> 25) & 3);
  switch ((Bits >> 25) & 3) {
  default:   // unreachable.
  case 0:
    // ADC16mi, ADC16mi8, ADC16mr, ADC16rr_REV, ADC32mi, ADC32mi8, ADC32mr, A...
    return;
    break;
  case 1:
    // ANDN32rm, ANDN32rr, ANDN64rm, ANDN64rr, BEXTR32rm, BEXTR32rr, BEXTR64r...
    SStream_concat(O, "%s", ", "); 
    break;
  case 2:
    // MOV8mr_NOREX, MOV8rm_NOREX, MOV8rr_NOREX
    SStream_concat(O, "%s", "  # NOREX"); 
    return;
    break;
  case 3:
    // SHLD16mrCL, SHLD16rrCL, SHLD32mrCL, SHLD32rrCL, SHLD64mrCL, SHLD64rrCL...
    SStream_concat(O, "%s", ", cl"); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 5 unique commands.
  //printf("Frag-4: %"PRIu64"\n", (Bits >> 27) & 7);
  switch ((Bits >> 27) & 7) {
  default:   // unreachable.
  case 0:
    // ANDN32rm, MULX32rm, PDEP32rm, PEXT32rm
    printi32mem(MI, 2, O); 
    return;
    break;
  case 1:
    // ANDN32rr, ANDN64rr, BEXTR32rr, BEXTR64rr, BEXTRI32ri, BEXTRI64ri, BZHI...
    printOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ANDN64rm, MULX64rm, PDEP64rm, PEXT64rm
    printi64mem(MI, 2, O); 
    return;
    break;
  case 3:
    // BEXTR32rm, BEXTR64rm, BEXTRI32mi, BEXTRI64mi, BZHI32rm, BZHI64rm, IMUL...
    printOperand(MI, 6, O); 
    break;
  case 4:
    // SHLD16rri8, SHLD32rri8, SHLD64rri8, SHRD16rri8, SHRD32rri8, SHRD64rri8
    printOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  //printf("Frag-5: %"PRIu64"\n", (Bits >> 30) & 1);
  if ((Bits >> 30) & 1) {
    // VAARG_64
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 7, O); 
    SStream_concat(O, "%s", ", "); 
    printOperand(MI, 8, O); 
    return;
  } else {
    // BEXTR32rm, BEXTR64rm, BEXTRI32mi, BEXTRI64mi, BZHI32rm, BZHI64rm, IMUL...
    return;
  }
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
static char *getRegisterName(unsigned RegNo)
{
  // assert(RegNo && RegNo < 233 && "Invalid register number!");

#ifndef CAPSTONE_DIET
  static char AsmStrs[] = {
  /* 0 */ 's', 't', '(', '0', ')', 0,
  /* 6 */ 's', 't', '(', '1', ')', 0,
  /* 12 */ 's', 't', '(', '2', ')', 0,
  /* 18 */ 's', 't', '(', '3', ')', 0,
  /* 24 */ 's', 't', '(', '4', ')', 0,
  /* 30 */ 's', 't', '(', '5', ')', 0,
  /* 36 */ 's', 't', '(', '6', ')', 0,
  /* 42 */ 's', 't', '(', '7', ')', 0,
  /* 48 */ 'x', 'm', 'm', '1', '0', 0,
  /* 54 */ 'y', 'm', 'm', '1', '0', 0,
  /* 60 */ 'z', 'm', 'm', '1', '0', 0,
  /* 66 */ 'c', 'r', '1', '0', 0,
  /* 71 */ 'x', 'm', 'm', '2', '0', 0,
  /* 77 */ 'y', 'm', 'm', '2', '0', 0,
  /* 83 */ 'z', 'm', 'm', '2', '0', 0,
  /* 89 */ 'x', 'm', 'm', '3', '0', 0,
  /* 95 */ 'y', 'm', 'm', '3', '0', 0,
  /* 101 */ 'z', 'm', 'm', '3', '0', 0,
  /* 107 */ 'k', '0', 0,
  /* 110 */ 'x', 'm', 'm', '0', 0,
  /* 115 */ 'y', 'm', 'm', '0', 0,
  /* 120 */ 'z', 'm', 'm', '0', 0,
  /* 125 */ 'f', 'p', '0', 0,
  /* 129 */ 'c', 'r', '0', 0,
  /* 133 */ 'd', 'r', '0', 0,
  /* 137 */ 'x', 'm', 'm', '1', '1', 0,
  /* 143 */ 'y', 'm', 'm', '1', '1', 0,
  /* 149 */ 'z', 'm', 'm', '1', '1', 0,
  /* 155 */ 'c', 'r', '1', '1', 0,
  /* 160 */ 'x', 'm', 'm', '2', '1', 0,
  /* 166 */ 'y', 'm', 'm', '2', '1', 0,
  /* 172 */ 'z', 'm', 'm', '2', '1', 0,
  /* 178 */ 'x', 'm', 'm', '3', '1', 0,
  /* 184 */ 'y', 'm', 'm', '3', '1', 0,
  /* 190 */ 'z', 'm', 'm', '3', '1', 0,
  /* 196 */ 'k', '1', 0,
  /* 199 */ 'x', 'm', 'm', '1', 0,
  /* 204 */ 'y', 'm', 'm', '1', 0,
  /* 209 */ 'z', 'm', 'm', '1', 0,
  /* 214 */ 'f', 'p', '1', 0,
  /* 218 */ 'c', 'r', '1', 0,
  /* 222 */ 'd', 'r', '1', 0,
  /* 226 */ 'x', 'm', 'm', '1', '2', 0,
  /* 232 */ 'y', 'm', 'm', '1', '2', 0,
  /* 238 */ 'z', 'm', 'm', '1', '2', 0,
  /* 244 */ 'c', 'r', '1', '2', 0,
  /* 249 */ 'x', 'm', 'm', '2', '2', 0,
  /* 255 */ 'y', 'm', 'm', '2', '2', 0,
  /* 261 */ 'z', 'm', 'm', '2', '2', 0,
  /* 267 */ 'k', '2', 0,
  /* 270 */ 'x', 'm', 'm', '2', 0,
  /* 275 */ 'y', 'm', 'm', '2', 0,
  /* 280 */ 'z', 'm', 'm', '2', 0,
  /* 285 */ 'f', 'p', '2', 0,
  /* 289 */ 'c', 'r', '2', 0,
  /* 293 */ 'd', 'r', '2', 0,
  /* 297 */ 'x', 'm', 'm', '1', '3', 0,
  /* 303 */ 'y', 'm', 'm', '1', '3', 0,
  /* 309 */ 'z', 'm', 'm', '1', '3', 0,
  /* 315 */ 'c', 'r', '1', '3', 0,
  /* 320 */ 'x', 'm', 'm', '2', '3', 0,
  /* 326 */ 'y', 'm', 'm', '2', '3', 0,
  /* 332 */ 'z', 'm', 'm', '2', '3', 0,
  /* 338 */ 'k', '3', 0,
  /* 341 */ 'x', 'm', 'm', '3', 0,
  /* 346 */ 'y', 'm', 'm', '3', 0,
  /* 351 */ 'z', 'm', 'm', '3', 0,
  /* 356 */ 'f', 'p', '3', 0,
  /* 360 */ 'c', 'r', '3', 0,
  /* 364 */ 'd', 'r', '3', 0,
  /* 368 */ 'x', 'm', 'm', '1', '4', 0,
  /* 374 */ 'y', 'm', 'm', '1', '4', 0,
  /* 380 */ 'z', 'm', 'm', '1', '4', 0,
  /* 386 */ 'c', 'r', '1', '4', 0,
  /* 391 */ 'x', 'm', 'm', '2', '4', 0,
  /* 397 */ 'y', 'm', 'm', '2', '4', 0,
  /* 403 */ 'z', 'm', 'm', '2', '4', 0,
  /* 409 */ 'k', '4', 0,
  /* 412 */ 'x', 'm', 'm', '4', 0,
  /* 417 */ 'y', 'm', 'm', '4', 0,
  /* 422 */ 'z', 'm', 'm', '4', 0,
  /* 427 */ 'f', 'p', '4', 0,
  /* 431 */ 'c', 'r', '4', 0,
  /* 435 */ 'd', 'r', '4', 0,
  /* 439 */ 'x', 'm', 'm', '1', '5', 0,
  /* 445 */ 'y', 'm', 'm', '1', '5', 0,
  /* 451 */ 'z', 'm', 'm', '1', '5', 0,
  /* 457 */ 'c', 'r', '1', '5', 0,
  /* 462 */ 'x', 'm', 'm', '2', '5', 0,
  /* 468 */ 'y', 'm', 'm', '2', '5', 0,
  /* 474 */ 'z', 'm', 'm', '2', '5', 0,
  /* 480 */ 'k', '5', 0,
  /* 483 */ 'x', 'm', 'm', '5', 0,
  /* 488 */ 'y', 'm', 'm', '5', 0,
  /* 493 */ 'z', 'm', 'm', '5', 0,
  /* 498 */ 'f', 'p', '5', 0,
  /* 502 */ 'c', 'r', '5', 0,
  /* 506 */ 'd', 'r', '5', 0,
  /* 510 */ 'x', 'm', 'm', '1', '6', 0,
  /* 516 */ 'y', 'm', 'm', '1', '6', 0,
  /* 522 */ 'z', 'm', 'm', '1', '6', 0,
  /* 528 */ 'x', 'm', 'm', '2', '6', 0,
  /* 534 */ 'y', 'm', 'm', '2', '6', 0,
  /* 540 */ 'z', 'm', 'm', '2', '6', 0,
  /* 546 */ 'k', '6', 0,
  /* 549 */ 'x', 'm', 'm', '6', 0,
  /* 554 */ 'y', 'm', 'm', '6', 0,
  /* 559 */ 'z', 'm', 'm', '6', 0,
  /* 564 */ 'f', 'p', '6', 0,
  /* 568 */ 'c', 'r', '6', 0,
  /* 572 */ 'd', 'r', '6', 0,
  /* 576 */ 'x', 'm', 'm', '1', '7', 0,
  /* 582 */ 'y', 'm', 'm', '1', '7', 0,
  /* 588 */ 'z', 'm', 'm', '1', '7', 0,
  /* 594 */ 'x', 'm', 'm', '2', '7', 0,
  /* 600 */ 'y', 'm', 'm', '2', '7', 0,
  /* 606 */ 'z', 'm', 'm', '2', '7', 0,
  /* 612 */ 'k', '7', 0,
  /* 615 */ 'x', 'm', 'm', '7', 0,
  /* 620 */ 'y', 'm', 'm', '7', 0,
  /* 625 */ 'z', 'm', 'm', '7', 0,
  /* 630 */ 'c', 'r', '7', 0,
  /* 634 */ 'd', 'r', '7', 0,
  /* 638 */ 'x', 'm', 'm', '1', '8', 0,
  /* 644 */ 'y', 'm', 'm', '1', '8', 0,
  /* 650 */ 'z', 'm', 'm', '1', '8', 0,
  /* 656 */ 'x', 'm', 'm', '2', '8', 0,
  /* 662 */ 'y', 'm', 'm', '2', '8', 0,
  /* 668 */ 'z', 'm', 'm', '2', '8', 0,
  /* 674 */ 'x', 'm', 'm', '8', 0,
  /* 679 */ 'y', 'm', 'm', '8', 0,
  /* 684 */ 'z', 'm', 'm', '8', 0,
  /* 689 */ 'c', 'r', '8', 0,
  /* 693 */ 'x', 'm', 'm', '1', '9', 0,
  /* 699 */ 'y', 'm', 'm', '1', '9', 0,
  /* 705 */ 'z', 'm', 'm', '1', '9', 0,
  /* 711 */ 'x', 'm', 'm', '2', '9', 0,
  /* 717 */ 'y', 'm', 'm', '2', '9', 0,
  /* 723 */ 'z', 'm', 'm', '2', '9', 0,
  /* 729 */ 'x', 'm', 'm', '9', 0,
  /* 734 */ 'y', 'm', 'm', '9', 0,
  /* 739 */ 'z', 'm', 'm', '9', 0,
  /* 744 */ 'c', 'r', '9', 0,
  /* 748 */ 'r', '1', '0', 'b', 0,
  /* 753 */ 'r', '1', '1', 'b', 0,
  /* 758 */ 'r', '1', '2', 'b', 0,
  /* 763 */ 'r', '1', '3', 'b', 0,
  /* 768 */ 'r', '1', '4', 'b', 0,
  /* 773 */ 'r', '1', '5', 'b', 0,
  /* 778 */ 'r', '8', 'b', 0,
  /* 782 */ 'r', '9', 'b', 0,
  /* 786 */ 'r', '1', '0', 'd', 0,
  /* 791 */ 'r', '1', '1', 'd', 0,
  /* 796 */ 'r', '1', '2', 'd', 0,
  /* 801 */ 'r', '1', '3', 'd', 0,
  /* 806 */ 'r', '1', '4', 'd', 0,
  /* 811 */ 'r', '1', '5', 'd', 0,
  /* 816 */ 'r', '8', 'd', 0,
  /* 820 */ 'r', '9', 'd', 0,
  /* 824 */ 'a', 'h', 0,
  /* 827 */ 'b', 'h', 0,
  /* 830 */ 'c', 'h', 0,
  /* 833 */ 'd', 'h', 0,
  /* 836 */ 'e', 'd', 'i', 0,
  /* 840 */ 'r', 'd', 'i', 0,
  /* 844 */ 'e', 's', 'i', 0,
  /* 848 */ 'r', 's', 'i', 0,
  /* 852 */ 'a', 'l', 0,
  /* 855 */ 'b', 'l', 0,
  /* 858 */ 'c', 'l', 0,
  /* 861 */ 'd', 'l', 0,
  /* 864 */ 'd', 'i', 'l', 0,
  /* 868 */ 's', 'i', 'l', 0,
  /* 872 */ 'b', 'p', 'l', 0,
  /* 876 */ 's', 'p', 'l', 0,
  /* 880 */ 'e', 'b', 'p', 0,
  /* 884 */ 'r', 'b', 'p', 0,
  /* 888 */ 'e', 'i', 'p', 0,
  /* 892 */ 'r', 'i', 'p', 0,
  /* 896 */ 'e', 's', 'p', 0,
  /* 900 */ 'r', 's', 'p', 0,
  /* 904 */ 'c', 's', 0,
  /* 907 */ 'd', 's', 0,
  /* 910 */ 'e', 's', 0,
  /* 913 */ 'f', 's', 0,
  /* 916 */ 'f', 'l', 'a', 'g', 's', 0,
  /* 922 */ 's', 's', 0,
  /* 925 */ 'r', '1', '0', 'w', 0,
  /* 930 */ 'r', '1', '1', 'w', 0,
  /* 935 */ 'r', '1', '2', 'w', 0,
  /* 940 */ 'r', '1', '3', 'w', 0,
  /* 945 */ 'r', '1', '4', 'w', 0,
  /* 950 */ 'r', '1', '5', 'w', 0,
  /* 955 */ 'r', '8', 'w', 0,
  /* 959 */ 'r', '9', 'w', 0,
  /* 963 */ 'f', 'p', 's', 'w', 0,
  /* 968 */ 'e', 'a', 'x', 0,
  /* 972 */ 'r', 'a', 'x', 0,
  /* 976 */ 'e', 'b', 'x', 0,
  /* 980 */ 'r', 'b', 'x', 0,
  /* 984 */ 'e', 'c', 'x', 0,
  /* 988 */ 'r', 'c', 'x', 0,
  /* 992 */ 'e', 'd', 'x', 0,
  /* 996 */ 'r', 'd', 'x', 0,
  /* 1000 */ 'e', 'i', 'z', 0,
  /* 1004 */ 'r', 'i', 'z', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    824, 852, 969, 827, 855, 881, 872, 977, 830, 858, 904, 985, 833, 837, 
    864, 861, 907, 993, 968, 880, 976, 984, 836, 992, 916, 888, 1000, 910, 
    844, 896, 963, 913, 919, 889, 972, 884, 980, 988, 840, 996, 892, 1004, 
    848, 900, 845, 868, 897, 876, 922, 129, 218, 289, 360, 431, 502, 568, 
    630, 689, 744, 66, 155, 244, 315, 386, 457, 133, 222, 293, 364, 435, 
    506, 572, 634, 125, 214, 285, 356, 427, 498, 564, 107, 196, 267, 338, 
    409, 480, 546, 612, 111, 200, 271, 342, 413, 484, 550, 616, 690, 745, 
    67, 156, 245, 316, 387, 458, 0, 6, 12, 18, 24, 30, 36, 42, 
    110, 199, 270, 341, 412, 483, 549, 615, 674, 729, 48, 137, 226, 297, 
    368, 439, 510, 576, 638, 693, 71, 160, 249, 320, 391, 462, 528, 594, 
    656, 711, 89, 178, 115, 204, 275, 346, 417, 488, 554, 620, 679, 734, 
    54, 143, 232, 303, 374, 445, 516, 582, 644, 699, 77, 166, 255, 326, 
    397, 468, 534, 600, 662, 717, 95, 184, 120, 209, 280, 351, 422, 493, 
    559, 625, 684, 739, 60, 149, 238, 309, 380, 451, 522, 588, 650, 705, 
    83, 172, 261, 332, 403, 474, 540, 606, 668, 723, 101, 190, 778, 782, 
    748, 753, 758, 763, 768, 773, 816, 820, 786, 791, 796, 801, 806, 811, 
    955, 959, 925, 930, 935, 940, 945, 950, 
  };

  //int i;
  //for (i = 0; i < sizeof(RegAsmOffset)/4; i++)
  //     printf("%s = %u\n", AsmStrs+RegAsmOffset[i], i + 1);
  //printf("*************************\n");
  return AsmStrs+RegAsmOffset[RegNo-1];
#else
  return NULL;
#endif
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static char *printAliasInstr(MCInst *MI, SStream *OS, void *info)
{
  #define GETREGCLASS_CONTAIN(_class, _reg) MCRegisterClass_contains(MCRegisterInfo_getRegClass(MRI, _class), MCOperand_getReg(MCInst_getOperand(MI, _reg)))
  const char *AsmString;
  // MCRegisterInfo *MRI = (MCRegisterInfo *)info;
  switch (MCInst_getOpcode(MI)) {
  default: return 0;
  case X86_AAD8i8:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10) {
      // (AAD8i8 10)
      AsmString = "aad";
      break;
    }
    return 0;
  case X86_AAM8i8:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10) {
      // (AAM8i8 10)
      AsmString = "aam";
      break;
    }
    return 0;
  case X86_XSTORE:
    if (MCInst_getNumOperands(MI) == 0) {
      // (XSTORE)
      AsmString = "xstorerng";
      break;
    }
    return 0;
  }

  char *tmp = cs_strdup(AsmString), *AsmMnem, *AsmOps;
  AsmMnem = tmp;
  AsmOps = strchr(tmp, ' ');
  if (AsmOps) {
    *AsmOps = '\0';
    AsmOps += 1;
  }
  SStream_concat(OS, "%s", AsmMnem);
  if (AsmOps) {
    SStream_concat(OS, "\t");
    char *c;
    for (c = AsmOps; *c; c++) {
      if (*c == '$') {
        c += 1;
        printOperand(MI, *c - 1, OS);
      } else {
        SStream_concat(OS, "%c", *c);
      }
    }
  }
  return tmp;
}

#endif // PRINT_ALIAS_INSTR
